
Dehydrator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005784  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d4  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006918  08006918  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006918  08006918  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006918  08006918  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000074  08006994  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08006994  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df38  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d4e  00000000  00000000  0003dfd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000eabb  00000000  00000000  00040d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000fb0  00000000  00000000  0004f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000f38  00000000  00000000  00050790  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00012332  00000000  00000000  000516c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f2c5  00000000  00000000  000639fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00066ad4  00000000  00000000  00072cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d9793  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003080  00000000  00000000  000d9810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800582c 	.word	0x0800582c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800582c 	.word	0x0800582c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_f2uiz>:
 80003f4:	219e      	movs	r1, #158	; 0x9e
 80003f6:	b510      	push	{r4, lr}
 80003f8:	05c9      	lsls	r1, r1, #23
 80003fa:	1c04      	adds	r4, r0, #0
 80003fc:	f000 fe8e 	bl	800111c <__aeabi_fcmpge>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <__aeabi_f2uiz+0x18>
 8000404:	1c20      	adds	r0, r4, #0
 8000406:	f000 fdaf 	bl	8000f68 <__aeabi_f2iz>
 800040a:	bd10      	pop	{r4, pc}
 800040c:	219e      	movs	r1, #158	; 0x9e
 800040e:	1c20      	adds	r0, r4, #0
 8000410:	05c9      	lsls	r1, r1, #23
 8000412:	f000 fbe5 	bl	8000be0 <__aeabi_fsub>
 8000416:	f000 fda7 	bl	8000f68 <__aeabi_f2iz>
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	061b      	lsls	r3, r3, #24
 800041e:	469c      	mov	ip, r3
 8000420:	4460      	add	r0, ip
 8000422:	e7f2      	b.n	800040a <__aeabi_f2uiz+0x16>

08000424 <__aeabi_fadd>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	4647      	mov	r7, r8
 8000428:	46ce      	mov	lr, r9
 800042a:	0243      	lsls	r3, r0, #9
 800042c:	0a5b      	lsrs	r3, r3, #9
 800042e:	0044      	lsls	r4, r0, #1
 8000430:	0fc2      	lsrs	r2, r0, #31
 8000432:	469c      	mov	ip, r3
 8000434:	0048      	lsls	r0, r1, #1
 8000436:	00dd      	lsls	r5, r3, #3
 8000438:	024b      	lsls	r3, r1, #9
 800043a:	0e24      	lsrs	r4, r4, #24
 800043c:	0a5b      	lsrs	r3, r3, #9
 800043e:	0e00      	lsrs	r0, r0, #24
 8000440:	b580      	push	{r7, lr}
 8000442:	4698      	mov	r8, r3
 8000444:	0026      	movs	r6, r4
 8000446:	4691      	mov	r9, r2
 8000448:	0fc9      	lsrs	r1, r1, #31
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	1a27      	subs	r7, r4, r0
 800044e:	428a      	cmp	r2, r1
 8000450:	d029      	beq.n	80004a6 <__aeabi_fadd+0x82>
 8000452:	2f00      	cmp	r7, #0
 8000454:	dd15      	ble.n	8000482 <__aeabi_fadd+0x5e>
 8000456:	2800      	cmp	r0, #0
 8000458:	d14a      	bne.n	80004f0 <__aeabi_fadd+0xcc>
 800045a:	2b00      	cmp	r3, #0
 800045c:	d000      	beq.n	8000460 <__aeabi_fadd+0x3c>
 800045e:	e095      	b.n	800058c <__aeabi_fadd+0x168>
 8000460:	08ed      	lsrs	r5, r5, #3
 8000462:	2cff      	cmp	r4, #255	; 0xff
 8000464:	d100      	bne.n	8000468 <__aeabi_fadd+0x44>
 8000466:	e088      	b.n	800057a <__aeabi_fadd+0x156>
 8000468:	026b      	lsls	r3, r5, #9
 800046a:	0a5b      	lsrs	r3, r3, #9
 800046c:	b2e6      	uxtb	r6, r4
 800046e:	025b      	lsls	r3, r3, #9
 8000470:	05f6      	lsls	r6, r6, #23
 8000472:	0a58      	lsrs	r0, r3, #9
 8000474:	4330      	orrs	r0, r6
 8000476:	07d2      	lsls	r2, r2, #31
 8000478:	4310      	orrs	r0, r2
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4690      	mov	r8, r2
 800047e:	4699      	mov	r9, r3
 8000480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000482:	2f00      	cmp	r7, #0
 8000484:	d000      	beq.n	8000488 <__aeabi_fadd+0x64>
 8000486:	e087      	b.n	8000598 <__aeabi_fadd+0x174>
 8000488:	1c60      	adds	r0, r4, #1
 800048a:	b2c0      	uxtb	r0, r0
 800048c:	2801      	cmp	r0, #1
 800048e:	dc00      	bgt.n	8000492 <__aeabi_fadd+0x6e>
 8000490:	e0b6      	b.n	8000600 <__aeabi_fadd+0x1dc>
 8000492:	1aee      	subs	r6, r5, r3
 8000494:	0172      	lsls	r2, r6, #5
 8000496:	d500      	bpl.n	800049a <__aeabi_fadd+0x76>
 8000498:	e0c5      	b.n	8000626 <__aeabi_fadd+0x202>
 800049a:	2e00      	cmp	r6, #0
 800049c:	d13d      	bne.n	800051a <__aeabi_fadd+0xf6>
 800049e:	2200      	movs	r2, #0
 80004a0:	2600      	movs	r6, #0
 80004a2:	2300      	movs	r3, #0
 80004a4:	e7e3      	b.n	800046e <__aeabi_fadd+0x4a>
 80004a6:	2f00      	cmp	r7, #0
 80004a8:	dc00      	bgt.n	80004ac <__aeabi_fadd+0x88>
 80004aa:	e096      	b.n	80005da <__aeabi_fadd+0x1b6>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d05d      	beq.n	800056c <__aeabi_fadd+0x148>
 80004b0:	2cff      	cmp	r4, #255	; 0xff
 80004b2:	d060      	beq.n	8000576 <__aeabi_fadd+0x152>
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	4313      	orrs	r3, r2
 80004ba:	2f1b      	cmp	r7, #27
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_fadd+0x9c>
 80004be:	e0ec      	b.n	800069a <__aeabi_fadd+0x276>
 80004c0:	2220      	movs	r2, #32
 80004c2:	1bd2      	subs	r2, r2, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	4093      	lsls	r3, r2
 80004c8:	40f8      	lsrs	r0, r7
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	4193      	sbcs	r3, r2
 80004ce:	4303      	orrs	r3, r0
 80004d0:	18ed      	adds	r5, r5, r3
 80004d2:	016b      	lsls	r3, r5, #5
 80004d4:	d57b      	bpl.n	80005ce <__aeabi_fadd+0x1aa>
 80004d6:	3401      	adds	r4, #1
 80004d8:	2cff      	cmp	r4, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0xba>
 80004dc:	e0b7      	b.n	800064e <__aeabi_fadd+0x22a>
 80004de:	2201      	movs	r2, #1
 80004e0:	2607      	movs	r6, #7
 80004e2:	402a      	ands	r2, r5
 80004e4:	086b      	lsrs	r3, r5, #1
 80004e6:	4d9a      	ldr	r5, [pc, #616]	; (8000750 <__aeabi_fadd+0x32c>)
 80004e8:	401d      	ands	r5, r3
 80004ea:	4315      	orrs	r5, r2
 80004ec:	402e      	ands	r6, r5
 80004ee:	e029      	b.n	8000544 <__aeabi_fadd+0x120>
 80004f0:	2cff      	cmp	r4, #255	; 0xff
 80004f2:	d0b5      	beq.n	8000460 <__aeabi_fadd+0x3c>
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	4313      	orrs	r3, r2
 80004fa:	2f1b      	cmp	r7, #27
 80004fc:	dd00      	ble.n	8000500 <__aeabi_fadd+0xdc>
 80004fe:	e0b2      	b.n	8000666 <__aeabi_fadd+0x242>
 8000500:	2220      	movs	r2, #32
 8000502:	1bd2      	subs	r2, r2, r7
 8000504:	0019      	movs	r1, r3
 8000506:	4093      	lsls	r3, r2
 8000508:	40f9      	lsrs	r1, r7
 800050a:	1e5a      	subs	r2, r3, #1
 800050c:	4193      	sbcs	r3, r2
 800050e:	430b      	orrs	r3, r1
 8000510:	1aed      	subs	r5, r5, r3
 8000512:	016b      	lsls	r3, r5, #5
 8000514:	d55b      	bpl.n	80005ce <__aeabi_fadd+0x1aa>
 8000516:	01ad      	lsls	r5, r5, #6
 8000518:	09ae      	lsrs	r6, r5, #6
 800051a:	0030      	movs	r0, r6
 800051c:	f000 fe08 	bl	8001130 <__clzsi2>
 8000520:	3805      	subs	r0, #5
 8000522:	4086      	lsls	r6, r0
 8000524:	4284      	cmp	r4, r0
 8000526:	dc65      	bgt.n	80005f4 <__aeabi_fadd+0x1d0>
 8000528:	1b04      	subs	r4, r0, r4
 800052a:	0033      	movs	r3, r6
 800052c:	2020      	movs	r0, #32
 800052e:	3401      	adds	r4, #1
 8000530:	40e3      	lsrs	r3, r4
 8000532:	1b04      	subs	r4, r0, r4
 8000534:	40a6      	lsls	r6, r4
 8000536:	1e75      	subs	r5, r6, #1
 8000538:	41ae      	sbcs	r6, r5
 800053a:	4333      	orrs	r3, r6
 800053c:	2607      	movs	r6, #7
 800053e:	001d      	movs	r5, r3
 8000540:	2400      	movs	r4, #0
 8000542:	401e      	ands	r6, r3
 8000544:	2201      	movs	r2, #1
 8000546:	464b      	mov	r3, r9
 8000548:	401a      	ands	r2, r3
 800054a:	2e00      	cmp	r6, #0
 800054c:	d004      	beq.n	8000558 <__aeabi_fadd+0x134>
 800054e:	230f      	movs	r3, #15
 8000550:	402b      	ands	r3, r5
 8000552:	2b04      	cmp	r3, #4
 8000554:	d000      	beq.n	8000558 <__aeabi_fadd+0x134>
 8000556:	3504      	adds	r5, #4
 8000558:	016b      	lsls	r3, r5, #5
 800055a:	d400      	bmi.n	800055e <__aeabi_fadd+0x13a>
 800055c:	e780      	b.n	8000460 <__aeabi_fadd+0x3c>
 800055e:	3401      	adds	r4, #1
 8000560:	b2e6      	uxtb	r6, r4
 8000562:	2cff      	cmp	r4, #255	; 0xff
 8000564:	d12f      	bne.n	80005c6 <__aeabi_fadd+0x1a2>
 8000566:	26ff      	movs	r6, #255	; 0xff
 8000568:	2300      	movs	r3, #0
 800056a:	e780      	b.n	800046e <__aeabi_fadd+0x4a>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d152      	bne.n	8000616 <__aeabi_fadd+0x1f2>
 8000570:	2cff      	cmp	r4, #255	; 0xff
 8000572:	d000      	beq.n	8000576 <__aeabi_fadd+0x152>
 8000574:	e774      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000576:	000a      	movs	r2, r1
 8000578:	08ed      	lsrs	r5, r5, #3
 800057a:	2d00      	cmp	r5, #0
 800057c:	d0f3      	beq.n	8000566 <__aeabi_fadd+0x142>
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	03db      	lsls	r3, r3, #15
 8000582:	432b      	orrs	r3, r5
 8000584:	025b      	lsls	r3, r3, #9
 8000586:	0a5b      	lsrs	r3, r3, #9
 8000588:	26ff      	movs	r6, #255	; 0xff
 800058a:	e770      	b.n	800046e <__aeabi_fadd+0x4a>
 800058c:	3f01      	subs	r7, #1
 800058e:	2f00      	cmp	r7, #0
 8000590:	d0be      	beq.n	8000510 <__aeabi_fadd+0xec>
 8000592:	2cff      	cmp	r4, #255	; 0xff
 8000594:	d1b1      	bne.n	80004fa <__aeabi_fadd+0xd6>
 8000596:	e763      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000598:	2c00      	cmp	r4, #0
 800059a:	d047      	beq.n	800062c <__aeabi_fadd+0x208>
 800059c:	28ff      	cmp	r0, #255	; 0xff
 800059e:	d069      	beq.n	8000674 <__aeabi_fadd+0x250>
 80005a0:	2480      	movs	r4, #128	; 0x80
 80005a2:	04e4      	lsls	r4, r4, #19
 80005a4:	427a      	negs	r2, r7
 80005a6:	4325      	orrs	r5, r4
 80005a8:	2a1b      	cmp	r2, #27
 80005aa:	dd00      	ble.n	80005ae <__aeabi_fadd+0x18a>
 80005ac:	e0c5      	b.n	800073a <__aeabi_fadd+0x316>
 80005ae:	002c      	movs	r4, r5
 80005b0:	2620      	movs	r6, #32
 80005b2:	40d4      	lsrs	r4, r2
 80005b4:	1ab2      	subs	r2, r6, r2
 80005b6:	4095      	lsls	r5, r2
 80005b8:	1e6a      	subs	r2, r5, #1
 80005ba:	4195      	sbcs	r5, r2
 80005bc:	4325      	orrs	r5, r4
 80005be:	1b5d      	subs	r5, r3, r5
 80005c0:	0004      	movs	r4, r0
 80005c2:	4689      	mov	r9, r1
 80005c4:	e7a5      	b.n	8000512 <__aeabi_fadd+0xee>
 80005c6:	01ab      	lsls	r3, r5, #6
 80005c8:	0a5b      	lsrs	r3, r3, #9
 80005ca:	e750      	b.n	800046e <__aeabi_fadd+0x4a>
 80005cc:	2400      	movs	r4, #0
 80005ce:	2201      	movs	r2, #1
 80005d0:	464b      	mov	r3, r9
 80005d2:	401a      	ands	r2, r3
 80005d4:	076b      	lsls	r3, r5, #29
 80005d6:	d1ba      	bne.n	800054e <__aeabi_fadd+0x12a>
 80005d8:	e742      	b.n	8000460 <__aeabi_fadd+0x3c>
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d13b      	bne.n	8000656 <__aeabi_fadd+0x232>
 80005de:	3401      	adds	r4, #1
 80005e0:	b2e0      	uxtb	r0, r4
 80005e2:	2801      	cmp	r0, #1
 80005e4:	dd4a      	ble.n	800067c <__aeabi_fadd+0x258>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d0bd      	beq.n	8000566 <__aeabi_fadd+0x142>
 80005ea:	2607      	movs	r6, #7
 80005ec:	18ed      	adds	r5, r5, r3
 80005ee:	086d      	lsrs	r5, r5, #1
 80005f0:	402e      	ands	r6, r5
 80005f2:	e7a7      	b.n	8000544 <__aeabi_fadd+0x120>
 80005f4:	2307      	movs	r3, #7
 80005f6:	4d57      	ldr	r5, [pc, #348]	; (8000754 <__aeabi_fadd+0x330>)
 80005f8:	1a24      	subs	r4, r4, r0
 80005fa:	4035      	ands	r5, r6
 80005fc:	401e      	ands	r6, r3
 80005fe:	e7a1      	b.n	8000544 <__aeabi_fadd+0x120>
 8000600:	2c00      	cmp	r4, #0
 8000602:	d11b      	bne.n	800063c <__aeabi_fadd+0x218>
 8000604:	2d00      	cmp	r5, #0
 8000606:	d16e      	bne.n	80006e6 <__aeabi_fadd+0x2c2>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x1ea>
 800060c:	e09a      	b.n	8000744 <__aeabi_fadd+0x320>
 800060e:	000a      	movs	r2, r1
 8000610:	001d      	movs	r5, r3
 8000612:	003c      	movs	r4, r7
 8000614:	e724      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000616:	3f01      	subs	r7, #1
 8000618:	2f00      	cmp	r7, #0
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x1fa>
 800061c:	e758      	b.n	80004d0 <__aeabi_fadd+0xac>
 800061e:	2cff      	cmp	r4, #255	; 0xff
 8000620:	d000      	beq.n	8000624 <__aeabi_fadd+0x200>
 8000622:	e74a      	b.n	80004ba <__aeabi_fadd+0x96>
 8000624:	e7a7      	b.n	8000576 <__aeabi_fadd+0x152>
 8000626:	1b5e      	subs	r6, r3, r5
 8000628:	4689      	mov	r9, r1
 800062a:	e776      	b.n	800051a <__aeabi_fadd+0xf6>
 800062c:	2d00      	cmp	r5, #0
 800062e:	d11c      	bne.n	800066a <__aeabi_fadd+0x246>
 8000630:	000a      	movs	r2, r1
 8000632:	28ff      	cmp	r0, #255	; 0xff
 8000634:	d01f      	beq.n	8000676 <__aeabi_fadd+0x252>
 8000636:	0004      	movs	r4, r0
 8000638:	001d      	movs	r5, r3
 800063a:	e711      	b.n	8000460 <__aeabi_fadd+0x3c>
 800063c:	2d00      	cmp	r5, #0
 800063e:	d15d      	bne.n	80006fc <__aeabi_fadd+0x2d8>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d117      	bne.n	8000674 <__aeabi_fadd+0x250>
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	2200      	movs	r2, #0
 8000648:	03db      	lsls	r3, r3, #15
 800064a:	26ff      	movs	r6, #255	; 0xff
 800064c:	e70f      	b.n	800046e <__aeabi_fadd+0x4a>
 800064e:	000a      	movs	r2, r1
 8000650:	26ff      	movs	r6, #255	; 0xff
 8000652:	2300      	movs	r3, #0
 8000654:	e70b      	b.n	800046e <__aeabi_fadd+0x4a>
 8000656:	2c00      	cmp	r4, #0
 8000658:	d121      	bne.n	800069e <__aeabi_fadd+0x27a>
 800065a:	2d00      	cmp	r5, #0
 800065c:	d166      	bne.n	800072c <__aeabi_fadd+0x308>
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d1e9      	bne.n	8000636 <__aeabi_fadd+0x212>
 8000662:	001d      	movs	r5, r3
 8000664:	e787      	b.n	8000576 <__aeabi_fadd+0x152>
 8000666:	2301      	movs	r3, #1
 8000668:	e752      	b.n	8000510 <__aeabi_fadd+0xec>
 800066a:	1c7a      	adds	r2, r7, #1
 800066c:	d0a7      	beq.n	80005be <__aeabi_fadd+0x19a>
 800066e:	43fa      	mvns	r2, r7
 8000670:	28ff      	cmp	r0, #255	; 0xff
 8000672:	d199      	bne.n	80005a8 <__aeabi_fadd+0x184>
 8000674:	000a      	movs	r2, r1
 8000676:	001d      	movs	r5, r3
 8000678:	24ff      	movs	r4, #255	; 0xff
 800067a:	e6f1      	b.n	8000460 <__aeabi_fadd+0x3c>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d121      	bne.n	80006c4 <__aeabi_fadd+0x2a0>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d04f      	beq.n	8000724 <__aeabi_fadd+0x300>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d04c      	beq.n	8000722 <__aeabi_fadd+0x2fe>
 8000688:	18ed      	adds	r5, r5, r3
 800068a:	016b      	lsls	r3, r5, #5
 800068c:	d59e      	bpl.n	80005cc <__aeabi_fadd+0x1a8>
 800068e:	4b31      	ldr	r3, [pc, #196]	; (8000754 <__aeabi_fadd+0x330>)
 8000690:	3607      	adds	r6, #7
 8000692:	402e      	ands	r6, r5
 8000694:	2401      	movs	r4, #1
 8000696:	401d      	ands	r5, r3
 8000698:	e754      	b.n	8000544 <__aeabi_fadd+0x120>
 800069a:	2301      	movs	r3, #1
 800069c:	e718      	b.n	80004d0 <__aeabi_fadd+0xac>
 800069e:	28ff      	cmp	r0, #255	; 0xff
 80006a0:	d0df      	beq.n	8000662 <__aeabi_fadd+0x23e>
 80006a2:	2480      	movs	r4, #128	; 0x80
 80006a4:	04e4      	lsls	r4, r4, #19
 80006a6:	427f      	negs	r7, r7
 80006a8:	4325      	orrs	r5, r4
 80006aa:	2f1b      	cmp	r7, #27
 80006ac:	dc4d      	bgt.n	800074a <__aeabi_fadd+0x326>
 80006ae:	2620      	movs	r6, #32
 80006b0:	1bf6      	subs	r6, r6, r7
 80006b2:	002c      	movs	r4, r5
 80006b4:	40b5      	lsls	r5, r6
 80006b6:	40fc      	lsrs	r4, r7
 80006b8:	1e6a      	subs	r2, r5, #1
 80006ba:	4195      	sbcs	r5, r2
 80006bc:	4325      	orrs	r5, r4
 80006be:	18ed      	adds	r5, r5, r3
 80006c0:	0004      	movs	r4, r0
 80006c2:	e706      	b.n	80004d2 <__aeabi_fadd+0xae>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d0cc      	beq.n	8000662 <__aeabi_fadd+0x23e>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x2aa>
 80006cc:	e753      	b.n	8000576 <__aeabi_fadd+0x152>
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4660      	mov	r0, ip
 80006d2:	03c9      	lsls	r1, r1, #15
 80006d4:	4208      	tst	r0, r1
 80006d6:	d003      	beq.n	80006e0 <__aeabi_fadd+0x2bc>
 80006d8:	4640      	mov	r0, r8
 80006da:	4208      	tst	r0, r1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x2bc>
 80006de:	001d      	movs	r5, r3
 80006e0:	2101      	movs	r1, #1
 80006e2:	4011      	ands	r1, r2
 80006e4:	e747      	b.n	8000576 <__aeabi_fadd+0x152>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x2c8>
 80006ea:	e6b9      	b.n	8000460 <__aeabi_fadd+0x3c>
 80006ec:	1aea      	subs	r2, r5, r3
 80006ee:	0150      	lsls	r0, r2, #5
 80006f0:	d525      	bpl.n	800073e <__aeabi_fadd+0x31a>
 80006f2:	2607      	movs	r6, #7
 80006f4:	1b5d      	subs	r5, r3, r5
 80006f6:	402e      	ands	r6, r5
 80006f8:	4689      	mov	r9, r1
 80006fa:	e723      	b.n	8000544 <__aeabi_fadd+0x120>
 80006fc:	24ff      	movs	r4, #255	; 0xff
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x2e0>
 8000702:	e6ad      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	4660      	mov	r0, ip
 8000708:	03d2      	lsls	r2, r2, #15
 800070a:	4210      	tst	r0, r2
 800070c:	d004      	beq.n	8000718 <__aeabi_fadd+0x2f4>
 800070e:	4640      	mov	r0, r8
 8000710:	4210      	tst	r0, r2
 8000712:	d101      	bne.n	8000718 <__aeabi_fadd+0x2f4>
 8000714:	001d      	movs	r5, r3
 8000716:	4689      	mov	r9, r1
 8000718:	2201      	movs	r2, #1
 800071a:	464b      	mov	r3, r9
 800071c:	24ff      	movs	r4, #255	; 0xff
 800071e:	401a      	ands	r2, r3
 8000720:	e69e      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000722:	002b      	movs	r3, r5
 8000724:	08dd      	lsrs	r5, r3, #3
 8000726:	000a      	movs	r2, r1
 8000728:	2400      	movs	r4, #0
 800072a:	e69d      	b.n	8000468 <__aeabi_fadd+0x44>
 800072c:	1c7a      	adds	r2, r7, #1
 800072e:	d0c6      	beq.n	80006be <__aeabi_fadd+0x29a>
 8000730:	43ff      	mvns	r7, r7
 8000732:	28ff      	cmp	r0, #255	; 0xff
 8000734:	d1b9      	bne.n	80006aa <__aeabi_fadd+0x286>
 8000736:	001d      	movs	r5, r3
 8000738:	e71d      	b.n	8000576 <__aeabi_fadd+0x152>
 800073a:	2501      	movs	r5, #1
 800073c:	e73f      	b.n	80005be <__aeabi_fadd+0x19a>
 800073e:	1e15      	subs	r5, r2, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x320>
 8000742:	e744      	b.n	80005ce <__aeabi_fadd+0x1aa>
 8000744:	2200      	movs	r2, #0
 8000746:	2300      	movs	r3, #0
 8000748:	e691      	b.n	800046e <__aeabi_fadd+0x4a>
 800074a:	2501      	movs	r5, #1
 800074c:	e7b7      	b.n	80006be <__aeabi_fadd+0x29a>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	7dffffff 	.word	0x7dffffff
 8000754:	fbffffff 	.word	0xfbffffff

08000758 <__aeabi_fdiv>:
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075a:	4657      	mov	r7, sl
 800075c:	464e      	mov	r6, r9
 800075e:	4645      	mov	r5, r8
 8000760:	46de      	mov	lr, fp
 8000762:	0244      	lsls	r4, r0, #9
 8000764:	b5e0      	push	{r5, r6, r7, lr}
 8000766:	0046      	lsls	r6, r0, #1
 8000768:	4688      	mov	r8, r1
 800076a:	0a64      	lsrs	r4, r4, #9
 800076c:	0e36      	lsrs	r6, r6, #24
 800076e:	0fc7      	lsrs	r7, r0, #31
 8000770:	2e00      	cmp	r6, #0
 8000772:	d063      	beq.n	800083c <__aeabi_fdiv+0xe4>
 8000774:	2eff      	cmp	r6, #255	; 0xff
 8000776:	d024      	beq.n	80007c2 <__aeabi_fdiv+0x6a>
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	00e4      	lsls	r4, r4, #3
 800077c:	04db      	lsls	r3, r3, #19
 800077e:	431c      	orrs	r4, r3
 8000780:	2300      	movs	r3, #0
 8000782:	4699      	mov	r9, r3
 8000784:	469b      	mov	fp, r3
 8000786:	3e7f      	subs	r6, #127	; 0x7f
 8000788:	4643      	mov	r3, r8
 800078a:	4642      	mov	r2, r8
 800078c:	025d      	lsls	r5, r3, #9
 800078e:	0fd2      	lsrs	r2, r2, #31
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	0a6d      	lsrs	r5, r5, #9
 8000794:	0e1b      	lsrs	r3, r3, #24
 8000796:	4690      	mov	r8, r2
 8000798:	4692      	mov	sl, r2
 800079a:	d065      	beq.n	8000868 <__aeabi_fdiv+0x110>
 800079c:	2bff      	cmp	r3, #255	; 0xff
 800079e:	d055      	beq.n	800084c <__aeabi_fdiv+0xf4>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	2100      	movs	r1, #0
 80007a4:	00ed      	lsls	r5, r5, #3
 80007a6:	04d2      	lsls	r2, r2, #19
 80007a8:	3b7f      	subs	r3, #127	; 0x7f
 80007aa:	4315      	orrs	r5, r2
 80007ac:	1af6      	subs	r6, r6, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	464a      	mov	r2, r9
 80007b2:	407b      	eors	r3, r7
 80007b4:	2a0f      	cmp	r2, #15
 80007b6:	d900      	bls.n	80007ba <__aeabi_fdiv+0x62>
 80007b8:	e08d      	b.n	80008d6 <__aeabi_fdiv+0x17e>
 80007ba:	486d      	ldr	r0, [pc, #436]	; (8000970 <__aeabi_fdiv+0x218>)
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	5882      	ldr	r2, [r0, r2]
 80007c0:	4697      	mov	pc, r2
 80007c2:	2c00      	cmp	r4, #0
 80007c4:	d154      	bne.n	8000870 <__aeabi_fdiv+0x118>
 80007c6:	2308      	movs	r3, #8
 80007c8:	4699      	mov	r9, r3
 80007ca:	3b06      	subs	r3, #6
 80007cc:	26ff      	movs	r6, #255	; 0xff
 80007ce:	469b      	mov	fp, r3
 80007d0:	e7da      	b.n	8000788 <__aeabi_fdiv+0x30>
 80007d2:	2500      	movs	r5, #0
 80007d4:	4653      	mov	r3, sl
 80007d6:	2902      	cmp	r1, #2
 80007d8:	d01b      	beq.n	8000812 <__aeabi_fdiv+0xba>
 80007da:	2903      	cmp	r1, #3
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fdiv+0x88>
 80007de:	e0bf      	b.n	8000960 <__aeabi_fdiv+0x208>
 80007e0:	2901      	cmp	r1, #1
 80007e2:	d028      	beq.n	8000836 <__aeabi_fdiv+0xde>
 80007e4:	0030      	movs	r0, r6
 80007e6:	307f      	adds	r0, #127	; 0x7f
 80007e8:	2800      	cmp	r0, #0
 80007ea:	dd20      	ble.n	800082e <__aeabi_fdiv+0xd6>
 80007ec:	076a      	lsls	r2, r5, #29
 80007ee:	d004      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f0:	220f      	movs	r2, #15
 80007f2:	402a      	ands	r2, r5
 80007f4:	2a04      	cmp	r2, #4
 80007f6:	d000      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f8:	3504      	adds	r5, #4
 80007fa:	012a      	lsls	r2, r5, #4
 80007fc:	d503      	bpl.n	8000806 <__aeabi_fdiv+0xae>
 80007fe:	0030      	movs	r0, r6
 8000800:	4a5c      	ldr	r2, [pc, #368]	; (8000974 <__aeabi_fdiv+0x21c>)
 8000802:	3080      	adds	r0, #128	; 0x80
 8000804:	4015      	ands	r5, r2
 8000806:	28fe      	cmp	r0, #254	; 0xfe
 8000808:	dc03      	bgt.n	8000812 <__aeabi_fdiv+0xba>
 800080a:	01ac      	lsls	r4, r5, #6
 800080c:	0a64      	lsrs	r4, r4, #9
 800080e:	b2c2      	uxtb	r2, r0
 8000810:	e001      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000812:	22ff      	movs	r2, #255	; 0xff
 8000814:	2400      	movs	r4, #0
 8000816:	0264      	lsls	r4, r4, #9
 8000818:	05d2      	lsls	r2, r2, #23
 800081a:	0a60      	lsrs	r0, r4, #9
 800081c:	07db      	lsls	r3, r3, #31
 800081e:	4310      	orrs	r0, r2
 8000820:	4318      	orrs	r0, r3
 8000822:	bc3c      	pop	{r2, r3, r4, r5}
 8000824:	4690      	mov	r8, r2
 8000826:	4699      	mov	r9, r3
 8000828:	46a2      	mov	sl, r4
 800082a:	46ab      	mov	fp, r5
 800082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082e:	2201      	movs	r2, #1
 8000830:	1a10      	subs	r0, r2, r0
 8000832:	281b      	cmp	r0, #27
 8000834:	dd7c      	ble.n	8000930 <__aeabi_fdiv+0x1d8>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	e7ec      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800083c:	2c00      	cmp	r4, #0
 800083e:	d11d      	bne.n	800087c <__aeabi_fdiv+0x124>
 8000840:	2304      	movs	r3, #4
 8000842:	4699      	mov	r9, r3
 8000844:	3b03      	subs	r3, #3
 8000846:	2600      	movs	r6, #0
 8000848:	469b      	mov	fp, r3
 800084a:	e79d      	b.n	8000788 <__aeabi_fdiv+0x30>
 800084c:	3eff      	subs	r6, #255	; 0xff
 800084e:	2d00      	cmp	r5, #0
 8000850:	d120      	bne.n	8000894 <__aeabi_fdiv+0x13c>
 8000852:	2102      	movs	r1, #2
 8000854:	4643      	mov	r3, r8
 8000856:	464a      	mov	r2, r9
 8000858:	407b      	eors	r3, r7
 800085a:	430a      	orrs	r2, r1
 800085c:	2a0f      	cmp	r2, #15
 800085e:	d8d8      	bhi.n	8000812 <__aeabi_fdiv+0xba>
 8000860:	4845      	ldr	r0, [pc, #276]	; (8000978 <__aeabi_fdiv+0x220>)
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	5882      	ldr	r2, [r0, r2]
 8000866:	4697      	mov	pc, r2
 8000868:	2d00      	cmp	r5, #0
 800086a:	d119      	bne.n	80008a0 <__aeabi_fdiv+0x148>
 800086c:	2101      	movs	r1, #1
 800086e:	e7f1      	b.n	8000854 <__aeabi_fdiv+0xfc>
 8000870:	230c      	movs	r3, #12
 8000872:	4699      	mov	r9, r3
 8000874:	3b09      	subs	r3, #9
 8000876:	26ff      	movs	r6, #255	; 0xff
 8000878:	469b      	mov	fp, r3
 800087a:	e785      	b.n	8000788 <__aeabi_fdiv+0x30>
 800087c:	0020      	movs	r0, r4
 800087e:	f000 fc57 	bl	8001130 <__clzsi2>
 8000882:	2676      	movs	r6, #118	; 0x76
 8000884:	1f43      	subs	r3, r0, #5
 8000886:	409c      	lsls	r4, r3
 8000888:	2300      	movs	r3, #0
 800088a:	4276      	negs	r6, r6
 800088c:	1a36      	subs	r6, r6, r0
 800088e:	4699      	mov	r9, r3
 8000890:	469b      	mov	fp, r3
 8000892:	e779      	b.n	8000788 <__aeabi_fdiv+0x30>
 8000894:	464a      	mov	r2, r9
 8000896:	2303      	movs	r3, #3
 8000898:	431a      	orrs	r2, r3
 800089a:	4691      	mov	r9, r2
 800089c:	2103      	movs	r1, #3
 800089e:	e786      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008a0:	0028      	movs	r0, r5
 80008a2:	f000 fc45 	bl	8001130 <__clzsi2>
 80008a6:	1f43      	subs	r3, r0, #5
 80008a8:	1836      	adds	r6, r6, r0
 80008aa:	409d      	lsls	r5, r3
 80008ac:	3676      	adds	r6, #118	; 0x76
 80008ae:	2100      	movs	r1, #0
 80008b0:	e77d      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008b2:	2480      	movs	r4, #128	; 0x80
 80008b4:	2300      	movs	r3, #0
 80008b6:	03e4      	lsls	r4, r4, #15
 80008b8:	22ff      	movs	r2, #255	; 0xff
 80008ba:	e7ac      	b.n	8000816 <__aeabi_fdiv+0xbe>
 80008bc:	2500      	movs	r5, #0
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	03db      	lsls	r3, r3, #15
 80008c2:	421c      	tst	r4, r3
 80008c4:	d028      	beq.n	8000918 <__aeabi_fdiv+0x1c0>
 80008c6:	421d      	tst	r5, r3
 80008c8:	d126      	bne.n	8000918 <__aeabi_fdiv+0x1c0>
 80008ca:	432b      	orrs	r3, r5
 80008cc:	025c      	lsls	r4, r3, #9
 80008ce:	0a64      	lsrs	r4, r4, #9
 80008d0:	4643      	mov	r3, r8
 80008d2:	22ff      	movs	r2, #255	; 0xff
 80008d4:	e79f      	b.n	8000816 <__aeabi_fdiv+0xbe>
 80008d6:	0162      	lsls	r2, r4, #5
 80008d8:	016c      	lsls	r4, r5, #5
 80008da:	42a2      	cmp	r2, r4
 80008dc:	d224      	bcs.n	8000928 <__aeabi_fdiv+0x1d0>
 80008de:	211b      	movs	r1, #27
 80008e0:	2500      	movs	r5, #0
 80008e2:	3e01      	subs	r6, #1
 80008e4:	2701      	movs	r7, #1
 80008e6:	0010      	movs	r0, r2
 80008e8:	006d      	lsls	r5, r5, #1
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	2800      	cmp	r0, #0
 80008ee:	db01      	blt.n	80008f4 <__aeabi_fdiv+0x19c>
 80008f0:	4294      	cmp	r4, r2
 80008f2:	d801      	bhi.n	80008f8 <__aeabi_fdiv+0x1a0>
 80008f4:	1b12      	subs	r2, r2, r4
 80008f6:	433d      	orrs	r5, r7
 80008f8:	3901      	subs	r1, #1
 80008fa:	2900      	cmp	r1, #0
 80008fc:	d1f3      	bne.n	80008e6 <__aeabi_fdiv+0x18e>
 80008fe:	0014      	movs	r4, r2
 8000900:	1e62      	subs	r2, r4, #1
 8000902:	4194      	sbcs	r4, r2
 8000904:	4325      	orrs	r5, r4
 8000906:	e76d      	b.n	80007e4 <__aeabi_fdiv+0x8c>
 8000908:	46ba      	mov	sl, r7
 800090a:	4659      	mov	r1, fp
 800090c:	0025      	movs	r5, r4
 800090e:	4653      	mov	r3, sl
 8000910:	2902      	cmp	r1, #2
 8000912:	d000      	beq.n	8000916 <__aeabi_fdiv+0x1be>
 8000914:	e761      	b.n	80007da <__aeabi_fdiv+0x82>
 8000916:	e77c      	b.n	8000812 <__aeabi_fdiv+0xba>
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	03db      	lsls	r3, r3, #15
 800091c:	431c      	orrs	r4, r3
 800091e:	0264      	lsls	r4, r4, #9
 8000920:	0a64      	lsrs	r4, r4, #9
 8000922:	003b      	movs	r3, r7
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	e776      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000928:	1b12      	subs	r2, r2, r4
 800092a:	211a      	movs	r1, #26
 800092c:	2501      	movs	r5, #1
 800092e:	e7d9      	b.n	80008e4 <__aeabi_fdiv+0x18c>
 8000930:	369e      	adds	r6, #158	; 0x9e
 8000932:	002a      	movs	r2, r5
 8000934:	40b5      	lsls	r5, r6
 8000936:	002c      	movs	r4, r5
 8000938:	40c2      	lsrs	r2, r0
 800093a:	1e65      	subs	r5, r4, #1
 800093c:	41ac      	sbcs	r4, r5
 800093e:	4314      	orrs	r4, r2
 8000940:	0762      	lsls	r2, r4, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x1f6>
 8000944:	220f      	movs	r2, #15
 8000946:	4022      	ands	r2, r4
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x1f6>
 800094c:	3404      	adds	r4, #4
 800094e:	0162      	lsls	r2, r4, #5
 8000950:	d403      	bmi.n	800095a <__aeabi_fdiv+0x202>
 8000952:	01a4      	lsls	r4, r4, #6
 8000954:	0a64      	lsrs	r4, r4, #9
 8000956:	2200      	movs	r2, #0
 8000958:	e75d      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800095a:	2201      	movs	r2, #1
 800095c:	2400      	movs	r4, #0
 800095e:	e75a      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000960:	2480      	movs	r4, #128	; 0x80
 8000962:	03e4      	lsls	r4, r4, #15
 8000964:	432c      	orrs	r4, r5
 8000966:	0264      	lsls	r4, r4, #9
 8000968:	0a64      	lsrs	r4, r4, #9
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	e753      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	080058b0 	.word	0x080058b0
 8000974:	f7ffffff 	.word	0xf7ffffff
 8000978:	080058f0 	.word	0x080058f0

0800097c <__aeabi_fmul>:
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097e:	464e      	mov	r6, r9
 8000980:	4657      	mov	r7, sl
 8000982:	4645      	mov	r5, r8
 8000984:	46de      	mov	lr, fp
 8000986:	b5e0      	push	{r5, r6, r7, lr}
 8000988:	0243      	lsls	r3, r0, #9
 800098a:	0a5b      	lsrs	r3, r3, #9
 800098c:	0045      	lsls	r5, r0, #1
 800098e:	b083      	sub	sp, #12
 8000990:	1c0f      	adds	r7, r1, #0
 8000992:	4699      	mov	r9, r3
 8000994:	0e2d      	lsrs	r5, r5, #24
 8000996:	0fc6      	lsrs	r6, r0, #31
 8000998:	2d00      	cmp	r5, #0
 800099a:	d057      	beq.n	8000a4c <__aeabi_fmul+0xd0>
 800099c:	2dff      	cmp	r5, #255	; 0xff
 800099e:	d024      	beq.n	80009ea <__aeabi_fmul+0x6e>
 80009a0:	2080      	movs	r0, #128	; 0x80
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	04c0      	lsls	r0, r0, #19
 80009a6:	4318      	orrs	r0, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	4681      	mov	r9, r0
 80009ac:	469a      	mov	sl, r3
 80009ae:	469b      	mov	fp, r3
 80009b0:	3d7f      	subs	r5, #127	; 0x7f
 80009b2:	027c      	lsls	r4, r7, #9
 80009b4:	007a      	lsls	r2, r7, #1
 80009b6:	0ffb      	lsrs	r3, r7, #31
 80009b8:	0a64      	lsrs	r4, r4, #9
 80009ba:	0e12      	lsrs	r2, r2, #24
 80009bc:	4698      	mov	r8, r3
 80009be:	d023      	beq.n	8000a08 <__aeabi_fmul+0x8c>
 80009c0:	2aff      	cmp	r2, #255	; 0xff
 80009c2:	d04b      	beq.n	8000a5c <__aeabi_fmul+0xe0>
 80009c4:	00e3      	lsls	r3, r4, #3
 80009c6:	2480      	movs	r4, #128	; 0x80
 80009c8:	2000      	movs	r0, #0
 80009ca:	04e4      	lsls	r4, r4, #19
 80009cc:	3a7f      	subs	r2, #127	; 0x7f
 80009ce:	431c      	orrs	r4, r3
 80009d0:	18ad      	adds	r5, r5, r2
 80009d2:	1c6b      	adds	r3, r5, #1
 80009d4:	4647      	mov	r7, r8
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	4653      	mov	r3, sl
 80009da:	4077      	eors	r7, r6
 80009dc:	003a      	movs	r2, r7
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	d848      	bhi.n	8000a74 <__aeabi_fmul+0xf8>
 80009e2:	497d      	ldr	r1, [pc, #500]	; (8000bd8 <__aeabi_fmul+0x25c>)
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	58cb      	ldr	r3, [r1, r3]
 80009e8:	469f      	mov	pc, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fmul+0x74>
 80009ee:	e085      	b.n	8000afc <__aeabi_fmul+0x180>
 80009f0:	3308      	adds	r3, #8
 80009f2:	469a      	mov	sl, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	469b      	mov	fp, r3
 80009f8:	027c      	lsls	r4, r7, #9
 80009fa:	007a      	lsls	r2, r7, #1
 80009fc:	0ffb      	lsrs	r3, r7, #31
 80009fe:	25ff      	movs	r5, #255	; 0xff
 8000a00:	0a64      	lsrs	r4, r4, #9
 8000a02:	0e12      	lsrs	r2, r2, #24
 8000a04:	4698      	mov	r8, r3
 8000a06:	d1db      	bne.n	80009c0 <__aeabi_fmul+0x44>
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fmul+0x92>
 8000a0c:	e090      	b.n	8000b30 <__aeabi_fmul+0x1b4>
 8000a0e:	4652      	mov	r2, sl
 8000a10:	2301      	movs	r3, #1
 8000a12:	431a      	orrs	r2, r3
 8000a14:	4692      	mov	sl, r2
 8000a16:	2001      	movs	r0, #1
 8000a18:	e7db      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000a1a:	464c      	mov	r4, r9
 8000a1c:	4658      	mov	r0, fp
 8000a1e:	0017      	movs	r7, r2
 8000a20:	2802      	cmp	r0, #2
 8000a22:	d024      	beq.n	8000a6e <__aeabi_fmul+0xf2>
 8000a24:	2803      	cmp	r0, #3
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fmul+0xae>
 8000a28:	e0cf      	b.n	8000bca <__aeabi_fmul+0x24e>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2801      	cmp	r0, #1
 8000a30:	d14d      	bne.n	8000ace <__aeabi_fmul+0x152>
 8000a32:	0258      	lsls	r0, r3, #9
 8000a34:	05d2      	lsls	r2, r2, #23
 8000a36:	0a40      	lsrs	r0, r0, #9
 8000a38:	07ff      	lsls	r7, r7, #31
 8000a3a:	4310      	orrs	r0, r2
 8000a3c:	4338      	orrs	r0, r7
 8000a3e:	b003      	add	sp, #12
 8000a40:	bc3c      	pop	{r2, r3, r4, r5}
 8000a42:	4690      	mov	r8, r2
 8000a44:	4699      	mov	r9, r3
 8000a46:	46a2      	mov	sl, r4
 8000a48:	46ab      	mov	fp, r5
 8000a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d15b      	bne.n	8000b08 <__aeabi_fmul+0x18c>
 8000a50:	2304      	movs	r3, #4
 8000a52:	469a      	mov	sl, r3
 8000a54:	3b03      	subs	r3, #3
 8000a56:	2500      	movs	r5, #0
 8000a58:	469b      	mov	fp, r3
 8000a5a:	e7aa      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000a5c:	35ff      	adds	r5, #255	; 0xff
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d160      	bne.n	8000b24 <__aeabi_fmul+0x1a8>
 8000a62:	4652      	mov	r2, sl
 8000a64:	2302      	movs	r3, #2
 8000a66:	431a      	orrs	r2, r3
 8000a68:	4692      	mov	sl, r2
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	e7b1      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	2300      	movs	r3, #0
 8000a72:	e7de      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000a74:	464b      	mov	r3, r9
 8000a76:	0c1b      	lsrs	r3, r3, #16
 8000a78:	469c      	mov	ip, r3
 8000a7a:	464b      	mov	r3, r9
 8000a7c:	0426      	lsls	r6, r4, #16
 8000a7e:	0c36      	lsrs	r6, r6, #16
 8000a80:	0418      	lsls	r0, r3, #16
 8000a82:	4661      	mov	r1, ip
 8000a84:	0033      	movs	r3, r6
 8000a86:	0c22      	lsrs	r2, r4, #16
 8000a88:	4664      	mov	r4, ip
 8000a8a:	0c00      	lsrs	r0, r0, #16
 8000a8c:	4343      	muls	r3, r0
 8000a8e:	434e      	muls	r6, r1
 8000a90:	4350      	muls	r0, r2
 8000a92:	4354      	muls	r4, r2
 8000a94:	1980      	adds	r0, r0, r6
 8000a96:	0c1a      	lsrs	r2, r3, #16
 8000a98:	1812      	adds	r2, r2, r0
 8000a9a:	4296      	cmp	r6, r2
 8000a9c:	d903      	bls.n	8000aa6 <__aeabi_fmul+0x12a>
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	0249      	lsls	r1, r1, #9
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4464      	add	r4, ip
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	0410      	lsls	r0, r2, #16
 8000aac:	18c0      	adds	r0, r0, r3
 8000aae:	0183      	lsls	r3, r0, #6
 8000ab0:	1e5e      	subs	r6, r3, #1
 8000ab2:	41b3      	sbcs	r3, r6
 8000ab4:	0e80      	lsrs	r0, r0, #26
 8000ab6:	4318      	orrs	r0, r3
 8000ab8:	0c13      	lsrs	r3, r2, #16
 8000aba:	191b      	adds	r3, r3, r4
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	0123      	lsls	r3, r4, #4
 8000ac4:	d579      	bpl.n	8000bba <__aeabi_fmul+0x23e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	0862      	lsrs	r2, r4, #1
 8000aca:	401c      	ands	r4, r3
 8000acc:	4314      	orrs	r4, r2
 8000ace:	9a01      	ldr	r2, [sp, #4]
 8000ad0:	327f      	adds	r2, #127	; 0x7f
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	dd4d      	ble.n	8000b72 <__aeabi_fmul+0x1f6>
 8000ad6:	0763      	lsls	r3, r4, #29
 8000ad8:	d004      	beq.n	8000ae4 <__aeabi_fmul+0x168>
 8000ada:	230f      	movs	r3, #15
 8000adc:	4023      	ands	r3, r4
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fmul+0x168>
 8000ae2:	3404      	adds	r4, #4
 8000ae4:	0123      	lsls	r3, r4, #4
 8000ae6:	d503      	bpl.n	8000af0 <__aeabi_fmul+0x174>
 8000ae8:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <__aeabi_fmul+0x260>)
 8000aea:	9a01      	ldr	r2, [sp, #4]
 8000aec:	401c      	ands	r4, r3
 8000aee:	3280      	adds	r2, #128	; 0x80
 8000af0:	2afe      	cmp	r2, #254	; 0xfe
 8000af2:	dcbc      	bgt.n	8000a6e <__aeabi_fmul+0xf2>
 8000af4:	01a3      	lsls	r3, r4, #6
 8000af6:	0a5b      	lsrs	r3, r3, #9
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	e79a      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000afc:	230c      	movs	r3, #12
 8000afe:	469a      	mov	sl, r3
 8000b00:	3b09      	subs	r3, #9
 8000b02:	25ff      	movs	r5, #255	; 0xff
 8000b04:	469b      	mov	fp, r3
 8000b06:	e754      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fb11 	bl	8001130 <__clzsi2>
 8000b0e:	464a      	mov	r2, r9
 8000b10:	1f43      	subs	r3, r0, #5
 8000b12:	2576      	movs	r5, #118	; 0x76
 8000b14:	409a      	lsls	r2, r3
 8000b16:	2300      	movs	r3, #0
 8000b18:	426d      	negs	r5, r5
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	1a2d      	subs	r5, r5, r0
 8000b1e:	469a      	mov	sl, r3
 8000b20:	469b      	mov	fp, r3
 8000b22:	e746      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000b24:	4652      	mov	r2, sl
 8000b26:	2303      	movs	r3, #3
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4692      	mov	sl, r2
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	e750      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000b30:	0020      	movs	r0, r4
 8000b32:	f000 fafd 	bl	8001130 <__clzsi2>
 8000b36:	1f43      	subs	r3, r0, #5
 8000b38:	1a2d      	subs	r5, r5, r0
 8000b3a:	409c      	lsls	r4, r3
 8000b3c:	3d76      	subs	r5, #118	; 0x76
 8000b3e:	2000      	movs	r0, #0
 8000b40:	e747      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	2700      	movs	r7, #0
 8000b46:	03db      	lsls	r3, r3, #15
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	e772      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000b4c:	4642      	mov	r2, r8
 8000b4e:	e766      	b.n	8000a1e <__aeabi_fmul+0xa2>
 8000b50:	464c      	mov	r4, r9
 8000b52:	0032      	movs	r2, r6
 8000b54:	4658      	mov	r0, fp
 8000b56:	e762      	b.n	8000a1e <__aeabi_fmul+0xa2>
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	03db      	lsls	r3, r3, #15
 8000b5e:	421a      	tst	r2, r3
 8000b60:	d022      	beq.n	8000ba8 <__aeabi_fmul+0x22c>
 8000b62:	421c      	tst	r4, r3
 8000b64:	d120      	bne.n	8000ba8 <__aeabi_fmul+0x22c>
 8000b66:	4323      	orrs	r3, r4
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	4647      	mov	r7, r8
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	e75f      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000b72:	2301      	movs	r3, #1
 8000b74:	1a9a      	subs	r2, r3, r2
 8000b76:	2a1b      	cmp	r2, #27
 8000b78:	dc21      	bgt.n	8000bbe <__aeabi_fmul+0x242>
 8000b7a:	0023      	movs	r3, r4
 8000b7c:	9901      	ldr	r1, [sp, #4]
 8000b7e:	40d3      	lsrs	r3, r2
 8000b80:	319e      	adds	r1, #158	; 0x9e
 8000b82:	408c      	lsls	r4, r1
 8000b84:	001a      	movs	r2, r3
 8000b86:	0023      	movs	r3, r4
 8000b88:	1e5c      	subs	r4, r3, #1
 8000b8a:	41a3      	sbcs	r3, r4
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	075a      	lsls	r2, r3, #29
 8000b90:	d004      	beq.n	8000b9c <__aeabi_fmul+0x220>
 8000b92:	220f      	movs	r2, #15
 8000b94:	401a      	ands	r2, r3
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fmul+0x220>
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	015a      	lsls	r2, r3, #5
 8000b9e:	d411      	bmi.n	8000bc4 <__aeabi_fmul+0x248>
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	0a5b      	lsrs	r3, r3, #9
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e744      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	464a      	mov	r2, r9
 8000bac:	03db      	lsls	r3, r3, #15
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	025b      	lsls	r3, r3, #9
 8000bb2:	0a5b      	lsrs	r3, r3, #9
 8000bb4:	0037      	movs	r7, r6
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	e73b      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bba:	9501      	str	r5, [sp, #4]
 8000bbc:	e787      	b.n	8000ace <__aeabi_fmul+0x152>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e736      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e733      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	03db      	lsls	r3, r3, #15
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	0a5b      	lsrs	r3, r3, #9
 8000bd4:	22ff      	movs	r2, #255	; 0xff
 8000bd6:	e72c      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bd8:	08005930 	.word	0x08005930
 8000bdc:	f7ffffff 	.word	0xf7ffffff

08000be0 <__aeabi_fsub>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	4647      	mov	r7, r8
 8000be4:	46ce      	mov	lr, r9
 8000be6:	0044      	lsls	r4, r0, #1
 8000be8:	0fc2      	lsrs	r2, r0, #31
 8000bea:	b580      	push	{r7, lr}
 8000bec:	0247      	lsls	r7, r0, #9
 8000bee:	0248      	lsls	r0, r1, #9
 8000bf0:	0a40      	lsrs	r0, r0, #9
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	4666      	mov	r6, ip
 8000bf6:	0048      	lsls	r0, r1, #1
 8000bf8:	0a7f      	lsrs	r7, r7, #9
 8000bfa:	0e24      	lsrs	r4, r4, #24
 8000bfc:	00f6      	lsls	r6, r6, #3
 8000bfe:	0025      	movs	r5, r4
 8000c00:	4690      	mov	r8, r2
 8000c02:	00fb      	lsls	r3, r7, #3
 8000c04:	0e00      	lsrs	r0, r0, #24
 8000c06:	0fc9      	lsrs	r1, r1, #31
 8000c08:	46b1      	mov	r9, r6
 8000c0a:	28ff      	cmp	r0, #255	; 0xff
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x30>
 8000c0e:	e085      	b.n	8000d1c <__aeabi_fsub+0x13c>
 8000c10:	2601      	movs	r6, #1
 8000c12:	4071      	eors	r1, r6
 8000c14:	1a26      	subs	r6, r4, r0
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d057      	beq.n	8000cca <__aeabi_fsub+0xea>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	dd43      	ble.n	8000ca6 <__aeabi_fsub+0xc6>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fsub+0x44>
 8000c22:	e07f      	b.n	8000d24 <__aeabi_fsub+0x144>
 8000c24:	4649      	mov	r1, r9
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x4c>
 8000c2a:	e0aa      	b.n	8000d82 <__aeabi_fsub+0x1a2>
 8000c2c:	3e01      	subs	r6, #1
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d000      	beq.n	8000c34 <__aeabi_fsub+0x54>
 8000c32:	e0f7      	b.n	8000e24 <__aeabi_fsub+0x244>
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	015a      	lsls	r2, r3, #5
 8000c38:	d400      	bmi.n	8000c3c <__aeabi_fsub+0x5c>
 8000c3a:	e08b      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	099c      	lsrs	r4, r3, #6
 8000c40:	0020      	movs	r0, r4
 8000c42:	f000 fa75 	bl	8001130 <__clzsi2>
 8000c46:	3805      	subs	r0, #5
 8000c48:	4084      	lsls	r4, r0
 8000c4a:	4285      	cmp	r5, r0
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_fsub+0x70>
 8000c4e:	e0d3      	b.n	8000df8 <__aeabi_fsub+0x218>
 8000c50:	1b45      	subs	r5, r0, r5
 8000c52:	0023      	movs	r3, r4
 8000c54:	2020      	movs	r0, #32
 8000c56:	3501      	adds	r5, #1
 8000c58:	40eb      	lsrs	r3, r5
 8000c5a:	1b45      	subs	r5, r0, r5
 8000c5c:	40ac      	lsls	r4, r5
 8000c5e:	1e62      	subs	r2, r4, #1
 8000c60:	4194      	sbcs	r4, r2
 8000c62:	4323      	orrs	r3, r4
 8000c64:	2407      	movs	r4, #7
 8000c66:	2500      	movs	r5, #0
 8000c68:	401c      	ands	r4, r3
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	400a      	ands	r2, r1
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fsub+0x9e>
 8000c74:	210f      	movs	r1, #15
 8000c76:	4019      	ands	r1, r3
 8000c78:	2904      	cmp	r1, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fsub+0x9e>
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	0159      	lsls	r1, r3, #5
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_fsub+0xa4>
 8000c82:	e080      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000c84:	3501      	adds	r5, #1
 8000c86:	b2ec      	uxtb	r4, r5
 8000c88:	2dff      	cmp	r5, #255	; 0xff
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0xae>
 8000c8c:	e0a3      	b.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000c8e:	24ff      	movs	r4, #255	; 0xff
 8000c90:	2300      	movs	r3, #0
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	05e4      	lsls	r4, r4, #23
 8000c96:	0a58      	lsrs	r0, r3, #9
 8000c98:	07d2      	lsls	r2, r2, #31
 8000c9a:	4320      	orrs	r0, r4
 8000c9c:	4310      	orrs	r0, r2
 8000c9e:	bc0c      	pop	{r2, r3}
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d174      	bne.n	8000d94 <__aeabi_fsub+0x1b4>
 8000caa:	1c60      	adds	r0, r4, #1
 8000cac:	b2c0      	uxtb	r0, r0
 8000cae:	2801      	cmp	r0, #1
 8000cb0:	dc00      	bgt.n	8000cb4 <__aeabi_fsub+0xd4>
 8000cb2:	e0a7      	b.n	8000e04 <__aeabi_fsub+0x224>
 8000cb4:	464a      	mov	r2, r9
 8000cb6:	1a9c      	subs	r4, r3, r2
 8000cb8:	0162      	lsls	r2, r4, #5
 8000cba:	d500      	bpl.n	8000cbe <__aeabi_fsub+0xde>
 8000cbc:	e0b6      	b.n	8000e2c <__aeabi_fsub+0x24c>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d1be      	bne.n	8000c40 <__aeabi_fsub+0x60>
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e7e3      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	dc00      	bgt.n	8000cd0 <__aeabi_fsub+0xf0>
 8000cce:	e085      	b.n	8000ddc <__aeabi_fsub+0x1fc>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d046      	beq.n	8000d62 <__aeabi_fsub+0x182>
 8000cd4:	2cff      	cmp	r4, #255	; 0xff
 8000cd6:	d049      	beq.n	8000d6c <__aeabi_fsub+0x18c>
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	4648      	mov	r0, r9
 8000cdc:	04d2      	lsls	r2, r2, #19
 8000cde:	4310      	orrs	r0, r2
 8000ce0:	4681      	mov	r9, r0
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2e1b      	cmp	r6, #27
 8000ce6:	dc09      	bgt.n	8000cfc <__aeabi_fsub+0x11c>
 8000ce8:	2020      	movs	r0, #32
 8000cea:	464c      	mov	r4, r9
 8000cec:	1b80      	subs	r0, r0, r6
 8000cee:	4084      	lsls	r4, r0
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	40f2      	lsrs	r2, r6
 8000cf6:	1e44      	subs	r4, r0, #1
 8000cf8:	41a0      	sbcs	r0, r4
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	189b      	adds	r3, r3, r2
 8000cfe:	015a      	lsls	r2, r3, #5
 8000d00:	d528      	bpl.n	8000d54 <__aeabi_fsub+0x174>
 8000d02:	3501      	adds	r5, #1
 8000d04:	2dff      	cmp	r5, #255	; 0xff
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fsub+0x12a>
 8000d08:	e0a8      	b.n	8000e5c <__aeabi_fsub+0x27c>
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2407      	movs	r4, #7
 8000d0e:	4994      	ldr	r1, [pc, #592]	; (8000f60 <__aeabi_fsub+0x380>)
 8000d10:	401a      	ands	r2, r3
 8000d12:	085b      	lsrs	r3, r3, #1
 8000d14:	400b      	ands	r3, r1
 8000d16:	4313      	orrs	r3, r2
 8000d18:	401c      	ands	r4, r3
 8000d1a:	e7a6      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_fsub+0x142>
 8000d20:	e778      	b.n	8000c14 <__aeabi_fsub+0x34>
 8000d22:	e775      	b.n	8000c10 <__aeabi_fsub+0x30>
 8000d24:	2cff      	cmp	r4, #255	; 0xff
 8000d26:	d054      	beq.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	04d2      	lsls	r2, r2, #19
 8000d2e:	4311      	orrs	r1, r2
 8000d30:	4689      	mov	r9, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	2e1b      	cmp	r6, #27
 8000d36:	dc09      	bgt.n	8000d4c <__aeabi_fsub+0x16c>
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	1b89      	subs	r1, r1, r6
 8000d3e:	4088      	lsls	r0, r1
 8000d40:	464a      	mov	r2, r9
 8000d42:	0001      	movs	r1, r0
 8000d44:	40f2      	lsrs	r2, r6
 8000d46:	1e48      	subs	r0, r1, #1
 8000d48:	4181      	sbcs	r1, r0
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	015a      	lsls	r2, r3, #5
 8000d50:	d500      	bpl.n	8000d54 <__aeabi_fsub+0x174>
 8000d52:	e773      	b.n	8000c3c <__aeabi_fsub+0x5c>
 8000d54:	2201      	movs	r2, #1
 8000d56:	4641      	mov	r1, r8
 8000d58:	400a      	ands	r2, r1
 8000d5a:	0759      	lsls	r1, r3, #29
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x180>
 8000d5e:	e789      	b.n	8000c74 <__aeabi_fsub+0x94>
 8000d60:	e011      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000d62:	4648      	mov	r0, r9
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d158      	bne.n	8000e1a <__aeabi_fsub+0x23a>
 8000d68:	2cff      	cmp	r4, #255	; 0xff
 8000d6a:	d10c      	bne.n	8000d86 <__aeabi_fsub+0x1a6>
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x194>
 8000d72:	e78c      	b.n	8000c8e <__aeabi_fsub+0xae>
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	03c0      	lsls	r0, r0, #15
 8000d78:	4303      	orrs	r3, r0
 8000d7a:	025b      	lsls	r3, r3, #9
 8000d7c:	0a5b      	lsrs	r3, r3, #9
 8000d7e:	24ff      	movs	r4, #255	; 0xff
 8000d80:	e787      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000d82:	2cff      	cmp	r4, #255	; 0xff
 8000d84:	d025      	beq.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	2dff      	cmp	r5, #255	; 0xff
 8000d8a:	d0f0      	beq.n	8000d6e <__aeabi_fsub+0x18e>
 8000d8c:	025b      	lsls	r3, r3, #9
 8000d8e:	0a5b      	lsrs	r3, r3, #9
 8000d90:	b2ec      	uxtb	r4, r5
 8000d92:	e77e      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	d04d      	beq.n	8000e34 <__aeabi_fsub+0x254>
 8000d98:	28ff      	cmp	r0, #255	; 0xff
 8000d9a:	d018      	beq.n	8000dce <__aeabi_fsub+0x1ee>
 8000d9c:	2480      	movs	r4, #128	; 0x80
 8000d9e:	04e4      	lsls	r4, r4, #19
 8000da0:	4272      	negs	r2, r6
 8000da2:	4323      	orrs	r3, r4
 8000da4:	2a1b      	cmp	r2, #27
 8000da6:	dd00      	ble.n	8000daa <__aeabi_fsub+0x1ca>
 8000da8:	e0c4      	b.n	8000f34 <__aeabi_fsub+0x354>
 8000daa:	001c      	movs	r4, r3
 8000dac:	2520      	movs	r5, #32
 8000dae:	40d4      	lsrs	r4, r2
 8000db0:	1aaa      	subs	r2, r5, r2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	1e5a      	subs	r2, r3, #1
 8000db6:	4193      	sbcs	r3, r2
 8000db8:	4323      	orrs	r3, r4
 8000dba:	464a      	mov	r2, r9
 8000dbc:	0005      	movs	r5, r0
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	e738      	b.n	8000c36 <__aeabi_fsub+0x56>
 8000dc4:	1c72      	adds	r2, r6, #1
 8000dc6:	d0f8      	beq.n	8000dba <__aeabi_fsub+0x1da>
 8000dc8:	43f2      	mvns	r2, r6
 8000dca:	28ff      	cmp	r0, #255	; 0xff
 8000dcc:	d1ea      	bne.n	8000da4 <__aeabi_fsub+0x1c4>
 8000dce:	000a      	movs	r2, r1
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	25ff      	movs	r5, #255	; 0xff
 8000dd4:	e7d7      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000dd6:	019b      	lsls	r3, r3, #6
 8000dd8:	0a5b      	lsrs	r3, r3, #9
 8000dda:	e75a      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d141      	bne.n	8000e64 <__aeabi_fsub+0x284>
 8000de0:	1c65      	adds	r5, r4, #1
 8000de2:	b2e9      	uxtb	r1, r5
 8000de4:	2901      	cmp	r1, #1
 8000de6:	dd45      	ble.n	8000e74 <__aeabi_fsub+0x294>
 8000de8:	2dff      	cmp	r5, #255	; 0xff
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x20e>
 8000dec:	e74f      	b.n	8000c8e <__aeabi_fsub+0xae>
 8000dee:	2407      	movs	r4, #7
 8000df0:	444b      	add	r3, r9
 8000df2:	085b      	lsrs	r3, r3, #1
 8000df4:	401c      	ands	r4, r3
 8000df6:	e738      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000df8:	2207      	movs	r2, #7
 8000dfa:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <__aeabi_fsub+0x384>)
 8000dfc:	1a2d      	subs	r5, r5, r0
 8000dfe:	4023      	ands	r3, r4
 8000e00:	4014      	ands	r4, r2
 8000e02:	e732      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d11d      	bne.n	8000e44 <__aeabi_fsub+0x264>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d17a      	bne.n	8000f02 <__aeabi_fsub+0x322>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d100      	bne.n	8000e14 <__aeabi_fsub+0x234>
 8000e12:	e091      	b.n	8000f38 <__aeabi_fsub+0x358>
 8000e14:	000a      	movs	r2, r1
 8000e16:	2500      	movs	r5, #0
 8000e18:	e7b5      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e1a:	3e01      	subs	r6, #1
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d119      	bne.n	8000e54 <__aeabi_fsub+0x274>
 8000e20:	444b      	add	r3, r9
 8000e22:	e76c      	b.n	8000cfe <__aeabi_fsub+0x11e>
 8000e24:	2cff      	cmp	r4, #255	; 0xff
 8000e26:	d184      	bne.n	8000d32 <__aeabi_fsub+0x152>
 8000e28:	25ff      	movs	r5, #255	; 0xff
 8000e2a:	e7ac      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e2c:	464a      	mov	r2, r9
 8000e2e:	4688      	mov	r8, r1
 8000e30:	1ad4      	subs	r4, r2, r3
 8000e32:	e705      	b.n	8000c40 <__aeabi_fsub+0x60>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1c5      	bne.n	8000dc4 <__aeabi_fsub+0x1e4>
 8000e38:	000a      	movs	r2, r1
 8000e3a:	28ff      	cmp	r0, #255	; 0xff
 8000e3c:	d0c8      	beq.n	8000dd0 <__aeabi_fsub+0x1f0>
 8000e3e:	0005      	movs	r5, r0
 8000e40:	464b      	mov	r3, r9
 8000e42:	e7a0      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d149      	bne.n	8000edc <__aeabi_fsub+0x2fc>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d077      	beq.n	8000f3e <__aeabi_fsub+0x35e>
 8000e4e:	000a      	movs	r2, r1
 8000e50:	25ff      	movs	r5, #255	; 0xff
 8000e52:	e798      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e54:	2cff      	cmp	r4, #255	; 0xff
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x27a>
 8000e58:	e743      	b.n	8000ce2 <__aeabi_fsub+0x102>
 8000e5a:	e787      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	24ff      	movs	r4, #255	; 0xff
 8000e60:	2300      	movs	r3, #0
 8000e62:	e716      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d115      	bne.n	8000e94 <__aeabi_fsub+0x2b4>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d157      	bne.n	8000f1c <__aeabi_fsub+0x33c>
 8000e6c:	28ff      	cmp	r0, #255	; 0xff
 8000e6e:	d1e6      	bne.n	8000e3e <__aeabi_fsub+0x25e>
 8000e70:	464b      	mov	r3, r9
 8000e72:	e77b      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000e74:	2c00      	cmp	r4, #0
 8000e76:	d120      	bne.n	8000eba <__aeabi_fsub+0x2da>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d057      	beq.n	8000f2c <__aeabi_fsub+0x34c>
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d053      	beq.n	8000f2a <__aeabi_fsub+0x34a>
 8000e82:	444b      	add	r3, r9
 8000e84:	015a      	lsls	r2, r3, #5
 8000e86:	d568      	bpl.n	8000f5a <__aeabi_fsub+0x37a>
 8000e88:	2407      	movs	r4, #7
 8000e8a:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <__aeabi_fsub+0x384>)
 8000e8c:	401c      	ands	r4, r3
 8000e8e:	2501      	movs	r5, #1
 8000e90:	4013      	ands	r3, r2
 8000e92:	e6ea      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000e94:	28ff      	cmp	r0, #255	; 0xff
 8000e96:	d0eb      	beq.n	8000e70 <__aeabi_fsub+0x290>
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	04d2      	lsls	r2, r2, #19
 8000e9c:	4276      	negs	r6, r6
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	2e1b      	cmp	r6, #27
 8000ea2:	dc53      	bgt.n	8000f4c <__aeabi_fsub+0x36c>
 8000ea4:	2520      	movs	r5, #32
 8000ea6:	1bad      	subs	r5, r5, r6
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	40ab      	lsls	r3, r5
 8000eac:	40f2      	lsrs	r2, r6
 8000eae:	1e5c      	subs	r4, r3, #1
 8000eb0:	41a3      	sbcs	r3, r4
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	444b      	add	r3, r9
 8000eb6:	0005      	movs	r5, r0
 8000eb8:	e721      	b.n	8000cfe <__aeabi_fsub+0x11e>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0d8      	beq.n	8000e70 <__aeabi_fsub+0x290>
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x2e6>
 8000ec4:	e752      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	03c9      	lsls	r1, r1, #15
 8000eca:	420f      	tst	r7, r1
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x2f0>
 8000ece:	e74d      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	4208      	tst	r0, r1
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fsub+0x2f8>
 8000ed6:	e749      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ed8:	464b      	mov	r3, r9
 8000eda:	e747      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000edc:	4648      	mov	r0, r9
 8000ede:	25ff      	movs	r5, #255	; 0xff
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x306>
 8000ee4:	e74f      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	03d2      	lsls	r2, r2, #15
 8000eea:	4217      	tst	r7, r2
 8000eec:	d004      	beq.n	8000ef8 <__aeabi_fsub+0x318>
 8000eee:	4660      	mov	r0, ip
 8000ef0:	4210      	tst	r0, r2
 8000ef2:	d101      	bne.n	8000ef8 <__aeabi_fsub+0x318>
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4641      	mov	r1, r8
 8000efc:	25ff      	movs	r5, #255	; 0xff
 8000efe:	400a      	ands	r2, r1
 8000f00:	e741      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000f02:	4648      	mov	r0, r9
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d01f      	beq.n	8000f48 <__aeabi_fsub+0x368>
 8000f08:	1a1a      	subs	r2, r3, r0
 8000f0a:	0150      	lsls	r0, r2, #5
 8000f0c:	d520      	bpl.n	8000f50 <__aeabi_fsub+0x370>
 8000f0e:	464a      	mov	r2, r9
 8000f10:	2407      	movs	r4, #7
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	401c      	ands	r4, r3
 8000f16:	4688      	mov	r8, r1
 8000f18:	2500      	movs	r5, #0
 8000f1a:	e6a6      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000f1c:	1c74      	adds	r4, r6, #1
 8000f1e:	d0c9      	beq.n	8000eb4 <__aeabi_fsub+0x2d4>
 8000f20:	43f6      	mvns	r6, r6
 8000f22:	28ff      	cmp	r0, #255	; 0xff
 8000f24:	d1bc      	bne.n	8000ea0 <__aeabi_fsub+0x2c0>
 8000f26:	464b      	mov	r3, r9
 8000f28:	e720      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	464b      	mov	r3, r9
 8000f2e:	2500      	movs	r5, #0
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	e72b      	b.n	8000d8c <__aeabi_fsub+0x1ac>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e740      	b.n	8000dba <__aeabi_fsub+0x1da>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e6a9      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	2200      	movs	r2, #0
 8000f42:	03db      	lsls	r3, r3, #15
 8000f44:	24ff      	movs	r4, #255	; 0xff
 8000f46:	e6a4      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e71c      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e7b1      	b.n	8000eb4 <__aeabi_fsub+0x2d4>
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d0f1      	beq.n	8000f38 <__aeabi_fsub+0x358>
 8000f54:	0013      	movs	r3, r2
 8000f56:	2500      	movs	r5, #0
 8000f58:	e6fc      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	e6fa      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	7dffffff 	.word	0x7dffffff
 8000f64:	fbffffff 	.word	0xfbffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	0e12      	lsrs	r2, r2, #24
 8000f72:	2000      	movs	r0, #0
 8000f74:	2a7e      	cmp	r2, #126	; 0x7e
 8000f76:	d90d      	bls.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f78:	2a9d      	cmp	r2, #157	; 0x9d
 8000f7a:	d80c      	bhi.n	8000f96 <__aeabi_f2iz+0x2e>
 8000f7c:	2080      	movs	r0, #128	; 0x80
 8000f7e:	0400      	lsls	r0, r0, #16
 8000f80:	4301      	orrs	r1, r0
 8000f82:	2a95      	cmp	r2, #149	; 0x95
 8000f84:	dc0a      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f86:	2096      	movs	r0, #150	; 0x96
 8000f88:	1a82      	subs	r2, r0, r2
 8000f8a:	40d1      	lsrs	r1, r2
 8000f8c:	4248      	negs	r0, r1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f92:	0008      	movs	r0, r1
 8000f94:	4770      	bx	lr
 8000f96:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f98:	1898      	adds	r0, r3, r2
 8000f9a:	e7fb      	b.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f9c:	3a96      	subs	r2, #150	; 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f4      	b.n	8000f8c <__aeabi_f2iz+0x24>
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_i2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d03d      	beq.n	800102a <__aeabi_i2f+0x82>
 8000fae:	17c3      	asrs	r3, r0, #31
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	405d      	eors	r5, r3
 8000fb4:	0fc4      	lsrs	r4, r0, #31
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f000 f8ba 	bl	8001130 <__clzsi2>
 8000fbc:	229e      	movs	r2, #158	; 0x9e
 8000fbe:	1a12      	subs	r2, r2, r0
 8000fc0:	2a96      	cmp	r2, #150	; 0x96
 8000fc2:	dc07      	bgt.n	8000fd4 <__aeabi_i2f+0x2c>
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	2808      	cmp	r0, #8
 8000fc8:	dd33      	ble.n	8001032 <__aeabi_i2f+0x8a>
 8000fca:	3808      	subs	r0, #8
 8000fcc:	4085      	lsls	r5, r0
 8000fce:	0268      	lsls	r0, r5, #9
 8000fd0:	0a40      	lsrs	r0, r0, #9
 8000fd2:	e023      	b.n	800101c <__aeabi_i2f+0x74>
 8000fd4:	2a99      	cmp	r2, #153	; 0x99
 8000fd6:	dd0b      	ble.n	8000ff0 <__aeabi_i2f+0x48>
 8000fd8:	2305      	movs	r3, #5
 8000fda:	0029      	movs	r1, r5
 8000fdc:	1a1b      	subs	r3, r3, r0
 8000fde:	40d9      	lsrs	r1, r3
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	331b      	adds	r3, #27
 8000fe4:	409d      	lsls	r5, r3
 8000fe6:	002b      	movs	r3, r5
 8000fe8:	1e5d      	subs	r5, r3, #1
 8000fea:	41ab      	sbcs	r3, r5
 8000fec:	4319      	orrs	r1, r3
 8000fee:	000d      	movs	r5, r1
 8000ff0:	2805      	cmp	r0, #5
 8000ff2:	dd01      	ble.n	8000ff8 <__aeabi_i2f+0x50>
 8000ff4:	1f43      	subs	r3, r0, #5
 8000ff6:	409d      	lsls	r5, r3
 8000ff8:	002b      	movs	r3, r5
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <__aeabi_i2f+0x90>)
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	076e      	lsls	r6, r5, #29
 8001000:	d009      	beq.n	8001016 <__aeabi_i2f+0x6e>
 8001002:	260f      	movs	r6, #15
 8001004:	4035      	ands	r5, r6
 8001006:	2d04      	cmp	r5, #4
 8001008:	d005      	beq.n	8001016 <__aeabi_i2f+0x6e>
 800100a:	3304      	adds	r3, #4
 800100c:	015d      	lsls	r5, r3, #5
 800100e:	d502      	bpl.n	8001016 <__aeabi_i2f+0x6e>
 8001010:	229f      	movs	r2, #159	; 0x9f
 8001012:	400b      	ands	r3, r1
 8001014:	1a12      	subs	r2, r2, r0
 8001016:	019b      	lsls	r3, r3, #6
 8001018:	0a58      	lsrs	r0, r3, #9
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	0240      	lsls	r0, r0, #9
 800101e:	05d2      	lsls	r2, r2, #23
 8001020:	0a40      	lsrs	r0, r0, #9
 8001022:	07e4      	lsls	r4, r4, #31
 8001024:	4310      	orrs	r0, r2
 8001026:	4320      	orrs	r0, r4
 8001028:	bd70      	pop	{r4, r5, r6, pc}
 800102a:	2400      	movs	r4, #0
 800102c:	2200      	movs	r2, #0
 800102e:	2000      	movs	r0, #0
 8001030:	e7f4      	b.n	800101c <__aeabi_i2f+0x74>
 8001032:	0268      	lsls	r0, r5, #9
 8001034:	0a40      	lsrs	r0, r0, #9
 8001036:	e7f1      	b.n	800101c <__aeabi_i2f+0x74>
 8001038:	fbffffff 	.word	0xfbffffff

0800103c <__aeabi_ui2f>:
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	1e04      	subs	r4, r0, #0
 8001040:	d034      	beq.n	80010ac <__aeabi_ui2f+0x70>
 8001042:	f000 f875 	bl	8001130 <__clzsi2>
 8001046:	229e      	movs	r2, #158	; 0x9e
 8001048:	1a12      	subs	r2, r2, r0
 800104a:	2a96      	cmp	r2, #150	; 0x96
 800104c:	dc07      	bgt.n	800105e <__aeabi_ui2f+0x22>
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	2808      	cmp	r0, #8
 8001052:	dd2e      	ble.n	80010b2 <__aeabi_ui2f+0x76>
 8001054:	3808      	subs	r0, #8
 8001056:	4084      	lsls	r4, r0
 8001058:	0260      	lsls	r0, r4, #9
 800105a:	0a40      	lsrs	r0, r0, #9
 800105c:	e021      	b.n	80010a2 <__aeabi_ui2f+0x66>
 800105e:	2a99      	cmp	r2, #153	; 0x99
 8001060:	dd09      	ble.n	8001076 <__aeabi_ui2f+0x3a>
 8001062:	0003      	movs	r3, r0
 8001064:	0021      	movs	r1, r4
 8001066:	331b      	adds	r3, #27
 8001068:	4099      	lsls	r1, r3
 800106a:	1e4b      	subs	r3, r1, #1
 800106c:	4199      	sbcs	r1, r3
 800106e:	2305      	movs	r3, #5
 8001070:	1a1b      	subs	r3, r3, r0
 8001072:	40dc      	lsrs	r4, r3
 8001074:	430c      	orrs	r4, r1
 8001076:	2805      	cmp	r0, #5
 8001078:	dd01      	ble.n	800107e <__aeabi_ui2f+0x42>
 800107a:	1f43      	subs	r3, r0, #5
 800107c:	409c      	lsls	r4, r3
 800107e:	0023      	movs	r3, r4
 8001080:	490d      	ldr	r1, [pc, #52]	; (80010b8 <__aeabi_ui2f+0x7c>)
 8001082:	400b      	ands	r3, r1
 8001084:	0765      	lsls	r5, r4, #29
 8001086:	d009      	beq.n	800109c <__aeabi_ui2f+0x60>
 8001088:	250f      	movs	r5, #15
 800108a:	402c      	ands	r4, r5
 800108c:	2c04      	cmp	r4, #4
 800108e:	d005      	beq.n	800109c <__aeabi_ui2f+0x60>
 8001090:	3304      	adds	r3, #4
 8001092:	015c      	lsls	r4, r3, #5
 8001094:	d502      	bpl.n	800109c <__aeabi_ui2f+0x60>
 8001096:	229f      	movs	r2, #159	; 0x9f
 8001098:	400b      	ands	r3, r1
 800109a:	1a12      	subs	r2, r2, r0
 800109c:	019b      	lsls	r3, r3, #6
 800109e:	0a58      	lsrs	r0, r3, #9
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	0240      	lsls	r0, r0, #9
 80010a4:	05d2      	lsls	r2, r2, #23
 80010a6:	0a40      	lsrs	r0, r0, #9
 80010a8:	4310      	orrs	r0, r2
 80010aa:	bd70      	pop	{r4, r5, r6, pc}
 80010ac:	2200      	movs	r2, #0
 80010ae:	2000      	movs	r0, #0
 80010b0:	e7f7      	b.n	80010a2 <__aeabi_ui2f+0x66>
 80010b2:	0260      	lsls	r0, r4, #9
 80010b4:	0a40      	lsrs	r0, r0, #9
 80010b6:	e7f4      	b.n	80010a2 <__aeabi_ui2f+0x66>
 80010b8:	fbffffff 	.word	0xfbffffff

080010bc <__aeabi_cfrcmple>:
 80010bc:	4684      	mov	ip, r0
 80010be:	1c08      	adds	r0, r1, #0
 80010c0:	4661      	mov	r1, ip
 80010c2:	e7ff      	b.n	80010c4 <__aeabi_cfcmpeq>

080010c4 <__aeabi_cfcmpeq>:
 80010c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80010c6:	f000 f8c7 	bl	8001258 <__lesf2>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d401      	bmi.n	80010d2 <__aeabi_cfcmpeq+0xe>
 80010ce:	2100      	movs	r1, #0
 80010d0:	42c8      	cmn	r0, r1
 80010d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080010d4 <__aeabi_fcmpeq>:
 80010d4:	b510      	push	{r4, lr}
 80010d6:	f000 f849 	bl	800116c <__eqsf2>
 80010da:	4240      	negs	r0, r0
 80010dc:	3001      	adds	r0, #1
 80010de:	bd10      	pop	{r4, pc}

080010e0 <__aeabi_fcmplt>:
 80010e0:	b510      	push	{r4, lr}
 80010e2:	f000 f8b9 	bl	8001258 <__lesf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	db01      	blt.n	80010ee <__aeabi_fcmplt+0xe>
 80010ea:	2000      	movs	r0, #0
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	2001      	movs	r0, #1
 80010f0:	bd10      	pop	{r4, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)

080010f4 <__aeabi_fcmple>:
 80010f4:	b510      	push	{r4, lr}
 80010f6:	f000 f8af 	bl	8001258 <__lesf2>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	dd01      	ble.n	8001102 <__aeabi_fcmple+0xe>
 80010fe:	2000      	movs	r0, #0
 8001100:	bd10      	pop	{r4, pc}
 8001102:	2001      	movs	r0, #1
 8001104:	bd10      	pop	{r4, pc}
 8001106:	46c0      	nop			; (mov r8, r8)

08001108 <__aeabi_fcmpgt>:
 8001108:	b510      	push	{r4, lr}
 800110a:	f000 f857 	bl	80011bc <__gesf2>
 800110e:	2800      	cmp	r0, #0
 8001110:	dc01      	bgt.n	8001116 <__aeabi_fcmpgt+0xe>
 8001112:	2000      	movs	r0, #0
 8001114:	bd10      	pop	{r4, pc}
 8001116:	2001      	movs	r0, #1
 8001118:	bd10      	pop	{r4, pc}
 800111a:	46c0      	nop			; (mov r8, r8)

0800111c <__aeabi_fcmpge>:
 800111c:	b510      	push	{r4, lr}
 800111e:	f000 f84d 	bl	80011bc <__gesf2>
 8001122:	2800      	cmp	r0, #0
 8001124:	da01      	bge.n	800112a <__aeabi_fcmpge+0xe>
 8001126:	2000      	movs	r0, #0
 8001128:	bd10      	pop	{r4, pc}
 800112a:	2001      	movs	r0, #1
 800112c:	bd10      	pop	{r4, pc}
 800112e:	46c0      	nop			; (mov r8, r8)

08001130 <__clzsi2>:
 8001130:	211c      	movs	r1, #28
 8001132:	2301      	movs	r3, #1
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	4298      	cmp	r0, r3
 8001138:	d301      	bcc.n	800113e <__clzsi2+0xe>
 800113a:	0c00      	lsrs	r0, r0, #16
 800113c:	3910      	subs	r1, #16
 800113e:	0a1b      	lsrs	r3, r3, #8
 8001140:	4298      	cmp	r0, r3
 8001142:	d301      	bcc.n	8001148 <__clzsi2+0x18>
 8001144:	0a00      	lsrs	r0, r0, #8
 8001146:	3908      	subs	r1, #8
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	4298      	cmp	r0, r3
 800114c:	d301      	bcc.n	8001152 <__clzsi2+0x22>
 800114e:	0900      	lsrs	r0, r0, #4
 8001150:	3904      	subs	r1, #4
 8001152:	a202      	add	r2, pc, #8	; (adr r2, 800115c <__clzsi2+0x2c>)
 8001154:	5c10      	ldrb	r0, [r2, r0]
 8001156:	1840      	adds	r0, r0, r1
 8001158:	4770      	bx	lr
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	02020304 	.word	0x02020304
 8001160:	01010101 	.word	0x01010101
	...

0800116c <__eqsf2>:
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	0042      	lsls	r2, r0, #1
 8001170:	024e      	lsls	r6, r1, #9
 8001172:	004c      	lsls	r4, r1, #1
 8001174:	0245      	lsls	r5, r0, #9
 8001176:	0a6d      	lsrs	r5, r5, #9
 8001178:	0e12      	lsrs	r2, r2, #24
 800117a:	0fc3      	lsrs	r3, r0, #31
 800117c:	0a76      	lsrs	r6, r6, #9
 800117e:	0e24      	lsrs	r4, r4, #24
 8001180:	0fc9      	lsrs	r1, r1, #31
 8001182:	2aff      	cmp	r2, #255	; 0xff
 8001184:	d00f      	beq.n	80011a6 <__eqsf2+0x3a>
 8001186:	2cff      	cmp	r4, #255	; 0xff
 8001188:	d011      	beq.n	80011ae <__eqsf2+0x42>
 800118a:	2001      	movs	r0, #1
 800118c:	42a2      	cmp	r2, r4
 800118e:	d000      	beq.n	8001192 <__eqsf2+0x26>
 8001190:	bd70      	pop	{r4, r5, r6, pc}
 8001192:	42b5      	cmp	r5, r6
 8001194:	d1fc      	bne.n	8001190 <__eqsf2+0x24>
 8001196:	428b      	cmp	r3, r1
 8001198:	d00d      	beq.n	80011b6 <__eqsf2+0x4a>
 800119a:	2a00      	cmp	r2, #0
 800119c:	d1f8      	bne.n	8001190 <__eqsf2+0x24>
 800119e:	0028      	movs	r0, r5
 80011a0:	1e45      	subs	r5, r0, #1
 80011a2:	41a8      	sbcs	r0, r5
 80011a4:	e7f4      	b.n	8001190 <__eqsf2+0x24>
 80011a6:	2001      	movs	r0, #1
 80011a8:	2d00      	cmp	r5, #0
 80011aa:	d1f1      	bne.n	8001190 <__eqsf2+0x24>
 80011ac:	e7eb      	b.n	8001186 <__eqsf2+0x1a>
 80011ae:	2001      	movs	r0, #1
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d1ed      	bne.n	8001190 <__eqsf2+0x24>
 80011b4:	e7e9      	b.n	800118a <__eqsf2+0x1e>
 80011b6:	2000      	movs	r0, #0
 80011b8:	e7ea      	b.n	8001190 <__eqsf2+0x24>
 80011ba:	46c0      	nop			; (mov r8, r8)

080011bc <__gesf2>:
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	004a      	lsls	r2, r1, #1
 80011c0:	024e      	lsls	r6, r1, #9
 80011c2:	0245      	lsls	r5, r0, #9
 80011c4:	0044      	lsls	r4, r0, #1
 80011c6:	0a6d      	lsrs	r5, r5, #9
 80011c8:	0e24      	lsrs	r4, r4, #24
 80011ca:	0fc3      	lsrs	r3, r0, #31
 80011cc:	0a76      	lsrs	r6, r6, #9
 80011ce:	0e12      	lsrs	r2, r2, #24
 80011d0:	0fc9      	lsrs	r1, r1, #31
 80011d2:	2cff      	cmp	r4, #255	; 0xff
 80011d4:	d015      	beq.n	8001202 <__gesf2+0x46>
 80011d6:	2aff      	cmp	r2, #255	; 0xff
 80011d8:	d00e      	beq.n	80011f8 <__gesf2+0x3c>
 80011da:	2c00      	cmp	r4, #0
 80011dc:	d115      	bne.n	800120a <__gesf2+0x4e>
 80011de:	2a00      	cmp	r2, #0
 80011e0:	d101      	bne.n	80011e6 <__gesf2+0x2a>
 80011e2:	2e00      	cmp	r6, #0
 80011e4:	d01c      	beq.n	8001220 <__gesf2+0x64>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d014      	beq.n	8001214 <__gesf2+0x58>
 80011ea:	428b      	cmp	r3, r1
 80011ec:	d027      	beq.n	800123e <__gesf2+0x82>
 80011ee:	2002      	movs	r0, #2
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4018      	ands	r0, r3
 80011f4:	3801      	subs	r0, #1
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	2e00      	cmp	r6, #0
 80011fa:	d0ee      	beq.n	80011da <__gesf2+0x1e>
 80011fc:	2002      	movs	r0, #2
 80011fe:	4240      	negs	r0, r0
 8001200:	e7f9      	b.n	80011f6 <__gesf2+0x3a>
 8001202:	2d00      	cmp	r5, #0
 8001204:	d1fa      	bne.n	80011fc <__gesf2+0x40>
 8001206:	2aff      	cmp	r2, #255	; 0xff
 8001208:	d00e      	beq.n	8001228 <__gesf2+0x6c>
 800120a:	2a00      	cmp	r2, #0
 800120c:	d10e      	bne.n	800122c <__gesf2+0x70>
 800120e:	2e00      	cmp	r6, #0
 8001210:	d0ed      	beq.n	80011ee <__gesf2+0x32>
 8001212:	e00b      	b.n	800122c <__gesf2+0x70>
 8001214:	2301      	movs	r3, #1
 8001216:	3901      	subs	r1, #1
 8001218:	4399      	bics	r1, r3
 800121a:	0008      	movs	r0, r1
 800121c:	3001      	adds	r0, #1
 800121e:	e7ea      	b.n	80011f6 <__gesf2+0x3a>
 8001220:	2000      	movs	r0, #0
 8001222:	2d00      	cmp	r5, #0
 8001224:	d0e7      	beq.n	80011f6 <__gesf2+0x3a>
 8001226:	e7e2      	b.n	80011ee <__gesf2+0x32>
 8001228:	2e00      	cmp	r6, #0
 800122a:	d1e7      	bne.n	80011fc <__gesf2+0x40>
 800122c:	428b      	cmp	r3, r1
 800122e:	d1de      	bne.n	80011ee <__gesf2+0x32>
 8001230:	4294      	cmp	r4, r2
 8001232:	dd05      	ble.n	8001240 <__gesf2+0x84>
 8001234:	2102      	movs	r1, #2
 8001236:	1e58      	subs	r0, r3, #1
 8001238:	4008      	ands	r0, r1
 800123a:	3801      	subs	r0, #1
 800123c:	e7db      	b.n	80011f6 <__gesf2+0x3a>
 800123e:	2400      	movs	r4, #0
 8001240:	42a2      	cmp	r2, r4
 8001242:	dc04      	bgt.n	800124e <__gesf2+0x92>
 8001244:	42b5      	cmp	r5, r6
 8001246:	d8d2      	bhi.n	80011ee <__gesf2+0x32>
 8001248:	2000      	movs	r0, #0
 800124a:	42b5      	cmp	r5, r6
 800124c:	d2d3      	bcs.n	80011f6 <__gesf2+0x3a>
 800124e:	1e58      	subs	r0, r3, #1
 8001250:	2301      	movs	r3, #1
 8001252:	4398      	bics	r0, r3
 8001254:	3001      	adds	r0, #1
 8001256:	e7ce      	b.n	80011f6 <__gesf2+0x3a>

08001258 <__lesf2>:
 8001258:	b530      	push	{r4, r5, lr}
 800125a:	0042      	lsls	r2, r0, #1
 800125c:	0244      	lsls	r4, r0, #9
 800125e:	024d      	lsls	r5, r1, #9
 8001260:	0fc3      	lsrs	r3, r0, #31
 8001262:	0048      	lsls	r0, r1, #1
 8001264:	0a64      	lsrs	r4, r4, #9
 8001266:	0e12      	lsrs	r2, r2, #24
 8001268:	0a6d      	lsrs	r5, r5, #9
 800126a:	0e00      	lsrs	r0, r0, #24
 800126c:	0fc9      	lsrs	r1, r1, #31
 800126e:	2aff      	cmp	r2, #255	; 0xff
 8001270:	d012      	beq.n	8001298 <__lesf2+0x40>
 8001272:	28ff      	cmp	r0, #255	; 0xff
 8001274:	d00c      	beq.n	8001290 <__lesf2+0x38>
 8001276:	2a00      	cmp	r2, #0
 8001278:	d112      	bne.n	80012a0 <__lesf2+0x48>
 800127a:	2800      	cmp	r0, #0
 800127c:	d119      	bne.n	80012b2 <__lesf2+0x5a>
 800127e:	2d00      	cmp	r5, #0
 8001280:	d117      	bne.n	80012b2 <__lesf2+0x5a>
 8001282:	2c00      	cmp	r4, #0
 8001284:	d02b      	beq.n	80012de <__lesf2+0x86>
 8001286:	2002      	movs	r0, #2
 8001288:	3b01      	subs	r3, #1
 800128a:	4018      	ands	r0, r3
 800128c:	3801      	subs	r0, #1
 800128e:	e026      	b.n	80012de <__lesf2+0x86>
 8001290:	2d00      	cmp	r5, #0
 8001292:	d0f0      	beq.n	8001276 <__lesf2+0x1e>
 8001294:	2002      	movs	r0, #2
 8001296:	e022      	b.n	80012de <__lesf2+0x86>
 8001298:	2c00      	cmp	r4, #0
 800129a:	d1fb      	bne.n	8001294 <__lesf2+0x3c>
 800129c:	28ff      	cmp	r0, #255	; 0xff
 800129e:	d01f      	beq.n	80012e0 <__lesf2+0x88>
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d11f      	bne.n	80012e4 <__lesf2+0x8c>
 80012a4:	2d00      	cmp	r5, #0
 80012a6:	d11d      	bne.n	80012e4 <__lesf2+0x8c>
 80012a8:	2002      	movs	r0, #2
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4018      	ands	r0, r3
 80012ae:	3801      	subs	r0, #1
 80012b0:	e015      	b.n	80012de <__lesf2+0x86>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d00e      	beq.n	80012d4 <__lesf2+0x7c>
 80012b6:	428b      	cmp	r3, r1
 80012b8:	d1e5      	bne.n	8001286 <__lesf2+0x2e>
 80012ba:	2200      	movs	r2, #0
 80012bc:	4290      	cmp	r0, r2
 80012be:	dc04      	bgt.n	80012ca <__lesf2+0x72>
 80012c0:	42ac      	cmp	r4, r5
 80012c2:	d8e0      	bhi.n	8001286 <__lesf2+0x2e>
 80012c4:	2000      	movs	r0, #0
 80012c6:	42ac      	cmp	r4, r5
 80012c8:	d209      	bcs.n	80012de <__lesf2+0x86>
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	2301      	movs	r3, #1
 80012ce:	4398      	bics	r0, r3
 80012d0:	3001      	adds	r0, #1
 80012d2:	e004      	b.n	80012de <__lesf2+0x86>
 80012d4:	2301      	movs	r3, #1
 80012d6:	3901      	subs	r1, #1
 80012d8:	4399      	bics	r1, r3
 80012da:	0008      	movs	r0, r1
 80012dc:	3001      	adds	r0, #1
 80012de:	bd30      	pop	{r4, r5, pc}
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d1d7      	bne.n	8001294 <__lesf2+0x3c>
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d1ce      	bne.n	8001286 <__lesf2+0x2e>
 80012e8:	4282      	cmp	r2, r0
 80012ea:	dde7      	ble.n	80012bc <__lesf2+0x64>
 80012ec:	2102      	movs	r1, #2
 80012ee:	1e58      	subs	r0, r3, #1
 80012f0:	4008      	ands	r0, r1
 80012f2:	3801      	subs	r0, #1
 80012f4:	e7f3      	b.n	80012de <__lesf2+0x86>
 80012f6:	46c0      	nop			; (mov r8, r8)

080012f8 <ee24_write>:
  else
    return false;
}
//################################################################################################################
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	46ce      	mov	lr, r9
 80012fc:	4647      	mov	r7, r8
 80012fe:	b580      	push	{r7, lr}
 8001300:	b085      	sub	sp, #20
 8001302:	0007      	movs	r7, r0
 8001304:	000e      	movs	r6, r1
 8001306:	0015      	movs	r5, r2
 8001308:	4699      	mov	r9, r3
  if (ee24_lock == 1)
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <ee24_write+0xa0>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d03b      	beq.n	800138a <ee24_write+0x92>
    return false;
  ee24_lock = 1;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <ee24_write+0xa0>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 8001318:	f001 fe6a 	bl	8002ff0 <HAL_GetTick>
 800131c:	4680      	mov	r8, r0
 800131e:	e01c      	b.n	800135a <ee24_write+0x62>
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300 >> 7)), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700 >> 7)), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 500) == HAL_OK)
 8001320:	23fa      	movs	r3, #250	; 0xfa
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	9401      	str	r4, [sp, #4]
 8001328:	9600      	str	r6, [sp, #0]
 800132a:	3bf3      	subs	r3, #243	; 0xf3
 800132c:	3bff      	subs	r3, #255	; 0xff
 800132e:	003a      	movs	r2, r7
 8001330:	21a0      	movs	r1, #160	; 0xa0
 8001332:	481a      	ldr	r0, [pc, #104]	; (800139c <ee24_write+0xa4>)
 8001334:	f002 f95e 	bl	80035f4 <HAL_I2C_Mem_Write>
 8001338:	2800      	cmp	r0, #0
 800133a:	d121      	bne.n	8001380 <ee24_write+0x88>
    #endif
    {
//      ee24_delay(10);
      HAL_Delay(10);
 800133c:	300a      	adds	r0, #10
 800133e:	f001 fe5d 	bl	8002ffc <HAL_Delay>
      len -= w;
 8001342:	1b2d      	subs	r5, r5, r4
      data += w;
 8001344:	1936      	adds	r6, r6, r4
      address += w;
 8001346:	193f      	adds	r7, r7, r4
 8001348:	b2bf      	uxth	r7, r7
      if (len == 0)
 800134a:	2d00      	cmp	r5, #0
 800134c:	d00e      	beq.n	800136c <ee24_write+0x74>
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        ee24_lock = 0;
        return true;
      }
      if (HAL_GetTick() - startTime >= timeout)
 800134e:	f001 fe4f 	bl	8002ff0 <HAL_GetTick>
 8001352:	4643      	mov	r3, r8
 8001354:	1ac0      	subs	r0, r0, r3
 8001356:	4548      	cmp	r0, r9
 8001358:	d20d      	bcs.n	8001376 <ee24_write+0x7e>
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 800135a:	241f      	movs	r4, #31
 800135c:	403c      	ands	r4, r7
 800135e:	2320      	movs	r3, #32
 8001360:	1b1c      	subs	r4, r3, r4
 8001362:	b2a4      	uxth	r4, r4
    if (w > len)
 8001364:	42ac      	cmp	r4, r5
 8001366:	d9db      	bls.n	8001320 <ee24_write+0x28>
      w = len;
 8001368:	b2ac      	uxth	r4, r5
 800136a:	e7d9      	b.n	8001320 <ee24_write+0x28>
        ee24_lock = 0;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <ee24_write+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
        return true;
 8001372:	2001      	movs	r0, #1
 8001374:	e00a      	b.n	800138c <ee24_write+0x94>
      {
        ee24_lock = 0;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <ee24_write+0xa0>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
        return false;
 800137c:	2000      	movs	r0, #0
 800137e:	e005      	b.n	800138c <ee24_write+0x94>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      ee24_lock = 0;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <ee24_write+0xa0>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
      return false;
 8001386:	2000      	movs	r0, #0
 8001388:	e000      	b.n	800138c <ee24_write+0x94>
    return false;
 800138a:	2000      	movs	r0, #0
    }
  }
}
 800138c:	b005      	add	sp, #20
 800138e:	bc0c      	pop	{r2, r3}
 8001390:	4690      	mov	r8, r2
 8001392:	4699      	mov	r9, r3
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20000090 	.word	0x20000090
 800139c:	200002a8 	.word	0x200002a8

080013a0 <ee24_read>:
//################################################################################################################
bool ee24_read(uint16_t address, uint8_t* data, size_t len, uint32_t timeout)
{
 80013a0:	b530      	push	{r4, r5, lr}
 80013a2:	b085      	sub	sp, #20
  if (ee24_lock == 1)
 80013a4:	4c0f      	ldr	r4, [pc, #60]	; (80013e4 <ee24_read+0x44>)
 80013a6:	7824      	ldrb	r4, [r4, #0]
 80013a8:	2c01      	cmp	r4, #1
 80013aa:	d018      	beq.n	80013de <ee24_read+0x3e>
    return false;
  ee24_lock = 1;
 80013ac:	4c0d      	ldr	r4, [pc, #52]	; (80013e4 <ee24_read+0x44>)
 80013ae:	2501      	movs	r5, #1
 80013b0:	7025      	strb	r5, [r4, #0]
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300 >> 7)), (Address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700>> 7)), (Address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	b292      	uxth	r2, r2
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	9100      	str	r1, [sp, #0]
 80013ba:	2302      	movs	r3, #2
 80013bc:	0002      	movs	r2, r0
 80013be:	21a0      	movs	r1, #160	; 0xa0
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <ee24_read+0x48>)
 80013c2:	f002 f9e7 	bl	8003794 <HAL_I2C_Mem_Read>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d004      	beq.n	80013d4 <ee24_read+0x34>
    ee24_lock = 0;
    return true;
  }
  else
  {
    ee24_lock = 0;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <ee24_read+0x44>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
    return false;
 80013d0:	2000      	movs	r0, #0
 80013d2:	e005      	b.n	80013e0 <ee24_read+0x40>
    ee24_lock = 0;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <ee24_read+0x44>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
    return true;
 80013da:	3001      	adds	r0, #1
 80013dc:	e000      	b.n	80013e0 <ee24_read+0x40>
    return false;
 80013de:	2000      	movs	r0, #0
  }
}
 80013e0:	b005      	add	sp, #20
 80013e2:	bd30      	pop	{r4, r5, pc}
 80013e4:	20000090 	.word	0x20000090
 80013e8:	200002a8 	.word	0x200002a8

080013ec <eeprom_init>:

void eeprom_init()
{
 80013ec:	b570      	push	{r4, r5, r6, lr}
	  eeprom_buff_writeBuff[0] =0x14;
 80013ee:	4926      	ldr	r1, [pc, #152]	; (8001488 <eeprom_init+0x9c>)
 80013f0:	2314      	movs	r3, #20
 80013f2:	700b      	strb	r3, [r1, #0]
	  eeprom_buff_writeCnt[0] = 0x00;//0x05;
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <eeprom_init+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
	  eeprom_buff_writeCnt[1] = 0x00;//0x0A;
 80013fa:	705a      	strb	r2, [r3, #1]
	  eeprom_buff_writeCnt[2] = 0x00;// 0x0F;
 80013fc:	709a      	strb	r2, [r3, #2]
	  ee24_write(EEPROM_DEFAULT,&eeprom_buff_writeBuff[0],1,300);
 80013fe:	2396      	movs	r3, #150	; 0x96
 8001400:	26fa      	movs	r6, #250	; 0xfa
 8001402:	00b6      	lsls	r6, r6, #2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	3201      	adds	r2, #1
 8001408:	0030      	movs	r0, r6
 800140a:	f7ff ff75 	bl	80012f8 <ee24_write>
	  HAL_Delay(500);
 800140e:	25fa      	movs	r5, #250	; 0xfa
 8001410:	006d      	lsls	r5, r5, #1
 8001412:	0028      	movs	r0, r5
 8001414:	f001 fdf2 	bl	8002ffc <HAL_Delay>
//	  HAL_Delay(100);
//	  ee24_read((EEPROM_KESAR_COUNT_ADDR),(uint8_t*)&eeprom_buff_writeCnt[1],1,300);
//	  HAL_Delay(100);
//	  ee24_read((EEPROM_POHA_COUNT_ADDR),(uint8_t*)&eeprom_buff_writeCnt[2],1,300);
//	  HAL_Delay(100);
	  ee24_read(EEPROM_DEFAULT,(uint8_t *)&eeprom_buff_read[0],1,200);
 8001418:	4c1d      	ldr	r4, [pc, #116]	; (8001490 <eeprom_init+0xa4>)
 800141a:	23c8      	movs	r3, #200	; 0xc8
 800141c:	2201      	movs	r2, #1
 800141e:	0021      	movs	r1, r4
 8001420:	0030      	movs	r0, r6
 8001422:	f7ff ffbd 	bl	80013a0 <ee24_read>
	  ee24_write((EEPROM_KESAR_COUNT_ADDR),(uint8_t *)&eeprom_buff_writeCnt[0],1,300);
//	  ee24_read((EEPROM_KESAR_COUNT_ADDR),(uint8_t *)&eeprom_buff_write[0],1,300);
	  ee24_write((EEPROM_POHA_COUNT_ADDR),(uint8_t *)&eeprom_buff_writeCnt[0],1,300);
//	  ee24_read((EEPROM_POHA_COUNT_ADDR),(uint8_t *)&eeprom_buff_write[0],1,300);*/
	  /////////////////////////COUNTER TO ZERO//////////////////
	  HAL_Delay(500);
 8001426:	0028      	movs	r0, r5
 8001428:	f001 fde8 	bl	8002ffc <HAL_Delay>
	  /*else
	  	  {
	  	  keyFlags.okFlag = 0;
	  	  switchKeys.OK = 0;
	  	  			}*/
	  if (eeprom_buff_read[0] == 0x14)
 800142c:	7823      	ldrb	r3, [r4, #0]
 800142e:	2b14      	cmp	r3, #20
 8001430:	d000      	beq.n	8001434 <eeprom_init+0x48>
		  }
		  eeprom_buff_read[0]=0XEF;
		  ee24_write(EEPROM_DEFAULT,eeprom_buff_read,1,300);
	  }*/

}
 8001432:	bd70      	pop	{r4, r5, r6, pc}
		  ee24_read((EEPROM_UPMA_COUNT_ADDR),(uint8_t *)&eeprom_buff_readCnt[0],1,300);
 8001434:	3dc8      	subs	r5, #200	; 0xc8
 8001436:	4c17      	ldr	r4, [pc, #92]	; (8001494 <eeprom_init+0xa8>)
 8001438:	20fc      	movs	r0, #252	; 0xfc
 800143a:	002b      	movs	r3, r5
 800143c:	2201      	movs	r2, #1
 800143e:	0021      	movs	r1, r4
 8001440:	0080      	lsls	r0, r0, #2
 8001442:	f7ff ffad 	bl	80013a0 <ee24_read>
		  HAL_Delay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f001 fdd8 	bl	8002ffc <HAL_Delay>
		  ee24_read((EEPROM_KESAR_COUNT_ADDR),(uint8_t *)&eeprom_buff_readCnt[1],1,300);
 800144c:	1c61      	adds	r1, r4, #1
 800144e:	20fe      	movs	r0, #254	; 0xfe
 8001450:	002b      	movs	r3, r5
 8001452:	2201      	movs	r2, #1
 8001454:	0080      	lsls	r0, r0, #2
 8001456:	f7ff ffa3 	bl	80013a0 <ee24_read>
		  HAL_Delay(10);
 800145a:	200a      	movs	r0, #10
 800145c:	f001 fdce 	bl	8002ffc <HAL_Delay>
		  ee24_read((EEPROM_POHA_COUNT_ADDR),(uint8_t *)&eeprom_buff_readCnt[2],1,300);
 8001460:	1ca1      	adds	r1, r4, #2
 8001462:	2080      	movs	r0, #128	; 0x80
 8001464:	002b      	movs	r3, r5
 8001466:	2201      	movs	r2, #1
 8001468:	00c0      	lsls	r0, r0, #3
 800146a:	f7ff ff99 	bl	80013a0 <ee24_read>
		  HAL_Delay(10);
 800146e:	200a      	movs	r0, #10
 8001470:	f001 fdc4 	bl	8002ffc <HAL_Delay>
		  upmaCnt = eeprom_buff_readCnt[0];
 8001474:	7822      	ldrb	r2, [r4, #0]
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <eeprom_init+0xac>)
 8001478:	601a      	str	r2, [r3, #0]
		  kesarCnt = eeprom_buff_readCnt[1];
 800147a:	7862      	ldrb	r2, [r4, #1]
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <eeprom_init+0xb0>)
 800147e:	601a      	str	r2, [r3, #0]
		  pohaCnt = eeprom_buff_readCnt[2];
 8001480:	78a2      	ldrb	r2, [r4, #2]
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <eeprom_init+0xb4>)
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	e7d4      	b.n	8001432 <eeprom_init+0x46>
 8001488:	200000b4 	.word	0x200000b4
 800148c:	20000200 	.word	0x20000200
 8001490:	2000018c 	.word	0x2000018c
 8001494:	200001e8 	.word	0x200001e8
 8001498:	20000190 	.word	0x20000190
 800149c:	200001ec 	.word	0x200001ec
 80014a0:	200001d4 	.word	0x200001d4

080014a4 <ILI9341_Select>:
extern const uint8_t Times_New_Roman19x22[];
extern const uint8_t Times_New_Roman16x16[];

extern TIM_HandleTypeDef htim1;

static void ILI9341_Select() {
 80014a4:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2120      	movs	r1, #32
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <ILI9341_Select+0x10>)
 80014ac:	f001 fedf 	bl	800326e <HAL_GPIO_WritePin>
}
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	48001400 	.word	0x48001400

080014b8 <ILI9341_Reset>:

void ILI9341_Unselect() {
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
}

static void ILI9341_Reset() {
 80014b8:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80014ba:	4d0a      	ldr	r5, [pc, #40]	; (80014e4 <ILI9341_Reset+0x2c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	0028      	movs	r0, r5
 80014c2:	f001 fed4 	bl	800326e <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80014c6:	24fa      	movs	r4, #250	; 0xfa
 80014c8:	0064      	lsls	r4, r4, #1
 80014ca:	0020      	movs	r0, r4
 80014cc:	f001 fd96 	bl	8002ffc <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2101      	movs	r1, #1
 80014d4:	0028      	movs	r0, r5
 80014d6:	f001 feca 	bl	800326e <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80014da:	0020      	movs	r0, r4
 80014dc:	f001 fd8e 	bl	8002ffc <HAL_Delay>
//    HAL_Delay(200);
//
//    HAL_GPIO_WritePin(ILI9341_Reset_GPIO_Port, ILI9341_Reset_Pin, GPIO_PIN_SET);
//
//    HAL_Delay(200);
}
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	48000400 	.word	0x48000400

080014e8 <ILI9341_Unselect>:
void ILI9341_Unselect() {
 80014e8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2120      	movs	r1, #32
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <ILI9341_Unselect+0x10>)
 80014f0:	f001 febd 	bl	800326e <HAL_GPIO_WritePin>
}
 80014f4:	bd10      	pop	{r4, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	48001400 	.word	0x48001400

080014fc <ILI9341_WriteCommand>:

 void ILI9341_WriteCommand(uint8_t cmd) {
 80014fc:	b510      	push	{r4, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	466b      	mov	r3, sp
 8001502:	1ddc      	adds	r4, r3, #7
 8001504:	71d8      	strb	r0, [r3, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <ILI9341_WriteCommand+0x28>)
 800150c:	f001 feaf 	bl	800326e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001510:	2301      	movs	r3, #1
 8001512:	425b      	negs	r3, r3
 8001514:	2201      	movs	r2, #1
 8001516:	0021      	movs	r1, r4
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <ILI9341_WriteCommand+0x2c>)
 800151a:	f003 f811 	bl	8004540 <HAL_SPI_Transmit>
}
 800151e:	b002      	add	sp, #8
 8001520:	bd10      	pop	{r4, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	48000800 	.word	0x48000800
 8001528:	20000558 	.word	0x20000558

0800152c <ILI9341_WriteData>:
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
    HAL_SPI_Transmit(&hspi1, &cmd, sizeof(cmd), HAL_MAX_DELAY);
    ILI9341_Unselect();
}

 void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 800152c:	b570      	push	{r4, r5, r6, lr}
 800152e:	0006      	movs	r6, r0
 8001530:	000d      	movs	r5, r1
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2120      	movs	r1, #32
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <ILI9341_WriteData+0x3c>)
 8001538:	f001 fe99 	bl	800326e <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800153c:	e00a      	b.n	8001554 <ILI9341_WriteData+0x28>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800153e:	b2a2      	uxth	r2, r4
        HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 8001540:	2301      	movs	r3, #1
 8001542:	425b      	negs	r3, r3
 8001544:	0031      	movs	r1, r6
 8001546:	4809      	ldr	r0, [pc, #36]	; (800156c <ILI9341_WriteData+0x40>)
 8001548:	f002 fffa 	bl	8004540 <HAL_SPI_Transmit>
 800154c:	0424      	lsls	r4, r4, #16
 800154e:	0c24      	lsrs	r4, r4, #16
        buff += chunk_size;
 8001550:	1936      	adds	r6, r6, r4
        buff_size -= chunk_size;
 8001552:	1b2d      	subs	r5, r5, r4
    while(buff_size > 0) {
 8001554:	2d00      	cmp	r5, #0
 8001556:	d006      	beq.n	8001566 <ILI9341_WriteData+0x3a>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001558:	002c      	movs	r4, r5
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	429d      	cmp	r5, r3
 8001560:	d9ed      	bls.n	800153e <ILI9341_WriteData+0x12>
 8001562:	001c      	movs	r4, r3
 8001564:	e7eb      	b.n	800153e <ILI9341_WriteData+0x12>
    }
}
 8001566:	bd70      	pop	{r4, r5, r6, pc}
 8001568:	48000800 	.word	0x48000800
 800156c:	20000558 	.word	0x20000558

08001570 <ILI9341_SetAddressWindow>:
        buff_size -= chunk_size;
    }
    ILI9341_Unselect();
}

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	46c6      	mov	lr, r8
 8001574:	b500      	push	{lr}
 8001576:	b082      	sub	sp, #8
 8001578:	4680      	mov	r8, r0
 800157a:	000e      	movs	r6, r1
 800157c:	0017      	movs	r7, r2
 800157e:	001d      	movs	r5, r3
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8001580:	202a      	movs	r0, #42	; 0x2a
 8001582:	f7ff ffbb 	bl	80014fc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001586:	ac01      	add	r4, sp, #4
 8001588:	4643      	mov	r3, r8
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	7023      	strb	r3, [r4, #0]
 800158e:	4643      	mov	r3, r8
 8001590:	7063      	strb	r3, [r4, #1]
 8001592:	0a3b      	lsrs	r3, r7, #8
 8001594:	70a3      	strb	r3, [r4, #2]
 8001596:	70e7      	strb	r7, [r4, #3]
        ILI9341_WriteData(data, sizeof(data));
 8001598:	2104      	movs	r1, #4
 800159a:	0020      	movs	r0, r4
 800159c:	f7ff ffc6 	bl	800152c <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80015a0:	202b      	movs	r0, #43	; 0x2b
 80015a2:	f7ff ffab 	bl	80014fc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80015a6:	0a33      	lsrs	r3, r6, #8
 80015a8:	7023      	strb	r3, [r4, #0]
 80015aa:	7066      	strb	r6, [r4, #1]
 80015ac:	0a2b      	lsrs	r3, r5, #8
 80015ae:	70a3      	strb	r3, [r4, #2]
 80015b0:	70e5      	strb	r5, [r4, #3]
        ILI9341_WriteData(data, sizeof(data));
 80015b2:	2104      	movs	r1, #4
 80015b4:	0020      	movs	r0, r4
 80015b6:	f7ff ffb9 	bl	800152c <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80015ba:	202c      	movs	r0, #44	; 0x2c
 80015bc:	f7ff ff9e 	bl	80014fc <ILI9341_WriteCommand>
}
 80015c0:	b002      	add	sp, #8
 80015c2:	bc04      	pop	{r2}
 80015c4:	4690      	mov	r8, r2
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015c8 <ILI9341_WriteChar1>:



//11x18

static void ILI9341_WriteChar1(uint16_t x, uint16_t y, char ch, uint16_t color, uint16_t bgcolor) {
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	46ce      	mov	lr, r9
 80015cc:	4647      	mov	r7, r8
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b083      	sub	sp, #12
 80015d2:	4691      	mov	r9, r2
 80015d4:	001f      	movs	r7, r3
 80015d6:	ab0a      	add	r3, sp, #40	; 0x28
 80015d8:	881e      	ldrh	r6, [r3, #0]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+11-1, y+18-1);
 80015da:	000b      	movs	r3, r1
 80015dc:	3311      	adds	r3, #17
 80015de:	b29b      	uxth	r3, r3
 80015e0:	0002      	movs	r2, r0
 80015e2:	320a      	adds	r2, #10
 80015e4:	b292      	uxth	r2, r2
 80015e6:	f7ff ffc3 	bl	8001570 <ILI9341_SetAddressWindow>

    for(i = 0; i < 18; i++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	4698      	mov	r8, r3
 80015ee:	e018      	b.n	8001622 <ILI9341_WriteChar1+0x5a>
        for(j = 0; j < 11; j++) {
            if((b << j) & 0x8000)  {
                uint8_t data[] = { color >> 8, color & 0xFF };
                ILI9341_WriteData(data, sizeof(data));
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80015f0:	a801      	add	r0, sp, #4
 80015f2:	0a33      	lsrs	r3, r6, #8
 80015f4:	7003      	strb	r3, [r0, #0]
 80015f6:	7046      	strb	r6, [r0, #1]
                ILI9341_WriteData(data, sizeof(data));
 80015f8:	2102      	movs	r1, #2
 80015fa:	f7ff ff97 	bl	800152c <ILI9341_WriteData>
        for(j = 0; j < 11; j++) {
 80015fe:	3401      	adds	r4, #1
 8001600:	2c0a      	cmp	r4, #10
 8001602:	d80b      	bhi.n	800161c <ILI9341_WriteChar1+0x54>
            if((b << j) & 0x8000)  {
 8001604:	002b      	movs	r3, r5
 8001606:	40a3      	lsls	r3, r4
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	d5f1      	bpl.n	80015f0 <ILI9341_WriteChar1+0x28>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800160c:	a801      	add	r0, sp, #4
 800160e:	0a3b      	lsrs	r3, r7, #8
 8001610:	7003      	strb	r3, [r0, #0]
 8001612:	7047      	strb	r7, [r0, #1]
                ILI9341_WriteData(data, sizeof(data));
 8001614:	2102      	movs	r1, #2
 8001616:	f7ff ff89 	bl	800152c <ILI9341_WriteData>
 800161a:	e7f0      	b.n	80015fe <ILI9341_WriteChar1+0x36>
    for(i = 0; i < 18; i++) {
 800161c:	2301      	movs	r3, #1
 800161e:	469c      	mov	ip, r3
 8001620:	44e0      	add	r8, ip
 8001622:	4643      	mov	r3, r8
 8001624:	2b11      	cmp	r3, #17
 8001626:	d80a      	bhi.n	800163e <ILI9341_WriteChar1+0x76>
        b = Font11x18[(ch - 32) * 18 + i];
 8001628:	464b      	mov	r3, r9
 800162a:	3b20      	subs	r3, #32
 800162c:	00da      	lsls	r2, r3, #3
 800162e:	18d2      	adds	r2, r2, r3
 8001630:	0053      	lsls	r3, r2, #1
 8001632:	4443      	add	r3, r8
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <ILI9341_WriteChar1+0x80>)
 8001638:	5a9d      	ldrh	r5, [r3, r2]
        for(j = 0; j < 11; j++) {
 800163a:	2400      	movs	r4, #0
 800163c:	e7e0      	b.n	8001600 <ILI9341_WriteChar1+0x38>
            }
        }
    }
}
 800163e:	b003      	add	sp, #12
 8001640:	bc0c      	pop	{r2, r3}
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001648:	08005970 	.word	0x08005970

0800164c <ILI9341_Init>:
void ILI9341_Init() {
 800164c:	b570      	push	{r4, r5, r6, lr}
 800164e:	b084      	sub	sp, #16
	ILI9341_Select();
 8001650:	f7ff ff28 	bl	80014a4 <ILI9341_Select>
	    ILI9341_WriteCommand(0x01);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff ff51 	bl	80014fc <ILI9341_WriteCommand>
	    HAL_Delay(100);
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	f001 fcce 	bl	8002ffc <HAL_Delay>
	ILI9341_Reset();
 8001660:	f7ff ff2a 	bl	80014b8 <ILI9341_Reset>
    ILI9341_WriteCommand(0x01);
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff ff49 	bl	80014fc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800166a:	20fa      	movs	r0, #250	; 0xfa
 800166c:	0080      	lsls	r0, r0, #2
 800166e:	f001 fcc5 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xCB);
 8001672:	20cb      	movs	r0, #203	; 0xcb
 8001674:	f7ff ff42 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8001678:	466c      	mov	r4, sp
 800167a:	4d90      	ldr	r5, [pc, #576]	; (80018bc <ILI9341_Init+0x270>)
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	792b      	ldrb	r3, [r5, #4]
 8001682:	7123      	strb	r3, [r4, #4]
        ILI9341_WriteData(data, sizeof(data));
 8001684:	2105      	movs	r1, #5
 8001686:	0020      	movs	r0, r4
 8001688:	f7ff ff50 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 800168c:	200a      	movs	r0, #10
 800168e:	f001 fcb5 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xCF);
 8001692:	20cf      	movs	r0, #207	; 0xcf
 8001694:	f7ff ff32 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8001698:	892b      	ldrh	r3, [r5, #8]
 800169a:	8023      	strh	r3, [r4, #0]
 800169c:	7aab      	ldrb	r3, [r5, #10]
 800169e:	70a3      	strb	r3, [r4, #2]
        ILI9341_WriteData(data, sizeof(data));
 80016a0:	2103      	movs	r1, #3
 80016a2:	0020      	movs	r0, r4
 80016a4:	f7ff ff42 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 80016a8:	200a      	movs	r0, #10
 80016aa:	f001 fca7 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xE8);
 80016ae:	20e8      	movs	r0, #232	; 0xe8
 80016b0:	f7ff ff24 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80016b4:	89ab      	ldrh	r3, [r5, #12]
 80016b6:	8023      	strh	r3, [r4, #0]
 80016b8:	7bab      	ldrb	r3, [r5, #14]
 80016ba:	70a3      	strb	r3, [r4, #2]
        ILI9341_WriteData(data, sizeof(data));
 80016bc:	2103      	movs	r1, #3
 80016be:	0020      	movs	r0, r4
 80016c0:	f7ff ff34 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 80016c4:	200a      	movs	r0, #10
 80016c6:	f001 fc99 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xEA);
 80016ca:	20ea      	movs	r0, #234	; 0xea
 80016cc:	f7ff ff16 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00, 0x00 };
 80016d0:	2600      	movs	r6, #0
 80016d2:	7026      	strb	r6, [r4, #0]
 80016d4:	7066      	strb	r6, [r4, #1]
        ILI9341_WriteData(data, sizeof(data));
 80016d6:	2102      	movs	r1, #2
 80016d8:	0020      	movs	r0, r4
 80016da:	f7ff ff27 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 80016de:	200a      	movs	r0, #10
 80016e0:	f001 fc8c 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xED);
 80016e4:	20ed      	movs	r0, #237	; 0xed
 80016e6:	f7ff ff09 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80016ea:	692b      	ldr	r3, [r5, #16]
 80016ec:	9300      	str	r3, [sp, #0]
        ILI9341_WriteData(data, sizeof(data));
 80016ee:	2104      	movs	r1, #4
 80016f0:	0020      	movs	r0, r4
 80016f2:	f7ff ff1b 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 80016f6:	200a      	movs	r0, #10
 80016f8:	f001 fc80 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xF7);
 80016fc:	20f7      	movs	r0, #247	; 0xf7
 80016fe:	f7ff fefd 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x20 };
 8001702:	2320      	movs	r3, #32
 8001704:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001706:	2101      	movs	r1, #1
 8001708:	0020      	movs	r0, r4
 800170a:	f7ff ff0f 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 800170e:	200a      	movs	r0, #10
 8001710:	f001 fc74 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xC0);
 8001714:	20c0      	movs	r0, #192	; 0xc0
 8001716:	f7ff fef1 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x23 };
 800171a:	2323      	movs	r3, #35	; 0x23
 800171c:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 800171e:	2101      	movs	r1, #1
 8001720:	0020      	movs	r0, r4
 8001722:	f7ff ff03 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 8001726:	200a      	movs	r0, #10
 8001728:	f001 fc68 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xC1);
 800172c:	20c1      	movs	r0, #193	; 0xc1
 800172e:	f7ff fee5 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x10 };
 8001732:	2310      	movs	r3, #16
 8001734:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001736:	2101      	movs	r1, #1
 8001738:	0020      	movs	r0, r4
 800173a:	f7ff fef7 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 800173e:	200a      	movs	r0, #10
 8001740:	f001 fc5c 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xC5);
 8001744:	20c5      	movs	r0, #197	; 0xc5
 8001746:	f7ff fed9 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x3E, 0x28 };
 800174a:	8aab      	ldrh	r3, [r5, #20]
 800174c:	8023      	strh	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 800174e:	2102      	movs	r1, #2
 8001750:	0020      	movs	r0, r4
 8001752:	f7ff feeb 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 8001756:	200a      	movs	r0, #10
 8001758:	f001 fc50 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xC7);
 800175c:	20c7      	movs	r0, #199	; 0xc7
 800175e:	f7ff fecd 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x86 };
 8001762:	2386      	movs	r3, #134	; 0x86
 8001764:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001766:	2101      	movs	r1, #1
 8001768:	0020      	movs	r0, r4
 800176a:	f7ff fedf 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 800176e:	200a      	movs	r0, #10
 8001770:	f001 fc44 	bl	8002ffc <HAL_Delay>
    HAL_Delay(10);
 8001774:	200a      	movs	r0, #10
 8001776:	f001 fc41 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0x3A);
 800177a:	203a      	movs	r0, #58	; 0x3a
 800177c:	f7ff febe 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x55 };
 8001780:	2355      	movs	r3, #85	; 0x55
 8001782:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001784:	2101      	movs	r1, #1
 8001786:	0020      	movs	r0, r4
 8001788:	f7ff fed0 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f001 fc35 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xB1);
 8001792:	20b1      	movs	r0, #177	; 0xb1
 8001794:	f7ff feb2 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00, 0x18 };
 8001798:	7026      	strb	r6, [r4, #0]
 800179a:	2318      	movs	r3, #24
 800179c:	7063      	strb	r3, [r4, #1]
        ILI9341_WriteData(data, sizeof(data));
 800179e:	2102      	movs	r1, #2
 80017a0:	0020      	movs	r0, r4
 80017a2:	f7ff fec3 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 80017a6:	200a      	movs	r0, #10
 80017a8:	f001 fc28 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xB6);
 80017ac:	20b6      	movs	r0, #182	; 0xb6
 80017ae:	f7ff fea5 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x0A, 0x82, 0x27 };
 80017b2:	8b2b      	ldrh	r3, [r5, #24]
 80017b4:	8023      	strh	r3, [r4, #0]
 80017b6:	7eab      	ldrb	r3, [r5, #26]
 80017b8:	70a3      	strb	r3, [r4, #2]
        ILI9341_WriteData(data, sizeof(data));
 80017ba:	2103      	movs	r1, #3
 80017bc:	0020      	movs	r0, r4
 80017be:	f7ff feb5 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f001 fc1a 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0x0B);
 80017c8:	200b      	movs	r0, #11
 80017ca:	f7ff fe97 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x08};
 80017ce:	2308      	movs	r3, #8
 80017d0:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 80017d2:	2101      	movs	r1, #1
 80017d4:	0020      	movs	r0, r4
 80017d6:	f7ff fea9 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 80017da:	200a      	movs	r0, #10
 80017dc:	f001 fc0e 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0x33);
 80017e0:	2033      	movs	r0, #51	; 0x33
 80017e2:	f7ff fe8b 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00,0x00,0x01,0x40,0x00,0x00};
 80017e6:	69eb      	ldr	r3, [r5, #28]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	8c2b      	ldrh	r3, [r5, #32]
 80017ec:	80a3      	strh	r3, [r4, #4]
        ILI9341_WriteData(data, sizeof(data));
 80017ee:	2106      	movs	r1, #6
 80017f0:	0020      	movs	r0, r4
 80017f2:	f7ff fe9b 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 80017f6:	200a      	movs	r0, #10
 80017f8:	f001 fc00 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0x37);
 80017fc:	2037      	movs	r0, #55	; 0x37
 80017fe:	f7ff fe7d 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00 };
 8001802:	7026      	strb	r6, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001804:	2101      	movs	r1, #1
 8001806:	0020      	movs	r0, r4
 8001808:	f7ff fe90 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 800180c:	200a      	movs	r0, #10
 800180e:	f001 fbf5 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xF2);
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fe72 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00 };
 8001818:	7026      	strb	r6, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 800181a:	2101      	movs	r1, #1
 800181c:	0020      	movs	r0, r4
 800181e:	f7ff fe85 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 8001822:	200a      	movs	r0, #10
 8001824:	f001 fbea 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0x26);
 8001828:	2026      	movs	r0, #38	; 0x26
 800182a:	f7ff fe67 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x01 };
 800182e:	2301      	movs	r3, #1
 8001830:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001832:	2101      	movs	r1, #1
 8001834:	0020      	movs	r0, r4
 8001836:	f7ff fe79 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 800183a:	200a      	movs	r0, #10
 800183c:	f001 fbde 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xE0);
 8001840:	20e0      	movs	r0, #224	; 0xe0
 8001842:	f7ff fe5b 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001846:	0026      	movs	r6, r4
 8001848:	002b      	movs	r3, r5
 800184a:	3324      	adds	r3, #36	; 0x24
 800184c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800184e:	c607      	stmia	r6!, {r0, r1, r2}
 8001850:	881a      	ldrh	r2, [r3, #0]
 8001852:	8032      	strh	r2, [r6, #0]
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	70b3      	strb	r3, [r6, #2]
        ILI9341_WriteData(data, sizeof(data));
 8001858:	210f      	movs	r1, #15
 800185a:	0020      	movs	r0, r4
 800185c:	f7ff fe66 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 8001860:	200a      	movs	r0, #10
 8001862:	f001 fbcb 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0xE1);
 8001866:	20e1      	movs	r0, #225	; 0xe1
 8001868:	f7ff fe48 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800186c:	3534      	adds	r5, #52	; 0x34
 800186e:	0023      	movs	r3, r4
 8001870:	cd07      	ldmia	r5!, {r0, r1, r2}
 8001872:	c307      	stmia	r3!, {r0, r1, r2}
 8001874:	882b      	ldrh	r3, [r5, #0]
 8001876:	8033      	strh	r3, [r6, #0]
 8001878:	78ab      	ldrb	r3, [r5, #2]
 800187a:	70b3      	strb	r3, [r6, #2]
        ILI9341_WriteData(data, sizeof(data));
 800187c:	210f      	movs	r1, #15
 800187e:	0020      	movs	r0, r4
 8001880:	f7ff fe54 	bl	800152c <ILI9341_WriteData>
    HAL_Delay(10);
 8001884:	200a      	movs	r0, #10
 8001886:	f001 fbb9 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0x11);
 800188a:	2011      	movs	r0, #17
 800188c:	f7ff fe36 	bl	80014fc <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001890:	2078      	movs	r0, #120	; 0x78
 8001892:	f001 fbb3 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteCommand(0x29);
 8001896:	2029      	movs	r0, #41	; 0x29
 8001898:	f7ff fe30 	bl	80014fc <ILI9341_WriteCommand>
    ILI9341_WriteCommand(0x36);
 800189c:	2036      	movs	r0, #54	; 0x36
 800189e:	f7ff fe2d 	bl	80014fc <ILI9341_WriteCommand>
        uint8_t data[] = { ILI9341_ROTATION };
 80018a2:	2328      	movs	r3, #40	; 0x28
 80018a4:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(data, sizeof(data));
 80018a6:	2101      	movs	r1, #1
 80018a8:	0020      	movs	r0, r4
 80018aa:	f7ff fe3f 	bl	800152c <ILI9341_WriteData>
        HAL_Delay(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f001 fba4 	bl	8002ffc <HAL_Delay>
    ILI9341_Unselect();
 80018b4:	f7ff fe18 	bl	80014e8 <ILI9341_Unselect>
}
 80018b8:	b004      	add	sp, #16
 80018ba:	bd70      	pop	{r4, r5, r6, pc}
 80018bc:	08005844 	.word	0x08005844

080018c0 <ILI9341_WriteString1>:

    ILI9341_Unselect();
}

//11x18
void ILI9341_WriteString1(uint16_t x, uint16_t y, const char* str, uint16_t color, uint16_t bgcolor) {
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b085      	sub	sp, #20
 80018c4:	0004      	movs	r4, r0
 80018c6:	000d      	movs	r5, r1
 80018c8:	0017      	movs	r7, r2
 80018ca:	9303      	str	r3, [sp, #12]
 80018cc:	ab0a      	add	r3, sp, #40	; 0x28
 80018ce:	881e      	ldrh	r6, [r3, #0]
    ILI9341_Select();
 80018d0:	f7ff fde8 	bl	80014a4 <ILI9341_Select>
//    HAL_TIM_Base_Stop_IT(&htim1);

    while(*str) {
 80018d4:	e00b      	b.n	80018ee <ILI9341_WriteString1+0x2e>
                break;
            }

            if(*str == ' ') {
                // skip spaces in the beginning of the new line
                str++;
 80018d6:	3701      	adds	r7, #1
            x = 0;
 80018d8:	2400      	movs	r4, #0
                continue;
 80018da:	e008      	b.n	80018ee <ILI9341_WriteString1+0x2e>
            }
        }

        ILI9341_WriteChar1(x, y, *str, color, bgcolor);
 80018dc:	9600      	str	r6, [sp, #0]
 80018de:	9b03      	ldr	r3, [sp, #12]
 80018e0:	0029      	movs	r1, r5
 80018e2:	0020      	movs	r0, r4
 80018e4:	f7ff fe70 	bl	80015c8 <ILI9341_WriteChar1>
        x += 11;
 80018e8:	340b      	adds	r4, #11
 80018ea:	b2a4      	uxth	r4, r4
        str++;
 80018ec:	3701      	adds	r7, #1
    while(*str) {
 80018ee:	783a      	ldrb	r2, [r7, #0]
 80018f0:	2a00      	cmp	r2, #0
 80018f2:	d00f      	beq.n	8001914 <ILI9341_WriteString1+0x54>
        if(x + 11 >= ILI9341_WIDTH) {
 80018f4:	2140      	movs	r1, #64	; 0x40
 80018f6:	31ff      	adds	r1, #255	; 0xff
 80018f8:	0023      	movs	r3, r4
 80018fa:	330b      	adds	r3, #11
 80018fc:	428b      	cmp	r3, r1
 80018fe:	dded      	ble.n	80018dc <ILI9341_WriteString1+0x1c>
            y += 18;
 8001900:	3512      	adds	r5, #18
 8001902:	b2ad      	uxth	r5, r5
            if(y + 11 >= ILI9341_HEIGHT) {
 8001904:	002b      	movs	r3, r5
 8001906:	330b      	adds	r3, #11
 8001908:	2bef      	cmp	r3, #239	; 0xef
 800190a:	dc03      	bgt.n	8001914 <ILI9341_WriteString1+0x54>
            if(*str == ' ') {
 800190c:	2a20      	cmp	r2, #32
 800190e:	d0e2      	beq.n	80018d6 <ILI9341_WriteString1+0x16>
            x = 0;
 8001910:	2400      	movs	r4, #0
 8001912:	e7e3      	b.n	80018dc <ILI9341_WriteString1+0x1c>
    }
//    HAL_TIM_Base_Start_IT(&htim1);
    ILI9341_Unselect();
 8001914:	f7ff fde8 	bl	80014e8 <ILI9341_Unselect>
    HAL_Delay(1);
 8001918:	2001      	movs	r0, #1
 800191a:	f001 fb6f 	bl	8002ffc <HAL_Delay>
}
 800191e:	b005      	add	sp, #20
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001924 <ILI9341_FillRectangle>:

#endif



void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	46c6      	mov	lr, r8
 8001928:	b500      	push	{lr}
 800192a:	b082      	sub	sp, #8
 800192c:	0004      	movs	r4, r0
 800192e:	000f      	movs	r7, r1
 8001930:	0015      	movs	r5, r2
 8001932:	001e      	movs	r6, r3
 8001934:	ab08      	add	r3, sp, #32
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	4698      	mov	r8, r3
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800193a:	2340      	movs	r3, #64	; 0x40
 800193c:	33ff      	adds	r3, #255	; 0xff
 800193e:	4298      	cmp	r0, r3
 8001940:	d845      	bhi.n	80019ce <ILI9341_FillRectangle+0xaa>
 8001942:	29ef      	cmp	r1, #239	; 0xef
 8001944:	d843      	bhi.n	80019ce <ILI9341_FillRectangle+0xaa>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8001946:	1883      	adds	r3, r0, r2
 8001948:	3b01      	subs	r3, #1
 800194a:	2240      	movs	r2, #64	; 0x40
 800194c:	32ff      	adds	r2, #255	; 0xff
 800194e:	4293      	cmp	r3, r2
 8001950:	dd03      	ble.n	800195a <ILI9341_FillRectangle+0x36>
 8001952:	25a0      	movs	r5, #160	; 0xa0
 8001954:	006d      	lsls	r5, r5, #1
 8001956:	1a2d      	subs	r5, r5, r0
 8001958:	b2ad      	uxth	r5, r5
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800195a:	19bb      	adds	r3, r7, r6
 800195c:	3b01      	subs	r3, #1
 800195e:	2bef      	cmp	r3, #239	; 0xef
 8001960:	dd02      	ble.n	8001968 <ILI9341_FillRectangle+0x44>
 8001962:	26f0      	movs	r6, #240	; 0xf0
 8001964:	1bf6      	subs	r6, r6, r7
 8001966:	b2b6      	uxth	r6, r6

    ILI9341_Select();
 8001968:	f7ff fd9c 	bl	80014a4 <ILI9341_Select>
    HAL_Delay(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f001 fb45 	bl	8002ffc <HAL_Delay>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001972:	192a      	adds	r2, r5, r4
 8001974:	b292      	uxth	r2, r2
 8001976:	19f3      	adds	r3, r6, r7
 8001978:	b29b      	uxth	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	b29b      	uxth	r3, r3
 800197e:	3a01      	subs	r2, #1
 8001980:	b292      	uxth	r2, r2
 8001982:	0039      	movs	r1, r7
 8001984:	0020      	movs	r0, r4
 8001986:	f7ff fdf3 	bl	8001570 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800198a:	ab01      	add	r3, sp, #4
 800198c:	4642      	mov	r2, r8
 800198e:	0a12      	lsrs	r2, r2, #8
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	4642      	mov	r2, r8
 8001994:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	2120      	movs	r1, #32
 800199a:	480f      	ldr	r0, [pc, #60]	; (80019d8 <ILI9341_FillRectangle+0xb4>)
 800199c:	f001 fc67 	bl	800326e <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80019a0:	e00c      	b.n	80019bc <ILI9341_FillRectangle+0x98>
        for(x = w; x > 0; x--) {
            HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 80019a2:	2301      	movs	r3, #1
 80019a4:	425b      	negs	r3, r3
 80019a6:	2202      	movs	r2, #2
 80019a8:	a901      	add	r1, sp, #4
 80019aa:	480c      	ldr	r0, [pc, #48]	; (80019dc <ILI9341_FillRectangle+0xb8>)
 80019ac:	f002 fdc8 	bl	8004540 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80019b0:	3c01      	subs	r4, #1
 80019b2:	b2a4      	uxth	r4, r4
 80019b4:	2c00      	cmp	r4, #0
 80019b6:	d1f4      	bne.n	80019a2 <ILI9341_FillRectangle+0x7e>
    for(y = h; y > 0; y--) {
 80019b8:	3e01      	subs	r6, #1
 80019ba:	b2b6      	uxth	r6, r6
 80019bc:	2e00      	cmp	r6, #0
 80019be:	d001      	beq.n	80019c4 <ILI9341_FillRectangle+0xa0>
        for(x = w; x > 0; x--) {
 80019c0:	002c      	movs	r4, r5
 80019c2:	e7f7      	b.n	80019b4 <ILI9341_FillRectangle+0x90>
        }
    }

    ILI9341_Unselect();
 80019c4:	f7ff fd90 	bl	80014e8 <ILI9341_Unselect>
    HAL_Delay(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f001 fb17 	bl	8002ffc <HAL_Delay>
}
 80019ce:	b002      	add	sp, #8
 80019d0:	bc04      	pop	{r2}
 80019d2:	4690      	mov	r8, r2
 80019d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	48000800 	.word	0x48000800
 80019dc:	20000558 	.word	0x20000558

080019e0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80019e0:	b500      	push	{lr}
 80019e2:	b083      	sub	sp, #12
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80019e4:	22a0      	movs	r2, #160	; 0xa0
 80019e6:	9000      	str	r0, [sp, #0]
 80019e8:	23f0      	movs	r3, #240	; 0xf0
 80019ea:	0052      	lsls	r2, r2, #1
 80019ec:	2100      	movs	r1, #0
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff ff98 	bl	8001924 <ILI9341_FillRectangle>
}
 80019f4:	b003      	add	sp, #12
 80019f6:	bd00      	pop	{pc}

080019f8 <ILI9341_FillScreenOffset>:

void ILI9341_FillScreenOffset(uint16_t color) {
 80019f8:	b500      	push	{lr}
 80019fa:	b083      	sub	sp, #12
    ILI9341_FillRectangle(0, 20, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80019fc:	22a0      	movs	r2, #160	; 0xa0
 80019fe:	9000      	str	r0, [sp, #0]
 8001a00:	23f0      	movs	r3, #240	; 0xf0
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	2114      	movs	r1, #20
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff ff8c 	bl	8001924 <ILI9341_FillRectangle>
}
 8001a0c:	b003      	add	sp, #12
 8001a0e:	bd00      	pop	{pc}

08001a10 <ILI9341_FillScreenTemp>:

void ILI9341_FillScreenOffsetManual(uint16_t color) {
    ILI9341_FillRectangle(0, 120, ILI9341_WIDTH, 40, color);
}

void ILI9341_FillScreenTemp(uint16_t color) {
 8001a10:	b500      	push	{lr}
 8001a12:	b083      	sub	sp, #12
    ILI9341_FillRectangle(ERROR_OFFSET, 0, ILI9341_WIDTH, 20, color);
 8001a14:	22a0      	movs	r2, #160	; 0xa0
 8001a16:	9000      	str	r0, [sp, #0]
 8001a18:	2314      	movs	r3, #20
 8001a1a:	0052      	lsls	r2, r2, #1
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	20d2      	movs	r0, #210	; 0xd2
 8001a20:	f7ff ff80 	bl	8001924 <ILI9341_FillRectangle>
}
 8001a24:	b003      	add	sp, #12
 8001a26:	bd00      	pop	{pc}

08001a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	2214      	movs	r2, #20
 8001a2e:	2100      	movs	r1, #0
 8001a30:	a805      	add	r0, sp, #20
 8001a32:	f003 fade 	bl	8004ff2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <MX_GPIO_Init+0x11c>)
 8001a38:	6959      	ldr	r1, [r3, #20]
 8001a3a:	2080      	movs	r0, #128	; 0x80
 8001a3c:	0300      	lsls	r0, r0, #12
 8001a3e:	4301      	orrs	r1, r0
 8001a40:	6159      	str	r1, [r3, #20]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	4002      	ands	r2, r0
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4a:	6959      	ldr	r1, [r3, #20]
 8001a4c:	2080      	movs	r0, #128	; 0x80
 8001a4e:	03c0      	lsls	r0, r0, #15
 8001a50:	4301      	orrs	r1, r0
 8001a52:	6159      	str	r1, [r3, #20]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4002      	ands	r2, r0
 8001a58:	9202      	str	r2, [sp, #8]
 8001a5a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	6959      	ldr	r1, [r3, #20]
 8001a5e:	2080      	movs	r0, #128	; 0x80
 8001a60:	0280      	lsls	r0, r0, #10
 8001a62:	4301      	orrs	r1, r0
 8001a64:	6159      	str	r1, [r3, #20]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	4002      	ands	r2, r0
 8001a6a:	9203      	str	r2, [sp, #12]
 8001a6c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	02c9      	lsls	r1, r1, #11
 8001a74:	430a      	orrs	r2, r1
 8001a76:	615a      	str	r2, [r3, #20]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	9304      	str	r3, [sp, #16]
 8001a7e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STRPPER_5_EN_Pin|STEPPER_5_PUL_Pin|EX_FAN_Pin|ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001a80:	4e31      	ldr	r6, [pc, #196]	; (8001b48 <MX_GPIO_Init+0x120>)
 8001a82:	4d32      	ldr	r5, [pc, #200]	; (8001b4c <MX_GPIO_Init+0x124>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	0031      	movs	r1, r6
 8001a88:	0028      	movs	r0, r5
 8001a8a:	f001 fbf0 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSR_RELAY_Pin|STEPPER_2_PUL_Pin|STEPPER_2_EN_Pin|Temp_CS_Pin
 8001a8e:	4c30      	ldr	r4, [pc, #192]	; (8001b50 <MX_GPIO_Init+0x128>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	0021      	movs	r1, r4
 8001a94:	2090      	movs	r0, #144	; 0x90
 8001a96:	05c0      	lsls	r0, r0, #23
 8001a98:	f001 fbe9 	bl	800326e <HAL_GPIO_WritePin>
                          |STEPPER_4_PUL_Pin|STEPPER_4_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ILI9341_CS_Pin|STEPPER_1_EN_Pin|STEPPER_1_PUL_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	21e0      	movs	r1, #224	; 0xe0
 8001aa0:	482c      	ldr	r0, [pc, #176]	; (8001b54 <MX_GPIO_Init+0x12c>)
 8001aa2:	f001 fbe4 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILI9341_RES_Pin|STEPPER_3_EN_Pin|STEPPER_3_PUL_Pin|INLET_MOTOR_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2171      	movs	r1, #113	; 0x71
 8001aaa:	482b      	ldr	r0, [pc, #172]	; (8001b58 <MX_GPIO_Init+0x130>)
 8001aac:	f001 fbdf 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STRPPER_5_EN_Pin STEPPER_5_PUL_Pin EX_FAN_Pin ILI9341_DC_Pin */
  GPIO_InitStruct.Pin = STRPPER_5_EN_Pin|STEPPER_5_PUL_Pin|EX_FAN_Pin|ILI9341_DC_Pin;
 8001ab0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2601      	movs	r6, #1
 8001ab4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2700      	movs	r7, #0
 8001ab8:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	a905      	add	r1, sp, #20
 8001abe:	0028      	movs	r0, r5
 8001ac0:	f001 fb08 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSR_RELAY_Pin STEPPER_2_PUL_Pin STEPPER_2_EN_Pin Temp_CS_Pin
                           STEPPER_4_PUL_Pin STEPPER_4_EN_Pin */
  GPIO_InitStruct.Pin = SSR_RELAY_Pin|STEPPER_2_PUL_Pin|STEPPER_2_EN_Pin|Temp_CS_Pin
 8001ac4:	9405      	str	r4, [sp, #20]
                          |STEPPER_4_PUL_Pin|STEPPER_4_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	a905      	add	r1, sp, #20
 8001ace:	2090      	movs	r0, #144	; 0x90
 8001ad0:	05c0      	lsls	r0, r0, #23
 8001ad2:	f001 faff 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_CS_Pin STEPPER_1_EN_Pin STEPPER_1_PUL_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|STEPPER_1_EN_Pin|STEPPER_1_PUL_Pin;
 8001ad6:	23e0      	movs	r3, #224	; 0xe0
 8001ad8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae0:	a905      	add	r1, sp, #20
 8001ae2:	481c      	ldr	r0, [pc, #112]	; (8001b54 <MX_GPIO_Init+0x12c>)
 8001ae4:	f001 faf6 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_RES_Pin STEPPER_3_EN_Pin STEPPER_3_PUL_Pin INLET_MOTOR_Pin */
  GPIO_InitStruct.Pin = ILI9341_RES_Pin|STEPPER_3_EN_Pin|STEPPER_3_PUL_Pin|INLET_MOTOR_Pin;
 8001ae8:	2371      	movs	r3, #113	; 0x71
 8001aea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	a905      	add	r1, sp, #20
 8001af4:	4818      	ldr	r0, [pc, #96]	; (8001b58 <MX_GPIO_Init+0x130>)
 8001af6:	f001 faed 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_DIRECTION_Pin DOWN_DIRECTION_Pin */
  GPIO_InitStruct.Pin = UP_DIRECTION_Pin|DOWN_DIRECTION_Pin;
 8001afa:	23c0      	movs	r3, #192	; 0xc0
 8001afc:	01db      	lsls	r3, r3, #7
 8001afe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	a905      	add	r1, sp, #20
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <MX_GPIO_Init+0x130>)
 8001b08:	f001 fae4 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_PIN_Pin */
  GPIO_InitStruct.Pin = OK_PIN_Pin;
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(OK_PIN_GPIO_Port, &GPIO_InitStruct);
 8001b14:	a905      	add	r1, sp, #20
 8001b16:	0028      	movs	r0, r5
 8001b18:	f001 fadc 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROX_UPMA_Pin PROX_POHA_Pin PROX_KESARI_Pin */
  GPIO_InitStruct.Pin = PROX_UPMA_Pin|PROX_POHA_Pin|PROX_KESARI_Pin;
 8001b1c:	23e0      	movs	r3, #224	; 0xe0
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b22:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b24:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b26:	a905      	add	r1, sp, #20
 8001b28:	0028      	movs	r0, r5
 8001b2a:	f001 fad3 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_LEVEL_SNR_Pin */
  GPIO_InitStruct.Pin = IR_LEVEL_SNR_Pin;
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b34:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(IR_LEVEL_SNR_GPIO_Port, &GPIO_InitStruct);
 8001b36:	a905      	add	r1, sp, #20
 8001b38:	4807      	ldr	r0, [pc, #28]	; (8001b58 <MX_GPIO_Init+0x130>)
 8001b3a:	f001 facb 	bl	80030d4 <HAL_GPIO_Init>

}
 8001b3e:	b00b      	add	sp, #44	; 0x2c
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40021000 	.word	0x40021000
 8001b48:	00002029 	.word	0x00002029
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	0000061d 	.word	0x0000061d
 8001b54:	48001400 	.word	0x48001400
 8001b58:	48000400 	.word	0x48000400

08001b5c <MX_SPI1_Init>:
{
 8001b5c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001b5e:	480e      	ldr	r0, [pc, #56]	; (8001b98 <MX_SPI1_Init+0x3c>)
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_SPI1_Init+0x40>)
 8001b62:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b64:	2382      	movs	r3, #130	; 0x82
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b6e:	22e0      	movs	r2, #224	; 0xe0
 8001b70:	00d2      	lsls	r2, r2, #3
 8001b72:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b74:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b76:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b7e:	3af9      	subs	r2, #249	; 0xf9
 8001b80:	3aff      	subs	r2, #255	; 0xff
 8001b82:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b84:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b86:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b88:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b8a:	2107      	movs	r1, #7
 8001b8c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b8e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b90:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b92:	f002 fc53 	bl	800443c <HAL_SPI_Init>
}
 8001b96:	bd10      	pop	{r4, pc}
 8001b98:	20000558 	.word	0x20000558
 8001b9c:	40013000 	.word	0x40013000

08001ba0 <MX_TIM3_Init>:
{
 8001ba0:	b530      	push	{r4, r5, lr}
 8001ba2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	a802      	add	r0, sp, #8
 8001baa:	f003 fa22 	bl	8004ff2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	2208      	movs	r2, #8
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4668      	mov	r0, sp
 8001bb4:	f003 fa1d 	bl	8004ff2 <memset>
  htim3.Instance = TIM3;
 8001bb8:	4c0e      	ldr	r4, [pc, #56]	; (8001bf4 <MX_TIM3_Init+0x54>)
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_TIM3_Init+0x58>)
 8001bbc:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 99;
 8001bbe:	2363      	movs	r3, #99	; 0x63
 8001bc0:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	2500      	movs	r5, #0
 8001bc4:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 4799;
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <MX_TIM3_Init+0x5c>)
 8001bc8:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bce:	0020      	movs	r0, r4
 8001bd0:	f003 f8fe 	bl	8004dd0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	015b      	lsls	r3, r3, #5
 8001bd8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bda:	a902      	add	r1, sp, #8
 8001bdc:	0020      	movs	r0, r4
 8001bde:	f003 f92f 	bl	8004e40 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be6:	4669      	mov	r1, sp
 8001be8:	0020      	movs	r0, r4
 8001bea:	f003 f99b 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
}
 8001bee:	b007      	add	sp, #28
 8001bf0:	bd30      	pop	{r4, r5, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000434 	.word	0x20000434
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	000012bf 	.word	0x000012bf

08001c00 <MX_TIM1_Init>:
{
 8001c00:	b530      	push	{r4, r5, lr}
 8001c02:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c04:	2210      	movs	r2, #16
 8001c06:	2100      	movs	r1, #0
 8001c08:	a802      	add	r0, sp, #8
 8001c0a:	f003 f9f2 	bl	8004ff2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0e:	2208      	movs	r2, #8
 8001c10:	2100      	movs	r1, #0
 8001c12:	4668      	mov	r0, sp
 8001c14:	f003 f9ed 	bl	8004ff2 <memset>
  htim1.Instance = TIM1;
 8001c18:	4c0e      	ldr	r4, [pc, #56]	; (8001c54 <MX_TIM1_Init+0x54>)
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_TIM1_Init+0x58>)
 8001c1c:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 8001c1e:	2500      	movs	r5, #0
 8001c20:	6065      	str	r5, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	60a5      	str	r5, [r4, #8]
  htim1.Init.Period = 65535;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <MX_TIM1_Init+0x5c>)
 8001c26:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c2a:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c2e:	0020      	movs	r0, r4
 8001c30:	f003 f8ce 	bl	8004dd0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c3a:	a902      	add	r1, sp, #8
 8001c3c:	0020      	movs	r0, r4
 8001c3e:	f003 f8ff 	bl	8004e40 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c46:	4669      	mov	r1, sp
 8001c48:	0020      	movs	r0, r4
 8001c4a:	f003 f96b 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
}
 8001c4e:	b007      	add	sp, #28
 8001c50:	bd30      	pop	{r4, r5, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	200004f8 	.word	0x200004f8
 8001c58:	40012c00 	.word	0x40012c00
 8001c5c:	0000ffff 	.word	0x0000ffff

08001c60 <MX_TIM15_Init>:
{
 8001c60:	b530      	push	{r4, r5, lr}
 8001c62:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c64:	2210      	movs	r2, #16
 8001c66:	2100      	movs	r1, #0
 8001c68:	a802      	add	r0, sp, #8
 8001c6a:	f003 f9c2 	bl	8004ff2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	2208      	movs	r2, #8
 8001c70:	2100      	movs	r1, #0
 8001c72:	4668      	mov	r0, sp
 8001c74:	f003 f9bd 	bl	8004ff2 <memset>
  htim15.Instance = TIM15;
 8001c78:	4c0e      	ldr	r4, [pc, #56]	; (8001cb4 <MX_TIM15_Init+0x54>)
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_TIM15_Init+0x58>)
 8001c7c:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = 999;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_TIM15_Init+0x5c>)
 8001c80:	6063      	str	r3, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	2500      	movs	r5, #0
 8001c84:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 959;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_TIM15_Init+0x60>)
 8001c88:	60e3      	str	r3, [r4, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	6125      	str	r5, [r4, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c8c:	6165      	str	r5, [r4, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001c90:	0020      	movs	r0, r4
 8001c92:	f003 f89d 	bl	8004dd0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	015b      	lsls	r3, r3, #5
 8001c9a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c9c:	a902      	add	r1, sp, #8
 8001c9e:	0020      	movs	r0, r4
 8001ca0:	f003 f8ce 	bl	8004e40 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca4:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ca8:	4669      	mov	r1, sp
 8001caa:	0020      	movs	r0, r4
 8001cac:	f003 f93a 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
}
 8001cb0:	b007      	add	sp, #28
 8001cb2:	bd30      	pop	{r4, r5, pc}
 8001cb4:	200002f4 	.word	0x200002f4
 8001cb8:	40014000 	.word	0x40014000
 8001cbc:	000003e7 	.word	0x000003e7
 8001cc0:	000003bf 	.word	0x000003bf

08001cc4 <MX_I2C1_Init>:
{
 8001cc4:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8001cc6:	4c0d      	ldr	r4, [pc, #52]	; (8001cfc <MX_I2C1_Init+0x38>)
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_I2C1_Init+0x3c>)
 8001cca:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <MX_I2C1_Init+0x40>)
 8001cce:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd8:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cda:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cdc:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cde:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce0:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce2:	0020      	movs	r0, r4
 8001ce4:	f001 fc20 	bl	8003528 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	0020      	movs	r0, r4
 8001cec:	f001 fe26 	bl	800393c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	0020      	movs	r0, r4
 8001cf4:	f001 fe4e 	bl	8003994 <HAL_I2CEx_ConfigDigitalFilter>
}
 8001cf8:	bd10      	pop	{r4, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	200002a8 	.word	0x200002a8
 8001d00:	40005400 	.word	0x40005400
 8001d04:	2000090e 	.word	0x2000090e

08001d08 <SystemClock_Config>:
{
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0c:	2218      	movs	r2, #24
 8001d0e:	2100      	movs	r1, #0
 8001d10:	a80a      	add	r0, sp, #40	; 0x28
 8001d12:	f003 f96e 	bl	8004ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d16:	2210      	movs	r2, #16
 8001d18:	2100      	movs	r1, #0
 8001d1a:	a804      	add	r0, sp, #16
 8001d1c:	f003 f969 	bl	8004ff2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d20:	2210      	movs	r2, #16
 8001d22:	2100      	movs	r1, #0
 8001d24:	4668      	mov	r0, sp
 8001d26:	f003 f964 	bl	8004ff2 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d2e:	3b02      	subs	r3, #2
 8001d30:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d32:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d34:	2210      	movs	r2, #16
 8001d36:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d38:	2402      	movs	r4, #2
 8001d3a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	0252      	lsls	r2, r2, #9
 8001d40:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001d42:	22a0      	movs	r2, #160	; 0xa0
 8001d44:	0392      	lsls	r2, r2, #14
 8001d46:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001d48:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4a:	a808      	add	r0, sp, #32
 8001d4c:	f001 fe4c 	bl	80039e8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d50:	2307      	movs	r3, #7
 8001d52:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d54:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d56:	2400      	movs	r4, #0
 8001d58:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d5a:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	a804      	add	r0, sp, #16
 8001d60:	f002 f8d0 	bl	8003f04 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d64:	2320      	movs	r3, #32
 8001d66:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d68:	9403      	str	r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6a:	4668      	mov	r0, sp
 8001d6c:	f002 f974 	bl	8004058 <HAL_RCCEx_PeriphCLKConfig>
  HAL_RCC_EnableCSS();
 8001d70:	f002 f886 	bl	8003e80 <HAL_RCC_EnableCSS>
}
 8001d74:	b014      	add	sp, #80	; 0x50
 8001d76:	bd10      	pop	{r4, pc}

08001d78 <init>:

/* USER CODE BEGIN 4 */


void init(void) {
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	b082      	sub	sp, #8
//	HAL_Delay(100);

	HAL_GPIO_WritePin(INLET_MOTOR_GPIO_Port, INLET_MOTOR_Pin, RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	480f      	ldr	r0, [pc, #60]	; (8001dc0 <init+0x48>)
 8001d82:	f001 fa74 	bl	800326e <HAL_GPIO_WritePin>
    ILI9341_Unselect();
 8001d86:	f7ff fbaf 	bl	80014e8 <ILI9341_Unselect>

    HAL_Delay(100);
 8001d8a:	2064      	movs	r0, #100	; 0x64
 8001d8c:	f001 f936 	bl	8002ffc <HAL_Delay>
    //ILI9341_TouchUnselect();
    ILI9341_Init();
 8001d90:	f7ff fc5c 	bl	800164c <ILI9341_Init>

    HAL_Delay(100);
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	f001 f931 	bl	8002ffc <HAL_Delay>

    //ILI9341_DrawImage((ILI9341_WIDTH - 200) / 2, (ILI9341_HEIGHT - 200) / 2, 100, 100, (const uint8_t*)logo_100_100);

    //HAL_Delay(3000);

    ILI9341_FillScreen(ILI9341_WHITE);
 8001d9a:	4c0a      	ldr	r4, [pc, #40]	; (8001dc4 <init+0x4c>)
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	f7ff fe1f 	bl	80019e0 <ILI9341_FillScreen>

    HAL_Delay(100);
 8001da2:	2064      	movs	r0, #100	; 0x64
 8001da4:	f001 f92a 	bl	8002ffc <HAL_Delay>
    ILI9341_WriteString1(100, 12*10, "DEHYDRATOR", ILI9341_BLACK, ILI9341_WHITE);
 8001da8:	9400      	str	r4, [sp, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <init+0x50>)
 8001dae:	2178      	movs	r1, #120	; 0x78
 8001db0:	2064      	movs	r0, #100	; 0x64
 8001db2:	f7ff fd85 	bl	80018c0 <ILI9341_WriteString1>

    HAL_Delay(100);
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f001 f920 	bl	8002ffc <HAL_Delay>
}
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	48000400 	.word	0x48000400
 8001dc4:	0000ffff 	.word	0x0000ffff
 8001dc8:	080066cc 	.word	0x080066cc

08001dcc <main>:
{
 8001dcc:	b510      	push	{r4, lr}
  HAL_Init();
 8001dce:	f001 f8f3 	bl	8002fb8 <HAL_Init>
  SystemClock_Config();
 8001dd2:	f7ff ff99 	bl	8001d08 <SystemClock_Config>
  MX_GPIO_Init();
 8001dd6:	f7ff fe27 	bl	8001a28 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001dda:	f7ff febf 	bl	8001b5c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001dde:	f7ff fedf 	bl	8001ba0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001de2:	f7ff ff0d 	bl	8001c00 <MX_TIM1_Init>
  MX_TIM15_Init();
 8001de6:	f7ff ff3b 	bl	8001c60 <MX_TIM15_Init>
  MX_I2C1_Init();
 8001dea:	f7ff ff6b 	bl	8001cc4 <MX_I2C1_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001dee:	480a      	ldr	r0, [pc, #40]	; (8001e18 <main+0x4c>)
 8001df0:	f002 fea4 	bl	8004b3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8001df4:	4809      	ldr	r0, [pc, #36]	; (8001e1c <main+0x50>)
 8001df6:	f002 fea1 	bl	8004b3c <HAL_TIM_Base_Start_IT>
  init();
 8001dfa:	f7ff ffbd 	bl	8001d78 <init>
  eeprom_init();
 8001dfe:	f7ff faf5 	bl	80013ec <eeprom_init>
	  MachineProcess();
 8001e02:	f000 fc21 	bl	8002648 <MachineProcess>
	  switchDetected();
 8001e06:	f000 fef3 	bl	8002bf0 <switchDetected>
	  DisplayPrint();
 8001e0a:	f000 fdff 	bl	8002a0c <DisplayPrint>
	  ReadTemperature(&Temperature_value);
 8001e0e:	4804      	ldr	r0, [pc, #16]	; (8001e20 <main+0x54>)
 8001e10:	f000 fba0 	bl	8002554 <ReadTemperature>
 8001e14:	e7f5      	b.n	8001e02 <main+0x36>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	20000434 	.word	0x20000434
 8001e1c:	200002f4 	.word	0x200002f4
 8001e20:	20000204 	.word	0x20000204

08001e24 <HAL_TIM_PeriodElapsedCallback>:
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	0004      	movs	r4, r0

	if(htim->Instance == TIM3)
 8001e28:	4ba9      	ldr	r3, [pc, #676]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e2a:	6802      	ldr	r2, [r0, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d00e      	beq.n	8001e4e <HAL_TIM_PeriodElapsedCallback+0x2a>
		canister_check.kesari_canister = (HAL_GPIO_ReadPin(PROX_KESARI_GPIO_Port, PROX_KESARI_Pin) == RESET)?0:1;

	}
//	machineState=water_temp_check;

if(Temperature_value > 70){
 8001e30:	4ba8      	ldr	r3, [pc, #672]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b46      	cmp	r3, #70	; 0x46
 8001e38:	d841      	bhi.n	8001ebe <HAL_TIM_PeriodElapsedCallback+0x9a>
	HAL_GPIO_WritePin(SSR_RELAY_GPIO_Port, SSR_RELAY_Pin, RESET);
//	machineState=water_heated;
}
else if(Temperature_value < 70)
 8001e3a:	4ba6      	ldr	r3, [pc, #664]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b45      	cmp	r3, #69	; 0x45
 8001e42:	d943      	bls.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0xa8>
{
//	machineState=water_heating;
	HAL_GPIO_WritePin(SSR_RELAY_GPIO_Port, SSR_RELAY_Pin, SET);
}

	if(htim->Instance == TIM15)
 8001e44:	6822      	ldr	r2, [r4, #0]
 8001e46:	4ba4      	ldr	r3, [pc, #656]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d046      	beq.n	8001eda <HAL_TIM_PeriodElapsedCallback+0xb6>
				keyFlags.upFlag = 0;
				switchKeys.UP = 0;
			}
//		}
	}
}
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
		if(HAL_GPIO_ReadPin(IR_LEVEL_SNR_GPIO_Port, IR_LEVEL_SNR_Pin) == 0)
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	48a2      	ldr	r0, [pc, #648]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e52:	f001 fa05 	bl	8003260 <HAL_GPIO_ReadPin>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d123      	bne.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x7e>
			level_f=0;
 8001e5a:	4ba1      	ldr	r3, [pc, #644]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(INLET_MOTOR_GPIO_Port, INLET_MOTOR_Pin, RESET);
 8001e60:	2140      	movs	r1, #64	; 0x40
 8001e62:	489e      	ldr	r0, [pc, #632]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e64:	f001 fa03 	bl	800326e <HAL_GPIO_WritePin>
		canister_check.upma_canister = (HAL_GPIO_ReadPin(PROX_UPMA_GPIO_Port, PROX_UPMA_Pin) == RESET)?0:1;
 8001e68:	4d9e      	ldr	r5, [pc, #632]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0028      	movs	r0, r5
 8001e6e:	f001 f9f7 	bl	8003260 <HAL_GPIO_ReadPin>
 8001e72:	1e43      	subs	r3, r0, #1
 8001e74:	4198      	sbcs	r0, r3
 8001e76:	b2c0      	uxtb	r0, r0
 8001e78:	4e9b      	ldr	r6, [pc, #620]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e7a:	7030      	strb	r0, [r6, #0]
		canister_check.poha_canister = (HAL_GPIO_ReadPin(PROX_POHA_GPIO_Port, PROX_POHA_Pin) == RESET)?0:1;
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	0049      	lsls	r1, r1, #1
 8001e80:	0028      	movs	r0, r5
 8001e82:	f001 f9ed 	bl	8003260 <HAL_GPIO_ReadPin>
 8001e86:	1e43      	subs	r3, r0, #1
 8001e88:	4198      	sbcs	r0, r3
 8001e8a:	b2c0      	uxtb	r0, r0
 8001e8c:	7070      	strb	r0, [r6, #1]
		canister_check.kesari_canister = (HAL_GPIO_ReadPin(PROX_KESARI_GPIO_Port, PROX_KESARI_Pin) == RESET)?0:1;
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0089      	lsls	r1, r1, #2
 8001e92:	0028      	movs	r0, r5
 8001e94:	f001 f9e4 	bl	8003260 <HAL_GPIO_ReadPin>
 8001e98:	1e43      	subs	r3, r0, #1
 8001e9a:	4198      	sbcs	r0, r3
 8001e9c:	b2c0      	uxtb	r0, r0
 8001e9e:	70b0      	strb	r0, [r6, #2]
 8001ea0:	e7c6      	b.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0xc>
		else if(HAL_GPIO_ReadPin(IR_LEVEL_SNR_GPIO_Port, IR_LEVEL_SNR_Pin) == 1)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	488d      	ldr	r0, [pc, #564]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ea6:	f001 f9db 	bl	8003260 <HAL_GPIO_ReadPin>
 8001eaa:	2801      	cmp	r0, #1
 8001eac:	d1dc      	bne.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x44>
			level_f=1;
 8001eae:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(INLET_MOTOR_GPIO_Port, INLET_MOTOR_Pin, SET);
 8001eb4:	2140      	movs	r1, #64	; 0x40
 8001eb6:	4889      	ldr	r0, [pc, #548]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001eb8:	f001 f9d9 	bl	800326e <HAL_GPIO_WritePin>
 8001ebc:	e7d4      	b.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x44>
	HAL_GPIO_WritePin(SSR_RELAY_GPIO_Port, SSR_RELAY_Pin, RESET);
 8001ebe:	2090      	movs	r0, #144	; 0x90
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	05c0      	lsls	r0, r0, #23
 8001ec6:	f001 f9d2 	bl	800326e <HAL_GPIO_WritePin>
 8001eca:	e7bb      	b.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x20>
	HAL_GPIO_WritePin(SSR_RELAY_GPIO_Port, SSR_RELAY_Pin, SET);
 8001ecc:	2090      	movs	r0, #144	; 0x90
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	05c0      	lsls	r0, r0, #23
 8001ed4:	f001 f9cb 	bl	800326e <HAL_GPIO_WritePin>
 8001ed8:	e7b4      	b.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x20>
			if((HAL_GPIO_ReadPin(DOWN_DIRECTION_GPIO_Port,DOWN_DIRECTION_Pin) == GPIO_PIN_RESET) && HAL_GPIO_ReadPin(UP_DIRECTION_GPIO_Port,UP_DIRECTION_Pin) == GPIO_PIN_RESET)
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	01c9      	lsls	r1, r1, #7
 8001ede:	487f      	ldr	r0, [pc, #508]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ee0:	f001 f9be 	bl	8003260 <HAL_GPIO_ReadPin>
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d045      	beq.n	8001f74 <HAL_TIM_PeriodElapsedCallback+0x150>
				switchKeys.PROCESS_CNT = 0;
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4b80      	ldr	r3, [pc, #512]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001eec:	2100      	movs	r1, #0
 8001eee:	80d9      	strh	r1, [r3, #6]
				keyFlags.upDownPressed = 0;
 8001ef0:	497f      	ldr	r1, [pc, #508]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001ef2:	780b      	ldrb	r3, [r1, #0]
 8001ef4:	2020      	movs	r0, #32
 8001ef6:	4383      	bics	r3, r0
 8001ef8:	700b      	strb	r3, [r1, #0]
				displayProcessCnt = 0;
 8001efa:	4b7e      	ldr	r3, [pc, #504]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001efc:	701a      	strb	r2, [r3, #0]
				cntButtonPressed = 0;
 8001efe:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001f00:	701a      	strb	r2, [r3, #0]
			if((HAL_GPIO_ReadPin(UP_DIRECTION_GPIO_Port,UP_DIRECTION_Pin) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(OK_PIN_GPIO_Port,OK_PIN_Pin)  == GPIO_PIN_RESET))
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0189      	lsls	r1, r1, #6
 8001f06:	4875      	ldr	r0, [pc, #468]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f08:	f001 f9aa 	bl	8003260 <HAL_GPIO_ReadPin>
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	d053      	beq.n	8001fb8 <HAL_TIM_PeriodElapsedCallback+0x194>
				switchKeys.EEPROM_RESET = 0;
 8001f10:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	811a      	strh	r2, [r3, #8]
				keyFlags.resetFlag = 0;
 8001f16:	4a76      	ldr	r2, [pc, #472]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001f18:	7813      	ldrb	r3, [r2, #0]
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	438b      	bics	r3, r1
 8001f1e:	7013      	strb	r3, [r2, #0]
				ResetButtonPressed = 0;
 8001f20:	2200      	movs	r2, #0
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001f24:	701a      	strb	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(DOWN_DIRECTION_GPIO_Port,DOWN_DIRECTION_Pin) == GPIO_PIN_RESET)
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	01c9      	lsls	r1, r1, #7
 8001f2a:	486c      	ldr	r0, [pc, #432]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f2c:	f001 f998 	bl	8003260 <HAL_GPIO_ReadPin>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d15f      	bne.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				switchKeys.DOWN++;
 8001f34:	4a6d      	ldr	r2, [pc, #436]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f36:	8893      	ldrh	r3, [r2, #4]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	8093      	strh	r3, [r2, #4]
				if((switchKeys.DOWN >= 2) && (keyFlags.downFlag == 0) && (cntButtonPressed == 0))
 8001f3e:	8893      	ldrh	r3, [r2, #4]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d95e      	bls.n	8002004 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8001f46:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	075b      	lsls	r3, r3, #29
 8001f4c:	d45a      	bmi.n	8002004 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d156      	bne.n	8002004 <HAL_TIM_PeriodElapsedCallback+0x1e0>
					down_detected = 1;
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
					switchKeys.DOWN = 0;
 8001f5c:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	809a      	strh	r2, [r3, #4]
					keyFlags.downFlag = 1;
 8001f62:	4a63      	ldr	r2, [pc, #396]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001f64:	7813      	ldrb	r3, [r2, #0]
 8001f66:	2104      	movs	r1, #4
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	7013      	strb	r3, [r2, #0]
					displayProcessCnt = 0;
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e047      	b.n	8002004 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			if((HAL_GPIO_ReadPin(DOWN_DIRECTION_GPIO_Port,DOWN_DIRECTION_Pin) == GPIO_PIN_RESET) && HAL_GPIO_ReadPin(UP_DIRECTION_GPIO_Port,UP_DIRECTION_Pin) == GPIO_PIN_RESET)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0189      	lsls	r1, r1, #6
 8001f78:	4858      	ldr	r0, [pc, #352]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f7a:	f001 f971 	bl	8003260 <HAL_GPIO_ReadPin>
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	d1b2      	bne.n	8001ee8 <HAL_TIM_PeriodElapsedCallback+0xc4>
				switchKeys.PROCESS_CNT++;
 8001f82:	4a5a      	ldr	r2, [pc, #360]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f84:	88d3      	ldrh	r3, [r2, #6]
 8001f86:	3301      	adds	r3, #1
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	80d3      	strh	r3, [r2, #6]
				cntButtonPressed = 1;
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	7019      	strb	r1, [r3, #0]
				if(switchKeys.PROCESS_CNT >=  50)
 8001f92:	88d3      	ldrh	r3, [r2, #6]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b31      	cmp	r3, #49	; 0x31
 8001f98:	d9b3      	bls.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0xde>
					switchKeys.PROCESS_CNT = 0;
 8001f9a:	0013      	movs	r3, r2
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	80da      	strh	r2, [r3, #6]
					keyFlags.upDownPressed = 1;
 8001fa0:	4a53      	ldr	r2, [pc, #332]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001fa2:	7813      	ldrb	r3, [r2, #0]
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	7013      	strb	r3, [r2, #0]
					displayProcessCnt = 1;
 8001faa:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
					machineState = displayCnt;
 8001fb0:	4b54      	ldr	r3, [pc, #336]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001fb2:	3209      	adds	r2, #9
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e7a4      	b.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0xde>
			if((HAL_GPIO_ReadPin(UP_DIRECTION_GPIO_Port,UP_DIRECTION_Pin) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(OK_PIN_GPIO_Port,OK_PIN_Pin)  == GPIO_PIN_RESET))
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	484a      	ldr	r0, [pc, #296]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001fbc:	f001 f950 	bl	8003260 <HAL_GPIO_ReadPin>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d1a5      	bne.n	8001f10 <HAL_TIM_PeriodElapsedCallback+0xec>
				switchKeys.EEPROM_RESET++;
 8001fc4:	4a49      	ldr	r2, [pc, #292]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001fc6:	8913      	ldrh	r3, [r2, #8]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	8113      	strh	r3, [r2, #8]
				ResetButtonPressed = 1;
 8001fce:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	7019      	strb	r1, [r3, #0]
				if(switchKeys.EEPROM_RESET >=  100)
 8001fd4:	8913      	ldrh	r3, [r2, #8]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b63      	cmp	r3, #99	; 0x63
 8001fda:	d9a4      	bls.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x102>
					switchKeys.EEPROM_RESET = 0;
 8001fdc:	0013      	movs	r3, r2
 8001fde:	2200      	movs	r2, #0
 8001fe0:	811a      	strh	r2, [r3, #8]
					keyFlags.resetFlag = 1;
 8001fe2:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001fe4:	7813      	ldrb	r3, [r2, #0]
 8001fe6:	2140      	movs	r1, #64	; 0x40
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	7013      	strb	r3, [r2, #0]
					machineState = reset_eeprom;
 8001fec:	4b45      	ldr	r3, [pc, #276]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001fee:	220b      	movs	r2, #11
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e798      	b.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x102>
				switchKeys.DOWN = 0;
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	809a      	strh	r2, [r3, #4]
				keyFlags.downFlag = 0;
 8001ffa:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001ffc:	7813      	ldrb	r3, [r2, #0]
 8001ffe:	2104      	movs	r1, #4
 8002000:	438b      	bics	r3, r1
 8002002:	7013      	strb	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(OK_PIN_GPIO_Port,OK_PIN_Pin)  == GPIO_PIN_RESET)
 8002004:	2140      	movs	r1, #64	; 0x40
 8002006:	4837      	ldr	r0, [pc, #220]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002008:	f001 f92a 	bl	8003260 <HAL_GPIO_ReadPin>
 800200c:	2800      	cmp	r0, #0
 800200e:	d11e      	bne.n	800204e <HAL_TIM_PeriodElapsedCallback+0x22a>
				switchKeys.OK++;
 8002010:	4a36      	ldr	r2, [pc, #216]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002012:	8813      	ldrh	r3, [r2, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	8013      	strh	r3, [r2, #0]
				if((switchKeys.OK >= 2) && (keyFlags.okFlag == 0)  && (ResetButtonPressed == 0))
 800201a:	8813      	ldrh	r3, [r2, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d91d      	bls.n	800205e <HAL_TIM_PeriodElapsedCallback+0x23a>
 8002022:	4b33      	ldr	r3, [pc, #204]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	079b      	lsls	r3, r3, #30
 8002028:	d419      	bmi.n	800205e <HAL_TIM_PeriodElapsedCallback+0x23a>
 800202a:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_TIM_PeriodElapsedCallback+0x23a>
					keyFlags.okFlag = 1;
 8002032:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002034:	7813      	ldrb	r3, [r2, #0]
 8002036:	2102      	movs	r1, #2
 8002038:	430b      	orrs	r3, r1
 800203a:	7013      	strb	r3, [r2, #0]
					ok_detected = 1;
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
					switchKeys.OK = 0;
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002044:	2200      	movs	r2, #0
 8002046:	801a      	strh	r2, [r3, #0]
					displayProcessCnt = 0;
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e007      	b.n	800205e <HAL_TIM_PeriodElapsedCallback+0x23a>
				keyFlags.okFlag = 0;
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002050:	7813      	ldrb	r3, [r2, #0]
 8002052:	2102      	movs	r1, #2
 8002054:	438b      	bics	r3, r1
 8002056:	7013      	strb	r3, [r2, #0]
				switchKeys.OK = 0;
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800205a:	2200      	movs	r2, #0
 800205c:	801a      	strh	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(UP_DIRECTION_GPIO_Port,UP_DIRECTION_Pin) == GPIO_PIN_RESET)
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	0189      	lsls	r1, r1, #6
 8002062:	481e      	ldr	r0, [pc, #120]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002064:	f001 f8fc 	bl	8003260 <HAL_GPIO_ReadPin>
 8002068:	2800      	cmp	r0, #0
 800206a:	d127      	bne.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x298>
				switchKeys.UP++;
 800206c:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800206e:	8853      	ldrh	r3, [r2, #2]
 8002070:	3301      	adds	r3, #1
 8002072:	b29b      	uxth	r3, r3
 8002074:	8053      	strh	r3, [r2, #2]
				if((switchKeys.UP >= 2) && (keyFlags.upFlag == 0) && (cntButtonPressed == 0) && (ResetButtonPressed == 0))
 8002076:	8853      	ldrh	r3, [r2, #2]
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d800      	bhi.n	8002080 <HAL_TIM_PeriodElapsedCallback+0x25c>
 800207e:	e6e5      	b.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x28>
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	07db      	lsls	r3, r3, #31
 8002086:	d500      	bpl.n	800208a <HAL_TIM_PeriodElapsedCallback+0x266>
 8002088:	e6e0      	b.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x28>
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d000      	beq.n	8002094 <HAL_TIM_PeriodElapsedCallback+0x270>
 8002092:	e6db      	b.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x28>
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d000      	beq.n	800209e <HAL_TIM_PeriodElapsedCallback+0x27a>
 800209c:	e6d6      	b.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x28>
					keyFlags.upFlag = 1;
 800209e:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80020a0:	7813      	ldrb	r3, [r2, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	430b      	orrs	r3, r1
 80020a6:	7013      	strb	r3, [r2, #0]
					switchKeys.UP = 0;
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	805a      	strh	r2, [r3, #2]
					up_detected = 1;
 80020ae:	3201      	adds	r2, #1
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80020b2:	701a      	strb	r2, [r3, #0]
					displayProcessCnt = 0;
 80020b4:	2200      	movs	r2, #0
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e6c7      	b.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x28>
				keyFlags.upFlag = 0;
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80020be:	7813      	ldrb	r3, [r2, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	438b      	bics	r3, r1
 80020c4:	7013      	strb	r3, [r2, #0]
				switchKeys.UP = 0;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	805a      	strh	r2, [r3, #2]
}
 80020cc:	e6be      	b.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x28>
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40000400 	.word	0x40000400
 80020d4:	20000204 	.word	0x20000204
 80020d8:	40014000 	.word	0x40014000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	20000096 	.word	0x20000096
 80020e4:	48000800 	.word	0x48000800
 80020e8:	2000054c 	.word	0x2000054c
 80020ec:	200005c0 	.word	0x200005c0
 80020f0:	200004f4 	.word	0x200004f4
 80020f4:	200001d2 	.word	0x200001d2
 80020f8:	200001f3 	.word	0x200001f3
 80020fc:	200000c2 	.word	0x200000c2
 8002100:	2000020b 	.word	0x2000020b
 8002104:	200000a1 	.word	0x200000a1
 8002108:	20000208 	.word	0x20000208
 800210c:	2000020a 	.word	0x2000020a

08002110 <reverse2>:
		driveMotor(upDirection);
	}
}

void reverse2(char *str,int len)
{
 8002110:	b570      	push	{r4, r5, r6, lr}
    int i = 0,j = len-1,temp;
 8002112:	3901      	subs	r1, #1
 8002114:	2300      	movs	r3, #0

    while(i<j)
 8002116:	e007      	b.n	8002128 <reverse2+0x18>
    {
        temp = str[i];
 8002118:	18c4      	adds	r4, r0, r3
 800211a:	7825      	ldrb	r5, [r4, #0]
        str[i] = str[j];
 800211c:	1842      	adds	r2, r0, r1
 800211e:	7816      	ldrb	r6, [r2, #0]
 8002120:	7026      	strb	r6, [r4, #0]
        str[j] = temp;
 8002122:	7015      	strb	r5, [r2, #0]
        i++;j--;
 8002124:	3301      	adds	r3, #1
 8002126:	3901      	subs	r1, #1
    while(i<j)
 8002128:	428b      	cmp	r3, r1
 800212a:	dbf5      	blt.n	8002118 <reverse2+0x8>
    }
}
 800212c:	bd70      	pop	{r4, r5, r6, pc}

0800212e <intToStr>:

int intToStr(int x,char str[],int d)
{
 800212e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002130:	46c6      	mov	lr, r8
 8002132:	b500      	push	{lr}
 8002134:	0005      	movs	r5, r0
 8002136:	000e      	movs	r6, r1
 8002138:	4690      	mov	r8, r2
    int i = 0;
 800213a:	2400      	movs	r4, #0

    while(x)
 800213c:	e00c      	b.n	8002158 <intToStr+0x2a>
    {
        str[i++] = (x%10) + '0';
 800213e:	210a      	movs	r1, #10
 8002140:	0028      	movs	r0, r5
 8002142:	f7fe f951 	bl	80003e8 <__aeabi_idivmod>
 8002146:	1c67      	adds	r7, r4, #1
 8002148:	3130      	adds	r1, #48	; 0x30
 800214a:	5531      	strb	r1, [r6, r4]
        x = x/10;
 800214c:	210a      	movs	r1, #10
 800214e:	0028      	movs	r0, r5
 8002150:	f7fe f864 	bl	800021c <__divsi3>
 8002154:	0005      	movs	r5, r0
        str[i++] = (x%10) + '0';
 8002156:	003c      	movs	r4, r7
    while(x)
 8002158:	2d00      	cmp	r5, #0
 800215a:	d1f0      	bne.n	800213e <intToStr+0x10>
 800215c:	e002      	b.n	8002164 <intToStr+0x36>
    }

    while(i < d)
        str[i++] = '0';
 800215e:	2330      	movs	r3, #48	; 0x30
 8002160:	5533      	strb	r3, [r6, r4]
 8002162:	3401      	adds	r4, #1
    while(i < d)
 8002164:	4544      	cmp	r4, r8
 8002166:	dbfa      	blt.n	800215e <intToStr+0x30>

    reverse2(str,i);
 8002168:	0021      	movs	r1, r4
 800216a:	0030      	movs	r0, r6
 800216c:	f7ff ffd0 	bl	8002110 <reverse2>
    str[i] = '\0';
 8002170:	1936      	adds	r6, r6, r4
 8002172:	2300      	movs	r3, #0
 8002174:	7033      	strb	r3, [r6, #0]
    return i;
}
 8002176:	0020      	movs	r0, r4
 8002178:	bc04      	pop	{r2}
 800217a:	4690      	mov	r8, r2
 800217c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002180 <STEPPER_ROTATE>:
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , RESET);


}
void STEPPER_ROTATE(unsigned int RPM, unsigned int Step, uint8_t Direction, uint8_t MotorSel)
{
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	0005      	movs	r5, r0
 8002184:	000c      	movs	r4, r1

	switch(MotorSel){
 8002186:	2b02      	cmp	r3, #2
 8002188:	d02d      	beq.n	80021e6 <STEPPER_ROTATE+0x66>
 800218a:	d90e      	bls.n	80021aa <STEPPER_ROTATE+0x2a>
 800218c:	2b03      	cmp	r3, #3
 800218e:	d034      	beq.n	80021fa <STEPPER_ROTATE+0x7a>
 8002190:	2b04      	cmp	r3, #4
 8002192:	d114      	bne.n	80021be <STEPPER_ROTATE+0x3e>
//		HAL_GPIO_WritePin(CHAMBER3_MOTOR_DIR_GPIO_Port, CHAMBER3_MOTOR_DIR_Pin, 0);
	Chamber3_flag=1;

	break;

	case CHAMBER4 : HAL_GPIO_WritePin(STEPPER_4_EN_GPIO_Port, STEPPER_4_EN_Pin, 1);
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	2090      	movs	r0, #144	; 0x90
 8002198:	2201      	movs	r2, #1
 800219a:	00c9      	lsls	r1, r1, #3
 800219c:	05c0      	lsls	r0, r0, #23
 800219e:	f001 f866 	bl	800326e <HAL_GPIO_WritePin>
//	if(Direction == CLOCKWISE)
//		HAL_GPIO_WritePin(CHAMBER4_MOTOR_DIR_GPIO_Port, CHAMBER4_MOTOR_DIR_Pin, 1);
//	else if(Direction == ANTICLOCKWISE)
//		HAL_GPIO_WritePin(CHAMBER4_MOTOR_DIR_GPIO_Port, CHAMBER4_MOTOR_DIR_Pin, 0);
	Chamber4_flag=1;
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <STEPPER_ROTATE+0x158>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]

	break;
 80021a8:	e009      	b.n	80021be <STEPPER_ROTATE+0x3e>
	switch(MotorSel){
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <STEPPER_ROTATE+0x3e>
	case CHAMBER1   : HAL_GPIO_WritePin(STEPPER_1_EN_GPIO_Port, STEPPER_1_EN_Pin, 1);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2140      	movs	r1, #64	; 0x40
 80021b2:	484a      	ldr	r0, [pc, #296]	; (80022dc <STEPPER_ROTATE+0x15c>)
 80021b4:	f001 f85b 	bl	800326e <HAL_GPIO_WritePin>
	Chamber1_flag=1;
 80021b8:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <STEPPER_ROTATE+0x160>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
	default : break;
	}

	step_angle=HALF_STEP;
 80021be:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <STEPPER_ROTATE+0x164>)
 80021c0:	4a49      	ldr	r2, [pc, #292]	; (80022e8 <STEPPER_ROTATE+0x168>)
 80021c2:	601a      	str	r2, [r3, #0]

		TIM1_Steps=Step*2;
 80021c4:	0064      	lsls	r4, r4, #1
 80021c6:	4b49      	ldr	r3, [pc, #292]	; (80022ec <STEPPER_ROTATE+0x16c>)
 80021c8:	601c      	str	r4, [r3, #0]
		TIM1_flag=0;
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <STEPPER_ROTATE+0x170>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]


		HAL_TIM_Base_Start_IT(&htim1);
 80021d0:	4848      	ldr	r0, [pc, #288]	; (80022f4 <STEPPER_ROTATE+0x174>)
 80021d2:	f002 fcb3 	bl	8004b3c <HAL_TIM_Base_Start_IT>
		if(RPM>=300){
 80021d6:	232c      	movs	r3, #44	; 0x2c
 80021d8:	33ff      	adds	r3, #255	; 0xff
 80021da:	429d      	cmp	r5, r3
 80021dc:	d94e      	bls.n	800227c <STEPPER_ROTATE+0xfc>
			for(RPM_COUNT=1;RPM_COUNT<RPM;RPM_COUNT++){
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <STEPPER_ROTATE+0x178>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	801a      	strh	r2, [r3, #0]
 80021e4:	e046      	b.n	8002274 <STEPPER_ROTATE+0xf4>
	case CHAMBER2   : HAL_GPIO_WritePin(STEPPER_2_EN_GPIO_Port, STEPPER_2_EN_Pin, 1);
 80021e6:	2090      	movs	r0, #144	; 0x90
 80021e8:	2201      	movs	r2, #1
 80021ea:	2108      	movs	r1, #8
 80021ec:	05c0      	lsls	r0, r0, #23
 80021ee:	f001 f83e 	bl	800326e <HAL_GPIO_WritePin>
	Chamber2_flag=1;
 80021f2:	4b42      	ldr	r3, [pc, #264]	; (80022fc <STEPPER_ROTATE+0x17c>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
	break;
 80021f8:	e7e1      	b.n	80021be <STEPPER_ROTATE+0x3e>
	case CHAMBER3 : HAL_GPIO_WritePin(STEPPER_3_EN_GPIO_Port, STEPPER_3_EN_Pin, 1);
 80021fa:	2201      	movs	r2, #1
 80021fc:	2110      	movs	r1, #16
 80021fe:	4840      	ldr	r0, [pc, #256]	; (8002300 <STEPPER_ROTATE+0x180>)
 8002200:	f001 f835 	bl	800326e <HAL_GPIO_WritePin>
	Chamber3_flag=1;
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <STEPPER_ROTATE+0x184>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
	break;
 800220a:	e7d8      	b.n	80021be <STEPPER_ROTATE+0x3e>

				temp1=(RPM_COUNT*360)/(step_angle*60);
 800220c:	0053      	lsls	r3, r2, #1
 800220e:	189a      	adds	r2, r3, r2
 8002210:	0113      	lsls	r3, r2, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	00dc      	lsls	r4, r3, #3
 8002216:	493c      	ldr	r1, [pc, #240]	; (8002308 <STEPPER_ROTATE+0x188>)
 8002218:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <STEPPER_ROTATE+0x164>)
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	f7fe fbae 	bl	800097c <__aeabi_fmul>
 8002220:	1c06      	adds	r6, r0, #0
 8002222:	0020      	movs	r0, r4
 8002224:	f7fe fec0 	bl	8000fa8 <__aeabi_i2f>
 8002228:	1c31      	adds	r1, r6, #0
 800222a:	f7fe fa95 	bl	8000758 <__aeabi_fdiv>
 800222e:	4c37      	ldr	r4, [pc, #220]	; (800230c <STEPPER_ROTATE+0x18c>)
 8002230:	6020      	str	r0, [r4, #0]
				temp1=temp1*2;
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	1c01      	adds	r1, r0, #0
 8002236:	f7fe f8f5 	bl	8000424 <__aeabi_fadd>
 800223a:	6020      	str	r0, [r4, #0]
				frequency=(int)temp1;
 800223c:	6820      	ldr	r0, [r4, #0]
 800223e:	f7fe fe93 	bl	8000f68 <__aeabi_f2iz>
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <STEPPER_ROTATE+0x190>)
 8002244:	6018      	str	r0, [r3, #0]
				prescaler=(int)Timer_clock/(period*frequency);
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2164      	movs	r1, #100	; 0x64
 800224a:	4359      	muls	r1, r3
 800224c:	4831      	ldr	r0, [pc, #196]	; (8002314 <STEPPER_ROTATE+0x194>)
 800224e:	f7fd ffe5 	bl	800021c <__divsi3>
 8002252:	4a31      	ldr	r2, [pc, #196]	; (8002318 <STEPPER_ROTATE+0x198>)
 8002254:	6010      	str	r0, [r2, #0]
				TIM1->CCR1=20;
 8002256:	4b31      	ldr	r3, [pc, #196]	; (800231c <STEPPER_ROTATE+0x19c>)
 8002258:	2114      	movs	r1, #20
 800225a:	6359      	str	r1, [r3, #52]	; 0x34
				TIM1->ARR=(period-1);
 800225c:	314f      	adds	r1, #79	; 0x4f
 800225e:	62d9      	str	r1, [r3, #44]	; 0x2c
				TIM1->PSC=(prescaler-1);
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	3a01      	subs	r2, #1
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(1);
 8002266:	2001      	movs	r0, #1
 8002268:	f000 fec8 	bl	8002ffc <HAL_Delay>
			for(RPM_COUNT=1;RPM_COUNT<RPM;RPM_COUNT++){
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <STEPPER_ROTATE+0x178>)
 800226e:	8813      	ldrh	r3, [r2, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	8013      	strh	r3, [r2, #0]
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <STEPPER_ROTATE+0x178>)
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	42aa      	cmp	r2, r5
 800227a:	d3c7      	bcc.n	800220c <STEPPER_ROTATE+0x8c>

			}
		}
		temp1=(RPM*360)/(step_angle*60);
 800227c:	006b      	lsls	r3, r5, #1
 800227e:	195d      	adds	r5, r3, r5
 8002280:	012b      	lsls	r3, r5, #4
 8002282:	1b5d      	subs	r5, r3, r5
 8002284:	00ec      	lsls	r4, r5, #3
 8002286:	4920      	ldr	r1, [pc, #128]	; (8002308 <STEPPER_ROTATE+0x188>)
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <STEPPER_ROTATE+0x164>)
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	f7fe fb76 	bl	800097c <__aeabi_fmul>
 8002290:	1c05      	adds	r5, r0, #0
 8002292:	0020      	movs	r0, r4
 8002294:	f7fe fed2 	bl	800103c <__aeabi_ui2f>
 8002298:	1c29      	adds	r1, r5, #0
 800229a:	f7fe fa5d 	bl	8000758 <__aeabi_fdiv>
 800229e:	4c1b      	ldr	r4, [pc, #108]	; (800230c <STEPPER_ROTATE+0x18c>)
 80022a0:	6020      	str	r0, [r4, #0]
		temp1=temp1*2;
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	1c01      	adds	r1, r0, #0
 80022a6:	f7fe f8bd 	bl	8000424 <__aeabi_fadd>
 80022aa:	6020      	str	r0, [r4, #0]
		frequency=(int)temp1;
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	f7fe fe5b 	bl	8000f68 <__aeabi_f2iz>
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <STEPPER_ROTATE+0x190>)
 80022b4:	6018      	str	r0, [r3, #0]
		prescaler=(int)Timer_clock/(period*frequency);
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2164      	movs	r1, #100	; 0x64
 80022ba:	4359      	muls	r1, r3
 80022bc:	4815      	ldr	r0, [pc, #84]	; (8002314 <STEPPER_ROTATE+0x194>)
 80022be:	f7fd ffad 	bl	800021c <__divsi3>
 80022c2:	4a15      	ldr	r2, [pc, #84]	; (8002318 <STEPPER_ROTATE+0x198>)
 80022c4:	6010      	str	r0, [r2, #0]
		TIM1->CCR1=20;
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <STEPPER_ROTATE+0x19c>)
 80022c8:	2114      	movs	r1, #20
 80022ca:	6359      	str	r1, [r3, #52]	; 0x34
		TIM1->ARR=(period-1);
 80022cc:	314f      	adds	r1, #79	; 0x4f
 80022ce:	62d9      	str	r1, [r3, #44]	; 0x2c
		TIM1->PSC=(prescaler-1);
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	3a01      	subs	r2, #1
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28

}
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	20000094 	.word	0x20000094
 80022dc:	48001400 	.word	0x48001400
 80022e0:	20000091 	.word	0x20000091
 80022e4:	20000098 	.word	0x20000098
 80022e8:	3f666666 	.word	0x3f666666
 80022ec:	20000540 	.word	0x20000540
 80022f0:	20000095 	.word	0x20000095
 80022f4:	200004f8 	.word	0x200004f8
 80022f8:	200004ec 	.word	0x200004ec
 80022fc:	20000092 	.word	0x20000092
 8002300:	48000400 	.word	0x48000400
 8002304:	20000093 	.word	0x20000093
 8002308:	42700000 	.word	0x42700000
 800230c:	200004cc 	.word	0x200004cc
 8002310:	20000214 	.word	0x20000214
 8002314:	0280de80 	.word	0x0280de80
 8002318:	20000404 	.word	0x20000404
 800231c:	40012c00 	.word	0x40012c00

08002320 <DISPANSE_UPMA>:
{
 8002320:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , SET);
 8002322:	2201      	movs	r2, #1
 8002324:	2108      	movs	r1, #8
 8002326:	4819      	ldr	r0, [pc, #100]	; (800238c <DISPANSE_UPMA+0x6c>)
 8002328:	f000 ffa1 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(300, 11800, 1, CHAMBER4);//160ml
 800232c:	2096      	movs	r0, #150	; 0x96
 800232e:	2304      	movs	r3, #4
 8002330:	2201      	movs	r2, #1
 8002332:	4917      	ldr	r1, [pc, #92]	; (8002390 <DISPANSE_UPMA+0x70>)
 8002334:	0040      	lsls	r0, r0, #1
 8002336:	f7ff ff23 	bl	8002180 <STEPPER_ROTATE>
	while(Chamber4_flag);
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <DISPANSE_UPMA+0x74>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1fb      	bne.n	800233a <DISPANSE_UPMA+0x1a>
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	2108      	movs	r1, #8
 8002346:	4811      	ldr	r0, [pc, #68]	; (800238c <DISPANSE_UPMA+0x6c>)
 8002348:	f000 ff91 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(100, 10500, 1, CHAMBER1);
 800234c:	2301      	movs	r3, #1
 800234e:	2201      	movs	r2, #1
 8002350:	4911      	ldr	r1, [pc, #68]	; (8002398 <DISPANSE_UPMA+0x78>)
 8002352:	2064      	movs	r0, #100	; 0x64
 8002354:	f7ff ff14 	bl	8002180 <STEPPER_ROTATE>
	while(Chamber1_flag);
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <DISPANSE_UPMA+0x7c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1fb      	bne.n	8002358 <DISPANSE_UPMA+0x38>
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , SET);
 8002360:	2201      	movs	r2, #1
 8002362:	2108      	movs	r1, #8
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <DISPANSE_UPMA+0x6c>)
 8002366:	f000 ff82 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(300, 11800, 1, CHAMBER4);
 800236a:	2096      	movs	r0, #150	; 0x96
 800236c:	2304      	movs	r3, #4
 800236e:	2201      	movs	r2, #1
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <DISPANSE_UPMA+0x70>)
 8002372:	0040      	lsls	r0, r0, #1
 8002374:	f7ff ff04 	bl	8002180 <STEPPER_ROTATE>
	while(Chamber4_flag);
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <DISPANSE_UPMA+0x74>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1fb      	bne.n	8002378 <DISPANSE_UPMA+0x58>
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	2108      	movs	r1, #8
 8002384:	4801      	ldr	r0, [pc, #4]	; (800238c <DISPANSE_UPMA+0x6c>)
 8002386:	f000 ff72 	bl	800326e <HAL_GPIO_WritePin>
}
 800238a:	bd10      	pop	{r4, pc}
 800238c:	48000800 	.word	0x48000800
 8002390:	00002e18 	.word	0x00002e18
 8002394:	20000094 	.word	0x20000094
 8002398:	00002904 	.word	0x00002904
 800239c:	20000091 	.word	0x20000091

080023a0 <DISPANSE_KESARI>:
{
 80023a0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	2108      	movs	r1, #8
 80023a6:	4819      	ldr	r0, [pc, #100]	; (800240c <DISPANSE_KESARI+0x6c>)
 80023a8:	f000 ff61 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(300, 4950, 1, CHAMBER4);
 80023ac:	2096      	movs	r0, #150	; 0x96
 80023ae:	2304      	movs	r3, #4
 80023b0:	2201      	movs	r2, #1
 80023b2:	4917      	ldr	r1, [pc, #92]	; (8002410 <DISPANSE_KESARI+0x70>)
 80023b4:	0040      	lsls	r0, r0, #1
 80023b6:	f7ff fee3 	bl	8002180 <STEPPER_ROTATE>
	while(Chamber4_flag);
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <DISPANSE_KESARI+0x74>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1fb      	bne.n	80023ba <DISPANSE_KESARI+0x1a>
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2108      	movs	r1, #8
 80023c6:	4811      	ldr	r0, [pc, #68]	; (800240c <DISPANSE_KESARI+0x6c>)
 80023c8:	f000 ff51 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(100, 9250, 1, CHAMBER2);
 80023cc:	2302      	movs	r3, #2
 80023ce:	2201      	movs	r2, #1
 80023d0:	4911      	ldr	r1, [pc, #68]	; (8002418 <DISPANSE_KESARI+0x78>)
 80023d2:	2064      	movs	r0, #100	; 0x64
 80023d4:	f7ff fed4 	bl	8002180 <STEPPER_ROTATE>
	while(Chamber2_flag);
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <DISPANSE_KESARI+0x7c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1fb      	bne.n	80023d8 <DISPANSE_KESARI+0x38>
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2108      	movs	r1, #8
 80023e4:	4809      	ldr	r0, [pc, #36]	; (800240c <DISPANSE_KESARI+0x6c>)
 80023e6:	f000 ff42 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(300, 4950, 1, CHAMBER4);
 80023ea:	2096      	movs	r0, #150	; 0x96
 80023ec:	2304      	movs	r3, #4
 80023ee:	2201      	movs	r2, #1
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <DISPANSE_KESARI+0x70>)
 80023f2:	0040      	lsls	r0, r0, #1
 80023f4:	f7ff fec4 	bl	8002180 <STEPPER_ROTATE>
	while(Chamber4_flag);
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <DISPANSE_KESARI+0x74>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1fb      	bne.n	80023f8 <DISPANSE_KESARI+0x58>
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , RESET);
 8002400:	2200      	movs	r2, #0
 8002402:	2108      	movs	r1, #8
 8002404:	4801      	ldr	r0, [pc, #4]	; (800240c <DISPANSE_KESARI+0x6c>)
 8002406:	f000 ff32 	bl	800326e <HAL_GPIO_WritePin>
}
 800240a:	bd10      	pop	{r4, pc}
 800240c:	48000800 	.word	0x48000800
 8002410:	00001356 	.word	0x00001356
 8002414:	20000094 	.word	0x20000094
 8002418:	00002422 	.word	0x00002422
 800241c:	20000092 	.word	0x20000092

08002420 <DISPANSE_POHA>:
{
 8002420:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , SET);
 8002422:	2201      	movs	r2, #1
 8002424:	2108      	movs	r1, #8
 8002426:	4819      	ldr	r0, [pc, #100]	; (800248c <DISPANSE_POHA+0x6c>)
 8002428:	f000 ff21 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(300, 7130, 1, CHAMBER4);
 800242c:	2096      	movs	r0, #150	; 0x96
 800242e:	2304      	movs	r3, #4
 8002430:	2201      	movs	r2, #1
 8002432:	4917      	ldr	r1, [pc, #92]	; (8002490 <DISPANSE_POHA+0x70>)
 8002434:	0040      	lsls	r0, r0, #1
 8002436:	f7ff fea3 	bl	8002180 <STEPPER_ROTATE>
	while(Chamber4_flag);
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <DISPANSE_POHA+0x74>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1fb      	bne.n	800243a <DISPANSE_POHA+0x1a>
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2108      	movs	r1, #8
 8002446:	4811      	ldr	r0, [pc, #68]	; (800248c <DISPANSE_POHA+0x6c>)
 8002448:	f000 ff11 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(100, 11400, 1, CHAMBER3);
 800244c:	2303      	movs	r3, #3
 800244e:	2201      	movs	r2, #1
 8002450:	4911      	ldr	r1, [pc, #68]	; (8002498 <DISPANSE_POHA+0x78>)
 8002452:	2064      	movs	r0, #100	; 0x64
 8002454:	f7ff fe94 	bl	8002180 <STEPPER_ROTATE>
    while(Chamber3_flag);
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <DISPANSE_POHA+0x7c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1fb      	bne.n	8002458 <DISPANSE_POHA+0x38>
    HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , SET);
 8002460:	2201      	movs	r2, #1
 8002462:	2108      	movs	r1, #8
 8002464:	4809      	ldr	r0, [pc, #36]	; (800248c <DISPANSE_POHA+0x6c>)
 8002466:	f000 ff02 	bl	800326e <HAL_GPIO_WritePin>
	STEPPER_ROTATE(300, 7130, 1, CHAMBER4);
 800246a:	2096      	movs	r0, #150	; 0x96
 800246c:	2304      	movs	r3, #4
 800246e:	2201      	movs	r2, #1
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <DISPANSE_POHA+0x70>)
 8002472:	0040      	lsls	r0, r0, #1
 8002474:	f7ff fe84 	bl	8002180 <STEPPER_ROTATE>
	while(Chamber4_flag);
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <DISPANSE_POHA+0x74>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1fb      	bne.n	8002478 <DISPANSE_POHA+0x58>
	HAL_GPIO_WritePin(EX_FAN_GPIO_Port, EX_FAN_Pin , RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	2108      	movs	r1, #8
 8002484:	4801      	ldr	r0, [pc, #4]	; (800248c <DISPANSE_POHA+0x6c>)
 8002486:	f000 fef2 	bl	800326e <HAL_GPIO_WritePin>
}
 800248a:	bd10      	pop	{r4, pc}
 800248c:	48000800 	.word	0x48000800
 8002490:	00001bda 	.word	0x00001bda
 8002494:	20000094 	.word	0x20000094
 8002498:	00002c88 	.word	0x00002c88
 800249c:	20000093 	.word	0x20000093

080024a0 <StopAllMotors>:

void StopAllMotors(){
 80024a0:	b510      	push	{r4, lr}
	/*
	CC1_flag=0;CC2_flag=0;CAKE1_flag=0;CAKE2_flag=0;BP_flag=0,CRUMS_flag=0;TM_flag=0,CHEESE_flag=0;GUIDEWAY_flag=0;
	CLEANING_flag=0;CLEANING2_flag=0;MIXING_flag=0;MIXING2_flag=0;SAUCE_A_flag=0;SAUCE_B_flag=0;WATER_BOILER_flag=0;
	*/

	if(Chamber1_flag==1){
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <StopAllMotors+0x9c>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d00c      	beq.n	80024c4 <StopAllMotors+0x24>
		Chamber1_flag=0;
		HAL_GPIO_WritePin(STEPPER_1_EN_GPIO_Port, STEPPER_1_EN_Pin, 0);
		HAL_GPIO_WritePin(STEPPER_1_PUL_GPIO_Port, STEPPER_1_PUL_Pin, 0);   // Pulse pin since EN is always high
	}
	if(Chamber2_flag==1){
 80024aa:	4b25      	ldr	r3, [pc, #148]	; (8002540 <StopAllMotors+0xa0>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d016      	beq.n	80024e0 <StopAllMotors+0x40>
		Chamber2_flag=0;
		HAL_GPIO_WritePin(STEPPER_2_EN_GPIO_Port, STEPPER_2_EN_Pin, 0);
		HAL_GPIO_WritePin(STEPPER_2_PUL_GPIO_Port, STEPPER_2_PUL_Pin, 0);   // Pulse pin since EN is always high
	}
	if(Chamber3_flag==1){
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <StopAllMotors+0xa4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d021      	beq.n	80024fe <StopAllMotors+0x5e>
		Chamber3_flag=0;
		HAL_GPIO_WritePin(STEPPER_3_EN_GPIO_Port, STEPPER_3_EN_Pin, 0);
		HAL_GPIO_WritePin(STEPPER_3_PUL_GPIO_Port, STEPPER_3_PUL_Pin, 0);   // Pulse pin since EN is always high
	}
	if(Chamber4_flag==1){
 80024ba:	4b23      	ldr	r3, [pc, #140]	; (8002548 <StopAllMotors+0xa8>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d02b      	beq.n	800251a <StopAllMotors+0x7a>
		Chamber4_flag=0;
		HAL_GPIO_WritePin(STEPPER_4_EN_GPIO_Port, STEPPER_4_EN_Pin, 0);
		HAL_GPIO_WritePin(STEPPER_4_PUL_GPIO_Port, STEPPER_4_PUL_Pin, 0);   // Pulse pin since EN is always high
		}

}
 80024c2:	bd10      	pop	{r4, pc}
		Chamber1_flag=0;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <StopAllMotors+0x9c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(STEPPER_1_EN_GPIO_Port, STEPPER_1_EN_Pin, 0);
 80024ca:	4c20      	ldr	r4, [pc, #128]	; (800254c <StopAllMotors+0xac>)
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	0020      	movs	r0, r4
 80024d0:	f000 fecd 	bl	800326e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_1_PUL_GPIO_Port, STEPPER_1_PUL_Pin, 0);   // Pulse pin since EN is always high
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	0020      	movs	r0, r4
 80024da:	f000 fec8 	bl	800326e <HAL_GPIO_WritePin>
 80024de:	e7e4      	b.n	80024aa <StopAllMotors+0xa>
		Chamber2_flag=0;
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <StopAllMotors+0xa0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(STEPPER_2_EN_GPIO_Port, STEPPER_2_EN_Pin, 0);
 80024e6:	2490      	movs	r4, #144	; 0x90
 80024e8:	05e4      	lsls	r4, r4, #23
 80024ea:	2108      	movs	r1, #8
 80024ec:	0020      	movs	r0, r4
 80024ee:	f000 febe 	bl	800326e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_2_PUL_GPIO_Port, STEPPER_2_PUL_Pin, 0);   // Pulse pin since EN is always high
 80024f2:	2200      	movs	r2, #0
 80024f4:	2104      	movs	r1, #4
 80024f6:	0020      	movs	r0, r4
 80024f8:	f000 feb9 	bl	800326e <HAL_GPIO_WritePin>
 80024fc:	e7d9      	b.n	80024b2 <StopAllMotors+0x12>
		Chamber3_flag=0;
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <StopAllMotors+0xa4>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(STEPPER_3_EN_GPIO_Port, STEPPER_3_EN_Pin, 0);
 8002504:	4c12      	ldr	r4, [pc, #72]	; (8002550 <StopAllMotors+0xb0>)
 8002506:	2110      	movs	r1, #16
 8002508:	0020      	movs	r0, r4
 800250a:	f000 feb0 	bl	800326e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_3_PUL_GPIO_Port, STEPPER_3_PUL_Pin, 0);   // Pulse pin since EN is always high
 800250e:	2200      	movs	r2, #0
 8002510:	2120      	movs	r1, #32
 8002512:	0020      	movs	r0, r4
 8002514:	f000 feab 	bl	800326e <HAL_GPIO_WritePin>
 8002518:	e7cf      	b.n	80024ba <StopAllMotors+0x1a>
		Chamber4_flag=0;
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <StopAllMotors+0xa8>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(STEPPER_4_EN_GPIO_Port, STEPPER_4_EN_Pin, 0);
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	2490      	movs	r4, #144	; 0x90
 8002524:	05e4      	lsls	r4, r4, #23
 8002526:	00c9      	lsls	r1, r1, #3
 8002528:	0020      	movs	r0, r4
 800252a:	f000 fea0 	bl	800326e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_4_PUL_GPIO_Port, STEPPER_4_PUL_Pin, 0);   // Pulse pin since EN is always high
 800252e:	2180      	movs	r1, #128	; 0x80
 8002530:	2200      	movs	r2, #0
 8002532:	0089      	lsls	r1, r1, #2
 8002534:	0020      	movs	r0, r4
 8002536:	f000 fe9a 	bl	800326e <HAL_GPIO_WritePin>
}
 800253a:	e7c2      	b.n	80024c2 <StopAllMotors+0x22>
 800253c:	20000091 	.word	0x20000091
 8002540:	20000092 	.word	0x20000092
 8002544:	20000093 	.word	0x20000093
 8002548:	20000094 	.word	0x20000094
 800254c:	48001400 	.word	0x48001400
 8002550:	48000400 	.word	0x48000400

08002554 <ReadTemperature>:
 *
 * @Retval:  Temp_status value is returned
 *************************************************************/
Temp_status ReadTemperature(uint16_t *temp)
//Temp_status ReadTemperature(void)
{
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	b084      	sub	sp, #16
	uint8_t Temp_buf[5] = {"\0"};
 8002558:	ad02      	add	r5, sp, #8
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <ReadTemperature+0xcc>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	802b      	strh	r3, [r5, #0]
 8002560:	2203      	movs	r2, #3
 8002562:	2100      	movs	r1, #0
 8002564:	200a      	movs	r0, #10
 8002566:	4468      	add	r0, sp
 8002568:	f002 fd43 	bl	8004ff2 <memset>

	Temp_status status = TEMP_OK;

	/*Update this function with the port value and pin value
		to which the SPI chip select is connected*/
	HAL_GPIO_WritePin(Temp_CS_GPIO_Port, Temp_CS_Pin, GPIO_PIN_RESET);
 800256c:	2690      	movs	r6, #144	; 0x90
 800256e:	05f6      	lsls	r6, r6, #23
 8002570:	2200      	movs	r2, #0
 8002572:	2110      	movs	r1, #16
 8002574:	0030      	movs	r0, r6
 8002576:	f000 fe7a 	bl	800326e <HAL_GPIO_WritePin>

	HAL_Delay(5);
 800257a:	2005      	movs	r0, #5
 800257c:	f000 fd3e 	bl	8002ffc <HAL_Delay>

	/*Configure with the appropriate SPI handle structure*/
	HAL_SPI_Receive(&hspi1,Temp_buf,4,100);
 8002580:	2364      	movs	r3, #100	; 0x64
 8002582:	2204      	movs	r2, #4
 8002584:	0029      	movs	r1, r5
 8002586:	4827      	ldr	r0, [pc, #156]	; (8002624 <ReadTemperature+0xd0>)
 8002588:	f002 f9d4 	bl	8004934 <HAL_SPI_Receive>

	Temperature_value = Temp_buf[0] << 8;
 800258c:	782b      	ldrb	r3, [r5, #0]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	4c25      	ldr	r4, [pc, #148]	; (8002628 <ReadTemperature+0xd4>)
 8002592:	8023      	strh	r3, [r4, #0]

	Temperature_value |= Temp_buf[1];
 8002594:	786a      	ldrb	r2, [r5, #1]
 8002596:	8823      	ldrh	r3, [r4, #0]
 8002598:	4313      	orrs	r3, r2
 800259a:	8023      	strh	r3, [r4, #0]

	HAL_GPIO_WritePin(Temp_CS_GPIO_Port, Temp_CS_Pin, GPIO_PIN_SET);
 800259c:	2201      	movs	r2, #1
 800259e:	2110      	movs	r1, #16
 80025a0:	0030      	movs	r0, r6
 80025a2:	f000 fe64 	bl	800326e <HAL_GPIO_WritePin>
//		Temperature_value = pTemp;
//
//	}
//	else
//	{
		Temperature_value >>= 2;
 80025a6:	8823      	ldrh	r3, [r4, #0]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	8023      	strh	r3, [r4, #0]
		pTemp = Temperature_value;
 80025ac:	8820      	ldrh	r0, [r4, #0]
 80025ae:	b280      	uxth	r0, r0
 80025b0:	f7fe fd44 	bl	800103c <__aeabi_ui2f>

		pTemp = pTemp * 0.25; /*Temperature Resolution Calculation*/
 80025b4:	21fa      	movs	r1, #250	; 0xfa
 80025b6:	0589      	lsls	r1, r1, #22
 80025b8:	f7fe f9e0 	bl	800097c <__aeabi_fmul>
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <ReadTemperature+0xd8>)
 80025be:	6018      	str	r0, [r3, #0]

		Temperature_value = pTemp;
 80025c0:	f7fd ff18 	bl	80003f4 <__aeabi_f2uiz>
 80025c4:	b280      	uxth	r0, r0
 80025c6:	8020      	strh	r0, [r4, #0]
//		TempError(status);

//	}
//	else
//	{
		if(tempScreenFlag == 0)
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <ReadTemperature+0xdc>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01c      	beq.n	800260a <ReadTemperature+0xb6>
			tempScreenFlag = 1;
			errorScreenFlag = 0;
			ILI9341_FillScreenTemp(ILI9341_WHITE);
		}
//			sprintf(temp_buff1,"T: %03d",Temperature_value);
		strcpy(temp_buff1,"T: ");
 80025d0:	4c18      	ldr	r4, [pc, #96]	; (8002634 <ReadTemperature+0xe0>)
 80025d2:	2204      	movs	r2, #4
 80025d4:	4918      	ldr	r1, [pc, #96]	; (8002638 <ReadTemperature+0xe4>)
 80025d6:	0020      	movs	r0, r4
 80025d8:	f002 fd02 	bl	8004fe0 <memcpy>
		intToStr(Temperature_value,temp_num_buf,3);
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <ReadTemperature+0xd4>)
 80025de:	8818      	ldrh	r0, [r3, #0]
 80025e0:	b280      	uxth	r0, r0
 80025e2:	4d16      	ldr	r5, [pc, #88]	; (800263c <ReadTemperature+0xe8>)
 80025e4:	2203      	movs	r2, #3
 80025e6:	0029      	movs	r1, r5
 80025e8:	f7ff fda1 	bl	800212e <intToStr>
		strcat(temp_buff1,temp_num_buf);
 80025ec:	0029      	movs	r1, r5
 80025ee:	0020      	movs	r0, r4
 80025f0:	f002 fde2 	bl	80051b8 <strcat>
//			ILI9341_WriteString(K_TYPE_TEMP_VALUE,K_TYPE_Y_AXIS,temp_buff1, Font_11x18, ILI9341_WHITE, ILI9341_WHITE);
		ILI9341_WriteString1(K_TYPE_TEMP_VALUE,K_TYPE_Y_AXIS,temp_buff1, ILI9341_BLACK, ILI9341_WHITE);
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <ReadTemperature+0xec>)
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2300      	movs	r3, #0
 80025fa:	0022      	movs	r2, r4
 80025fc:	2100      	movs	r1, #0
 80025fe:	20e6      	movs	r0, #230	; 0xe6
 8002600:	f7ff f95e 	bl	80018c0 <ILI9341_WriteString1>



	return status; /*Return the Status of the thermocouple*/

}
 8002604:	2000      	movs	r0, #0
 8002606:	b004      	add	sp, #16
 8002608:	bd70      	pop	{r4, r5, r6, pc}
			tempScreenFlag = 1;
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <ReadTemperature+0xdc>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
			errorScreenFlag = 0;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <ReadTemperature+0xf0>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
			ILI9341_FillScreenTemp(ILI9341_WHITE);
 8002616:	480a      	ldr	r0, [pc, #40]	; (8002640 <ReadTemperature+0xec>)
 8002618:	f7ff f9fa 	bl	8001a10 <ILI9341_FillScreenTemp>
 800261c:	e7d8      	b.n	80025d0 <ReadTemperature+0x7c>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	08005888 	.word	0x08005888
 8002624:	20000558 	.word	0x20000558
 8002628:	20000204 	.word	0x20000204
 800262c:	2000009c 	.word	0x2000009c
 8002630:	200005d4 	.word	0x200005d4
 8002634:	200001a0 	.word	0x200001a0
 8002638:	080066d8 	.word	0x080066d8
 800263c:	200000b8 	.word	0x200000b8
 8002640:	0000ffff 	.word	0x0000ffff
 8002644:	200005d5 	.word	0x200005d5

08002648 <MachineProcess>:

uint8_t  basketMoved;


void MachineProcess(void)
{
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	b082      	sub	sp, #8

	switch(machineState){
 800264c:	4bd4      	ldr	r3, [pc, #848]	; (80029a0 <MachineProcess+0x358>)
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	2a0c      	cmp	r2, #12
 8002652:	d806      	bhi.n	8002662 <MachineProcess+0x1a>
 8002654:	0093      	lsls	r3, r2, #2
 8002656:	49d3      	ldr	r1, [pc, #844]	; (80029a4 <MachineProcess+0x35c>)
 8002658:	58cb      	ldr	r3, [r1, r3]
 800265a:	469f      	mov	pc, r3
		case printLogo:{
			machineState = water_heating;
 800265c:	4bd0      	ldr	r3, [pc, #832]	; (80029a0 <MachineProcess+0x358>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]

			break;
		}
#endif
	}
}
 8002662:	b002      	add	sp, #8
 8002664:	bd70      	pop	{r4, r5, r6, pc}
			strcpy(temp_buff,"WATER BOILING");
 8002666:	220e      	movs	r2, #14
 8002668:	49cf      	ldr	r1, [pc, #828]	; (80029a8 <MachineProcess+0x360>)
 800266a:	48d0      	ldr	r0, [pc, #832]	; (80029ac <MachineProcess+0x364>)
 800266c:	f002 fcb8 	bl	8004fe0 <memcpy>
			ILI9341_FillScreenOffset(ILI9341_WHITE);
 8002670:	48cf      	ldr	r0, [pc, #828]	; (80029b0 <MachineProcess+0x368>)
 8002672:	f7ff f9c1 	bl	80019f8 <ILI9341_FillScreenOffset>
			HAL_Delay(2);
 8002676:	2002      	movs	r0, #2
 8002678:	f000 fcc0 	bl	8002ffc <HAL_Delay>
			if(Temperature_value > 70)
 800267c:	4bcd      	ldr	r3, [pc, #820]	; (80029b4 <MachineProcess+0x36c>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b46      	cmp	r3, #70	; 0x46
 8002684:	d902      	bls.n	800268c <MachineProcess+0x44>
				machineState=water_heated;
 8002686:	4bc6      	ldr	r3, [pc, #792]	; (80029a0 <MachineProcess+0x358>)
 8002688:	2203      	movs	r2, #3
 800268a:	701a      	strb	r2, [r3, #0]
			ILI9341_WriteString1(MACHINE_SETTINGS,( 4 * 2)*10,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 800268c:	4bc8      	ldr	r3, [pc, #800]	; (80029b0 <MachineProcess+0x368>)
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2300      	movs	r3, #0
 8002692:	4ac6      	ldr	r2, [pc, #792]	; (80029ac <MachineProcess+0x364>)
 8002694:	2150      	movs	r1, #80	; 0x50
 8002696:	2050      	movs	r0, #80	; 0x50
 8002698:	f7ff f912 	bl	80018c0 <ILI9341_WriteString1>
			machineState = water_temp_check;
 800269c:	4bc0      	ldr	r3, [pc, #768]	; (80029a0 <MachineProcess+0x358>)
 800269e:	2202      	movs	r2, #2
 80026a0:	701a      	strb	r2, [r3, #0]
			break;
 80026a2:	e7de      	b.n	8002662 <MachineProcess+0x1a>
			if(Temperature_value > 70){
 80026a4:	4bc3      	ldr	r3, [pc, #780]	; (80029b4 <MachineProcess+0x36c>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b46      	cmp	r3, #70	; 0x46
 80026ac:	d9d9      	bls.n	8002662 <MachineProcess+0x1a>
				machineState=water_heated;
 80026ae:	4bbc      	ldr	r3, [pc, #752]	; (80029a0 <MachineProcess+0x358>)
 80026b0:	2203      	movs	r2, #3
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e7d5      	b.n	8002662 <MachineProcess+0x1a>
			strcpy(temp_buff,"READY TO COOK...");
 80026b6:	4cbd      	ldr	r4, [pc, #756]	; (80029ac <MachineProcess+0x364>)
 80026b8:	2211      	movs	r2, #17
 80026ba:	49bf      	ldr	r1, [pc, #764]	; (80029b8 <MachineProcess+0x370>)
 80026bc:	0020      	movs	r0, r4
 80026be:	f002 fc8f 	bl	8004fe0 <memcpy>
			ILI9341_FillScreenOffset(ILI9341_WHITE);
 80026c2:	4dbb      	ldr	r5, [pc, #748]	; (80029b0 <MachineProcess+0x368>)
 80026c4:	0028      	movs	r0, r5
 80026c6:	f7ff f997 	bl	80019f8 <ILI9341_FillScreenOffset>
			HAL_Delay(2);
 80026ca:	2002      	movs	r0, #2
 80026cc:	f000 fc96 	bl	8002ffc <HAL_Delay>
			ILI9341_WriteString1(MACHINE_SETTINGS,( 4 * 2)*10,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 80026d0:	9500      	str	r5, [sp, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	0022      	movs	r2, r4
 80026d6:	2150      	movs	r1, #80	; 0x50
 80026d8:	2050      	movs	r0, #80	; 0x50
 80026da:	f7ff f8f1 	bl	80018c0 <ILI9341_WriteString1>
			machineState = homeScreenInit;
 80026de:	4bb0      	ldr	r3, [pc, #704]	; (80029a0 <MachineProcess+0x358>)
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
			break;
 80026e4:	e7bd      	b.n	8002662 <MachineProcess+0x1a>
			printState = printHomeScreenInit;
 80026e6:	4bb5      	ldr	r3, [pc, #724]	; (80029bc <MachineProcess+0x374>)
 80026e8:	2100      	movs	r1, #0
 80026ea:	7019      	strb	r1, [r3, #0]
			currentMachineState = machineState;
 80026ec:	4bb4      	ldr	r3, [pc, #720]	; (80029c0 <MachineProcess+0x378>)
 80026ee:	701a      	strb	r2, [r3, #0]
			machineState = MachineIdle;
 80026f0:	4bab      	ldr	r3, [pc, #684]	; (80029a0 <MachineProcess+0x358>)
 80026f2:	220c      	movs	r2, #12
 80026f4:	701a      	strb	r2, [r3, #0]
			previousMachineState = homeScreenInit;
 80026f6:	4bb3      	ldr	r3, [pc, #716]	; (80029c4 <MachineProcess+0x37c>)
 80026f8:	3a08      	subs	r2, #8
 80026fa:	701a      	strb	r2, [r3, #0]
			rCount = 1;
 80026fc:	4bb2      	ldr	r3, [pc, #712]	; (80029c8 <MachineProcess+0x380>)
 80026fe:	3a03      	subs	r2, #3
 8002700:	801a      	strh	r2, [r3, #0]
			break;
 8002702:	e7ae      	b.n	8002662 <MachineProcess+0x1a>
			if(keyFlags.resetFlag ==0)
 8002704:	4bb1      	ldr	r3, [pc, #708]	; (80029cc <MachineProcess+0x384>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	065b      	lsls	r3, r3, #25
 800270a:	d4aa      	bmi.n	8002662 <MachineProcess+0x1a>
				strcpy(temp_buff,"VEGGIE UPMA SELECTED");
 800270c:	4ca7      	ldr	r4, [pc, #668]	; (80029ac <MachineProcess+0x364>)
 800270e:	2215      	movs	r2, #21
 8002710:	49af      	ldr	r1, [pc, #700]	; (80029d0 <MachineProcess+0x388>)
 8002712:	0020      	movs	r0, r4
 8002714:	f002 fc64 	bl	8004fe0 <memcpy>
				ILI9341_FillScreenOffset(ILI9341_WHITE);
 8002718:	4da5      	ldr	r5, [pc, #660]	; (80029b0 <MachineProcess+0x368>)
 800271a:	0028      	movs	r0, r5
 800271c:	f7ff f96c 	bl	80019f8 <ILI9341_FillScreenOffset>
				HAL_Delay(2);
 8002720:	2002      	movs	r0, #2
 8002722:	f000 fc6b 	bl	8002ffc <HAL_Delay>
				ILI9341_WriteString1(MACHINE_SETTINGS,( 4 * 2)*10,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 8002726:	9500      	str	r5, [sp, #0]
 8002728:	2300      	movs	r3, #0
 800272a:	0022      	movs	r2, r4
 800272c:	2150      	movs	r1, #80	; 0x50
 800272e:	2050      	movs	r0, #80	; 0x50
 8002730:	f7ff f8c6 	bl	80018c0 <ILI9341_WriteString1>
				DISPANSE_UPMA();
 8002734:	f7ff fdf4 	bl	8002320 <DISPANSE_UPMA>
				upmaCnt++;
 8002738:	4aa6      	ldr	r2, [pc, #664]	; (80029d4 <MachineProcess+0x38c>)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	6013      	str	r3, [r2, #0]
				eeprom_buff_writeCnt[0] = upmaCnt;
 8002740:	49a5      	ldr	r1, [pc, #660]	; (80029d8 <MachineProcess+0x390>)
 8002742:	700b      	strb	r3, [r1, #0]
				ee24_write((EEPROM_UPMA_COUNT_ADDR),&eeprom_buff_writeCnt[0],1,300);
 8002744:	2396      	movs	r3, #150	; 0x96
 8002746:	20fc      	movs	r0, #252	; 0xfc
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2201      	movs	r2, #1
 800274c:	0080      	lsls	r0, r0, #2
 800274e:	f7fe fdd3 	bl	80012f8 <ee24_write>
				HAL_Delay(500);
 8002752:	20fa      	movs	r0, #250	; 0xfa
 8002754:	0040      	lsls	r0, r0, #1
 8002756:	f000 fc51 	bl	8002ffc <HAL_Delay>
				rCount = 0;
 800275a:	4b9b      	ldr	r3, [pc, #620]	; (80029c8 <MachineProcess+0x380>)
 800275c:	2200      	movs	r2, #0
 800275e:	801a      	strh	r2, [r3, #0]
				machineState = homeScreenInit;
 8002760:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <MachineProcess+0x358>)
 8002762:	3204      	adds	r2, #4
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e77c      	b.n	8002662 <MachineProcess+0x1a>
			if(keyFlags.resetFlag ==0)
 8002768:	4b98      	ldr	r3, [pc, #608]	; (80029cc <MachineProcess+0x384>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	065b      	lsls	r3, r3, #25
 800276e:	d500      	bpl.n	8002772 <MachineProcess+0x12a>
 8002770:	e777      	b.n	8002662 <MachineProcess+0x1a>
				strcpy(temp_buff,"SUJI HALWA SELECTED ");
 8002772:	4c8e      	ldr	r4, [pc, #568]	; (80029ac <MachineProcess+0x364>)
 8002774:	2215      	movs	r2, #21
 8002776:	4999      	ldr	r1, [pc, #612]	; (80029dc <MachineProcess+0x394>)
 8002778:	0020      	movs	r0, r4
 800277a:	f002 fc31 	bl	8004fe0 <memcpy>
				ILI9341_FillScreenOffset(ILI9341_WHITE);
 800277e:	4d8c      	ldr	r5, [pc, #560]	; (80029b0 <MachineProcess+0x368>)
 8002780:	0028      	movs	r0, r5
 8002782:	f7ff f939 	bl	80019f8 <ILI9341_FillScreenOffset>
				HAL_Delay(2);
 8002786:	2002      	movs	r0, #2
 8002788:	f000 fc38 	bl	8002ffc <HAL_Delay>
				ILI9341_WriteString1(MACHINE_SETTINGS,( 4 * 2)*10,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 800278c:	9500      	str	r5, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	0022      	movs	r2, r4
 8002792:	2150      	movs	r1, #80	; 0x50
 8002794:	2050      	movs	r0, #80	; 0x50
 8002796:	f7ff f893 	bl	80018c0 <ILI9341_WriteString1>
				rCount = 0;
 800279a:	4b8b      	ldr	r3, [pc, #556]	; (80029c8 <MachineProcess+0x380>)
 800279c:	2200      	movs	r2, #0
 800279e:	801a      	strh	r2, [r3, #0]
				DISPANSE_KESARI();
 80027a0:	f7ff fdfe 	bl	80023a0 <DISPANSE_KESARI>
				kesarCnt++;
 80027a4:	4a8e      	ldr	r2, [pc, #568]	; (80029e0 <MachineProcess+0x398>)
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	6013      	str	r3, [r2, #0]
				eeprom_buff_writeCnt[0] = kesarCnt;
 80027ac:	498a      	ldr	r1, [pc, #552]	; (80029d8 <MachineProcess+0x390>)
 80027ae:	700b      	strb	r3, [r1, #0]
				ee24_write((EEPROM_KESAR_COUNT_ADDR),&eeprom_buff_writeCnt[0],1,300);
 80027b0:	2396      	movs	r3, #150	; 0x96
 80027b2:	20fe      	movs	r0, #254	; 0xfe
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2201      	movs	r2, #1
 80027b8:	0080      	lsls	r0, r0, #2
 80027ba:	f7fe fd9d 	bl	80012f8 <ee24_write>
				HAL_Delay(500);
 80027be:	20fa      	movs	r0, #250	; 0xfa
 80027c0:	0040      	lsls	r0, r0, #1
 80027c2:	f000 fc1b 	bl	8002ffc <HAL_Delay>
				machineState = homeScreenInit;
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <MachineProcess+0x358>)
 80027c8:	2204      	movs	r2, #4
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e749      	b.n	8002662 <MachineProcess+0x1a>
			if(keyFlags.resetFlag == 0)
 80027ce:	4b7f      	ldr	r3, [pc, #508]	; (80029cc <MachineProcess+0x384>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	065b      	lsls	r3, r3, #25
 80027d4:	d500      	bpl.n	80027d8 <MachineProcess+0x190>
 80027d6:	e744      	b.n	8002662 <MachineProcess+0x1a>
				strcpy(temp_buff,"KHATTA METTHA POHA               SELECTED");
 80027d8:	4c74      	ldr	r4, [pc, #464]	; (80029ac <MachineProcess+0x364>)
 80027da:	222a      	movs	r2, #42	; 0x2a
 80027dc:	4981      	ldr	r1, [pc, #516]	; (80029e4 <MachineProcess+0x39c>)
 80027de:	0020      	movs	r0, r4
 80027e0:	f002 fbfe 	bl	8004fe0 <memcpy>
				ILI9341_FillScreenOffset(ILI9341_WHITE);
 80027e4:	4d72      	ldr	r5, [pc, #456]	; (80029b0 <MachineProcess+0x368>)
 80027e6:	0028      	movs	r0, r5
 80027e8:	f7ff f906 	bl	80019f8 <ILI9341_FillScreenOffset>
				HAL_Delay(2);
 80027ec:	2002      	movs	r0, #2
 80027ee:	f000 fc05 	bl	8002ffc <HAL_Delay>
				rCount = 0;
 80027f2:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <MachineProcess+0x380>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	801a      	strh	r2, [r3, #0]
				ILI9341_WriteString1(MACHINE_SETTINGS,( 4 * 2)*10,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 80027f8:	9500      	str	r5, [sp, #0]
 80027fa:	2300      	movs	r3, #0
 80027fc:	0022      	movs	r2, r4
 80027fe:	2150      	movs	r1, #80	; 0x50
 8002800:	2050      	movs	r0, #80	; 0x50
 8002802:	f7ff f85d 	bl	80018c0 <ILI9341_WriteString1>
				DISPANSE_POHA();
 8002806:	f7ff fe0b 	bl	8002420 <DISPANSE_POHA>
				pohaCnt++;
 800280a:	4a77      	ldr	r2, [pc, #476]	; (80029e8 <MachineProcess+0x3a0>)
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	3301      	adds	r3, #1
 8002810:	6013      	str	r3, [r2, #0]
				eeprom_buff_writeCnt[0] = pohaCnt;
 8002812:	4971      	ldr	r1, [pc, #452]	; (80029d8 <MachineProcess+0x390>)
 8002814:	700b      	strb	r3, [r1, #0]
				ee24_write((EEPROM_POHA_COUNT_ADDR),&eeprom_buff_writeCnt[0],1,300);
 8002816:	2396      	movs	r3, #150	; 0x96
 8002818:	2080      	movs	r0, #128	; 0x80
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2201      	movs	r2, #1
 800281e:	00c0      	lsls	r0, r0, #3
 8002820:	f7fe fd6a 	bl	80012f8 <ee24_write>
				HAL_Delay(500);
 8002824:	20fa      	movs	r0, #250	; 0xfa
 8002826:	0040      	lsls	r0, r0, #1
 8002828:	f000 fbe8 	bl	8002ffc <HAL_Delay>
				machineState = homeScreenInit;
 800282c:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <MachineProcess+0x358>)
 800282e:	2204      	movs	r2, #4
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e716      	b.n	8002662 <MachineProcess+0x1a>
			 if(eeprom_buff_read[0] == 0x14)
 8002834:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <MachineProcess+0x3a4>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b14      	cmp	r3, #20
 800283a:	d007      	beq.n	800284c <MachineProcess+0x204>
			 HAL_Delay(1000);
 800283c:	20fa      	movs	r0, #250	; 0xfa
 800283e:	0080      	lsls	r0, r0, #2
 8002840:	f000 fbdc 	bl	8002ffc <HAL_Delay>
			 machineState = waitForOK;
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <MachineProcess+0x358>)
 8002846:	2206      	movs	r2, #6
 8002848:	701a      	strb	r2, [r3, #0]
			 break;
 800284a:	e70a      	b.n	8002662 <MachineProcess+0x1a>
				  ok_detected = 0;
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <MachineProcess+0x3a8>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
				  ee24_read((EEPROM_UPMA_COUNT_ADDR),(uint8_t *)&cntBuff[0],1,300);
 8002852:	2596      	movs	r5, #150	; 0x96
 8002854:	006d      	lsls	r5, r5, #1
 8002856:	4c67      	ldr	r4, [pc, #412]	; (80029f4 <MachineProcess+0x3ac>)
 8002858:	20fc      	movs	r0, #252	; 0xfc
 800285a:	002b      	movs	r3, r5
 800285c:	3201      	adds	r2, #1
 800285e:	0021      	movs	r1, r4
 8002860:	0080      	lsls	r0, r0, #2
 8002862:	f7fe fd9d 	bl	80013a0 <ee24_read>
				  HAL_Delay(10);
 8002866:	200a      	movs	r0, #10
 8002868:	f000 fbc8 	bl	8002ffc <HAL_Delay>
				  ee24_read((EEPROM_KESAR_COUNT_ADDR),(uint8_t *)&cntBuff[1],1,300);
 800286c:	1c61      	adds	r1, r4, #1
 800286e:	20fe      	movs	r0, #254	; 0xfe
 8002870:	002b      	movs	r3, r5
 8002872:	2201      	movs	r2, #1
 8002874:	0080      	lsls	r0, r0, #2
 8002876:	f7fe fd93 	bl	80013a0 <ee24_read>
				  HAL_Delay(10);
 800287a:	200a      	movs	r0, #10
 800287c:	f000 fbbe 	bl	8002ffc <HAL_Delay>
				  ee24_read((EEPROM_POHA_COUNT_ADDR),(uint8_t *)&cntBuff[2],1,300);
 8002880:	1ca1      	adds	r1, r4, #2
 8002882:	2080      	movs	r0, #128	; 0x80
 8002884:	002b      	movs	r3, r5
 8002886:	2201      	movs	r2, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	f7fe fd89 	bl	80013a0 <ee24_read>
				  HAL_Delay(10);
 800288e:	200a      	movs	r0, #10
 8002890:	f000 fbb4 	bl	8002ffc <HAL_Delay>
				  sprintf(temp_buff,"VEGGIE UPMA : %d               KHATTA METTHA POHA : %d        SUJI HALWA  : %d ",cntBuff[0],cntBuff[2],cntBuff[1]);
 8002894:	7822      	ldrb	r2, [r4, #0]
 8002896:	78a3      	ldrb	r3, [r4, #2]
 8002898:	7861      	ldrb	r1, [r4, #1]
 800289a:	4c44      	ldr	r4, [pc, #272]	; (80029ac <MachineProcess+0x364>)
 800289c:	9100      	str	r1, [sp, #0]
 800289e:	4956      	ldr	r1, [pc, #344]	; (80029f8 <MachineProcess+0x3b0>)
 80028a0:	0020      	movs	r0, r4
 80028a2:	f002 fc69 	bl	8005178 <siprintf>
				  ILI9341_FillScreenOffset(ILI9341_WHITE);
 80028a6:	4d42      	ldr	r5, [pc, #264]	; (80029b0 <MachineProcess+0x368>)
 80028a8:	0028      	movs	r0, r5
 80028aa:	f7ff f8a5 	bl	80019f8 <ILI9341_FillScreenOffset>
				  HAL_Delay(2);
 80028ae:	2002      	movs	r0, #2
 80028b0:	f000 fba4 	bl	8002ffc <HAL_Delay>
				  ILI9341_WriteString1(20, 40, temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 80028b4:	9500      	str	r5, [sp, #0]
 80028b6:	2300      	movs	r3, #0
 80028b8:	0022      	movs	r2, r4
 80028ba:	2128      	movs	r1, #40	; 0x28
 80028bc:	2014      	movs	r0, #20
 80028be:	f7fe ffff 	bl	80018c0 <ILI9341_WriteString1>
 80028c2:	e7bb      	b.n	800283c <MachineProcess+0x1f4>
			 if(ok_detected == 1)
 80028c4:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <MachineProcess+0x3a8>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d000      	beq.n	80028ce <MachineProcess+0x286>
 80028cc:	e6c9      	b.n	8002662 <MachineProcess+0x1a>
				 ok_detected = 0;
 80028ce:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <MachineProcess+0x3a8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
				 machineState = homeScreenInit;
 80028d4:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <MachineProcess+0x358>)
 80028d6:	3204      	adds	r2, #4
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e6c2      	b.n	8002662 <MachineProcess+0x1a>
			if(eeprom_buff_read[0] == 0x14)
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <MachineProcess+0x3a4>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b14      	cmp	r3, #20
 80028e2:	d007      	beq.n	80028f4 <MachineProcess+0x2ac>
			HAL_Delay(1000);
 80028e4:	20fa      	movs	r0, #250	; 0xfa
 80028e6:	0080      	lsls	r0, r0, #2
 80028e8:	f000 fb88 	bl	8002ffc <HAL_Delay>
			machineState = displayCnt;
 80028ec:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <MachineProcess+0x358>)
 80028ee:	220a      	movs	r2, #10
 80028f0:	701a      	strb	r2, [r3, #0]
			break;
 80028f2:	e6b6      	b.n	8002662 <MachineProcess+0x1a>
				  sprintf(temp_buff,"COUNT RESETTING...! ");
 80028f4:	4d2d      	ldr	r5, [pc, #180]	; (80029ac <MachineProcess+0x364>)
 80028f6:	2215      	movs	r2, #21
 80028f8:	4940      	ldr	r1, [pc, #256]	; (80029fc <MachineProcess+0x3b4>)
 80028fa:	0028      	movs	r0, r5
 80028fc:	f002 fb70 	bl	8004fe0 <memcpy>
				  ok_detected = 0;
 8002900:	2400      	movs	r4, #0
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <MachineProcess+0x3a8>)
 8002904:	701c      	strb	r4, [r3, #0]
				  ILI9341_FillScreenOffset(ILI9341_WHITE);
 8002906:	4e2a      	ldr	r6, [pc, #168]	; (80029b0 <MachineProcess+0x368>)
 8002908:	0030      	movs	r0, r6
 800290a:	f7ff f875 	bl	80019f8 <ILI9341_FillScreenOffset>
				  HAL_Delay(2);
 800290e:	2002      	movs	r0, #2
 8002910:	f000 fb74 	bl	8002ffc <HAL_Delay>
				  ILI9341_WriteString1(80, 80, temp_buff, ILI9341_BLUE, ILI9341_WHITE);
 8002914:	9600      	str	r6, [sp, #0]
 8002916:	231f      	movs	r3, #31
 8002918:	002a      	movs	r2, r5
 800291a:	2150      	movs	r1, #80	; 0x50
 800291c:	2050      	movs	r0, #80	; 0x50
 800291e:	f7fe ffcf 	bl	80018c0 <ILI9341_WriteString1>
				  HAL_Delay(500);
 8002922:	20fa      	movs	r0, #250	; 0xfa
 8002924:	0040      	lsls	r0, r0, #1
 8002926:	f000 fb69 	bl	8002ffc <HAL_Delay>
				  ee24_write((EEPROM_UPMA_COUNT_ADDR),(uint8_t *)&eeprom_buff_writeCnt[2],1,300);
 800292a:	2696      	movs	r6, #150	; 0x96
 800292c:	0076      	lsls	r6, r6, #1
 800292e:	4d34      	ldr	r5, [pc, #208]	; (8002a00 <MachineProcess+0x3b8>)
 8002930:	20fc      	movs	r0, #252	; 0xfc
 8002932:	0033      	movs	r3, r6
 8002934:	2201      	movs	r2, #1
 8002936:	0029      	movs	r1, r5
 8002938:	0080      	lsls	r0, r0, #2
 800293a:	f7fe fcdd 	bl	80012f8 <ee24_write>
				  HAL_Delay(10);
 800293e:	200a      	movs	r0, #10
 8002940:	f000 fb5c 	bl	8002ffc <HAL_Delay>
				  ee24_write((EEPROM_KESAR_COUNT_ADDR),(uint8_t *)&eeprom_buff_writeCnt[2],1,300);
 8002944:	20fe      	movs	r0, #254	; 0xfe
 8002946:	0033      	movs	r3, r6
 8002948:	2201      	movs	r2, #1
 800294a:	0029      	movs	r1, r5
 800294c:	0080      	lsls	r0, r0, #2
 800294e:	f7fe fcd3 	bl	80012f8 <ee24_write>
				  HAL_Delay(10);
 8002952:	200a      	movs	r0, #10
 8002954:	f000 fb52 	bl	8002ffc <HAL_Delay>
				  ee24_write((EEPROM_POHA_COUNT_ADDR),(uint8_t *)&eeprom_buff_writeCnt[2],1,300);
 8002958:	2080      	movs	r0, #128	; 0x80
 800295a:	0033      	movs	r3, r6
 800295c:	2201      	movs	r2, #1
 800295e:	0029      	movs	r1, r5
 8002960:	00c0      	lsls	r0, r0, #3
 8002962:	f7fe fcc9 	bl	80012f8 <ee24_write>
				  HAL_Delay(10);
 8002966:	200a      	movs	r0, #10
 8002968:	f000 fb48 	bl	8002ffc <HAL_Delay>
				  pohaCnt = 0;
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <MachineProcess+0x3a0>)
 800296e:	601c      	str	r4, [r3, #0]
				  upmaCnt =0;
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <MachineProcess+0x38c>)
 8002972:	601c      	str	r4, [r3, #0]
				  kesarCnt = 0;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MachineProcess+0x398>)
 8002976:	601c      	str	r4, [r3, #0]
 8002978:	e7b4      	b.n	80028e4 <MachineProcess+0x29c>
			if((up_detected == 1) || (down_detected == 1))
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <MachineProcess+0x3bc>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d004      	beq.n	800298c <MachineProcess+0x344>
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <MachineProcess+0x3c0>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d000      	beq.n	800298c <MachineProcess+0x344>
 800298a:	e66a      	b.n	8002662 <MachineProcess+0x1a>
				if(currentMachineState == homeScreenInit)
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MachineProcess+0x378>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d000      	beq.n	8002996 <MachineProcess+0x34e>
 8002994:	e665      	b.n	8002662 <MachineProcess+0x1a>
					printState = printHomeScreenBold;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <MachineProcess+0x374>)
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
}
 800299c:	e661      	b.n	8002662 <MachineProcess+0x1a>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	200000a1 	.word	0x200000a1
 80029a4:	080066dc 	.word	0x080066dc
 80029a8:	08006710 	.word	0x08006710
 80029ac:	200000c4 	.word	0x200000c4
 80029b0:	0000ffff 	.word	0x0000ffff
 80029b4:	20000204 	.word	0x20000204
 80029b8:	08006720 	.word	0x08006720
 80029bc:	20000000 	.word	0x20000000
 80029c0:	200000a0 	.word	0x200000a0
 80029c4:	200000a2 	.word	0x200000a2
 80029c8:	2000019c 	.word	0x2000019c
 80029cc:	200004f4 	.word	0x200004f4
 80029d0:	08006734 	.word	0x08006734
 80029d4:	20000190 	.word	0x20000190
 80029d8:	20000200 	.word	0x20000200
 80029dc:	0800674c 	.word	0x0800674c
 80029e0:	200001ec 	.word	0x200001ec
 80029e4:	08006764 	.word	0x08006764
 80029e8:	200001d4 	.word	0x200001d4
 80029ec:	2000018c 	.word	0x2000018c
 80029f0:	20000208 	.word	0x20000208
 80029f4:	200005dc 	.word	0x200005dc
 80029f8:	08006790 	.word	0x08006790
 80029fc:	080067e0 	.word	0x080067e0
 8002a00:	20000202 	.word	0x20000202
 8002a04:	2000020a 	.word	0x2000020a
 8002a08:	2000020b 	.word	0x2000020b

08002a0c <DisplayPrint>:




void DisplayPrint(void)
{
 8002a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0e:	46ce      	mov	lr, r9
 8002a10:	4647      	mov	r7, r8
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b083      	sub	sp, #12
	uint8_t i = 0,j =0;

	switch(printState){
 8002a16:	4b6e      	ldr	r3, [pc, #440]	; (8002bd0 <DisplayPrint+0x1c4>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <DisplayPrint+0x20>
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d041      	beq.n	8002aa6 <DisplayPrint+0x9a>
		}


	}

}
 8002a22:	b003      	add	sp, #12
 8002a24:	bc0c      	pop	{r2, r3}
 8002a26:	4690      	mov	r8, r2
 8002a28:	4699      	mov	r9, r3
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ILI9341_FillScreenOffset(ILI9341_WHITE);
 8002a2c:	4869      	ldr	r0, [pc, #420]	; (8002bd4 <DisplayPrint+0x1c8>)
 8002a2e:	f7fe ffe3 	bl	80019f8 <ILI9341_FillScreenOffset>
			HAL_Delay(1);
 8002a32:	2001      	movs	r0, #1
 8002a34:	f000 fae2 	bl	8002ffc <HAL_Delay>
			noOfSettingsAvailable = 0;
 8002a38:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <DisplayPrint+0x1cc>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
			for(i = 1;i <=MAIN_MENU_AVAILABLE ;i++)
 8002a3e:	2401      	movs	r4, #1
 8002a40:	e01a      	b.n	8002a78 <DisplayPrint+0x6c>
				strcpy(temp_buff,mainmenu[i-1]);
 8002a42:	1e63      	subs	r3, r4, #1
 8002a44:	2116      	movs	r1, #22
 8002a46:	4359      	muls	r1, r3
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <DisplayPrint+0x1d0>)
 8002a4a:	18c9      	adds	r1, r1, r3
 8002a4c:	4d64      	ldr	r5, [pc, #400]	; (8002be0 <DisplayPrint+0x1d4>)
 8002a4e:	0028      	movs	r0, r5
 8002a50:	f002 fbc0 	bl	80051d4 <strcpy>
			  ILI9341_WriteString1(MENU_X_AXIS_START,( 4 * i)*10,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 8002a54:	2128      	movs	r1, #40	; 0x28
 8002a56:	4361      	muls	r1, r4
 8002a58:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <DisplayPrint+0x1c8>)
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	002a      	movs	r2, r5
 8002a60:	2028      	movs	r0, #40	; 0x28
 8002a62:	f7fe ff2d 	bl	80018c0 <ILI9341_WriteString1>
			  noOfSettingsAvailable++;
 8002a66:	4a5c      	ldr	r2, [pc, #368]	; (8002bd8 <DisplayPrint+0x1cc>)
 8002a68:	7813      	ldrb	r3, [r2, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	7013      	strb	r3, [r2, #0]
			 HAL_Delay(5);
 8002a6e:	2005      	movs	r0, #5
 8002a70:	f000 fac4 	bl	8002ffc <HAL_Delay>
			for(i = 1;i <=MAIN_MENU_AVAILABLE ;i++)
 8002a74:	3401      	adds	r4, #1
 8002a76:	b2e4      	uxtb	r4, r4
 8002a78:	2c03      	cmp	r4, #3
 8002a7a:	d9e2      	bls.n	8002a42 <DisplayPrint+0x36>
		       strcpy(temp_buff,mainmenu[0]);
 8002a7c:	4c58      	ldr	r4, [pc, #352]	; (8002be0 <DisplayPrint+0x1d4>)
 8002a7e:	4957      	ldr	r1, [pc, #348]	; (8002bdc <DisplayPrint+0x1d0>)
 8002a80:	0020      	movs	r0, r4
 8002a82:	f002 fba7 	bl	80051d4 <strcpy>
			ILI9341_WriteString1(MENU_X_AXIS_START,( 4)*10,temp_buff, ILI9341_RED, ILI9341_WHITE);
 8002a86:	23f8      	movs	r3, #248	; 0xf8
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <DisplayPrint+0x1c8>)
 8002a8a:	9200      	str	r2, [sp, #0]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	0022      	movs	r2, r4
 8002a90:	2128      	movs	r1, #40	; 0x28
 8002a92:	2028      	movs	r0, #40	; 0x28
 8002a94:	f7fe ff14 	bl	80018c0 <ILI9341_WriteString1>
			rCount = 1;
 8002a98:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <DisplayPrint+0x1d8>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	801a      	strh	r2, [r3, #0]
			printState = printStateIdle;
 8002a9e:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <DisplayPrint+0x1c4>)
 8002aa0:	3204      	adds	r2, #4
 8002aa2:	701a      	strb	r2, [r3, #0]
			break;
 8002aa4:	e7bd      	b.n	8002a22 <DisplayPrint+0x16>
				if(down_detected == 1)
 8002aa6:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <DisplayPrint+0x1dc>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d00a      	beq.n	8002ac4 <DisplayPrint+0xb8>
				else if(up_detected == 1)
 8002aae:	4b4f      	ldr	r3, [pc, #316]	; (8002bec <DisplayPrint+0x1e0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d04c      	beq.n	8002b50 <DisplayPrint+0x144>
				up_detected = 0;
 8002ab6:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <DisplayPrint+0x1e0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
			printState = printStateIdle;
 8002abc:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <DisplayPrint+0x1c4>)
 8002abe:	3205      	adds	r2, #5
 8002ac0:	701a      	strb	r2, [r3, #0]
}
 8002ac2:	e7ae      	b.n	8002a22 <DisplayPrint+0x16>
					rCount++;
 8002ac4:	4a47      	ldr	r2, [pc, #284]	; (8002be4 <DisplayPrint+0x1d8>)
 8002ac6:	8813      	ldrh	r3, [r2, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	8013      	strh	r3, [r2, #0]
					if(rCount >= MAIN_MENU_AVAILABLE)
 8002ace:	8813      	ldrh	r3, [r2, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d902      	bls.n	8002adc <DisplayPrint+0xd0>
						rCount = MAIN_MENU_AVAILABLE;
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	2203      	movs	r2, #3
 8002ada:	801a      	strh	r2, [r3, #0]
						strcpy(temp_buff,mainmenu[rCount - 1]);
 8002adc:	4d41      	ldr	r5, [pc, #260]	; (8002be4 <DisplayPrint+0x1d8>)
 8002ade:	882b      	ldrh	r3, [r5, #0]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	2116      	movs	r1, #22
 8002ae4:	4359      	muls	r1, r3
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <DisplayPrint+0x1d0>)
 8002ae8:	18c9      	adds	r1, r1, r3
 8002aea:	4c3d      	ldr	r4, [pc, #244]	; (8002be0 <DisplayPrint+0x1d4>)
 8002aec:	0020      	movs	r0, r4
 8002aee:	f002 fb71 	bl	80051d4 <strcpy>
						ILI9341_WriteString1(MENU_X_AXIS_START,( 4 * (rCount))*10,temp_buff, ILI9341_RED, ILI9341_WHITE);
 8002af2:	8829      	ldrh	r1, [r5, #0]
 8002af4:	23f8      	movs	r3, #248	; 0xf8
 8002af6:	2228      	movs	r2, #40	; 0x28
 8002af8:	4351      	muls	r1, r2
 8002afa:	b289      	uxth	r1, r1
 8002afc:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <DisplayPrint+0x1c8>)
 8002afe:	9200      	str	r2, [sp, #0]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	0022      	movs	r2, r4
 8002b04:	2028      	movs	r0, #40	; 0x28
 8002b06:	f7fe fedb 	bl	80018c0 <ILI9341_WriteString1>
						HAL_Delay(2);
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f000 fa76 	bl	8002ffc <HAL_Delay>
						if(rCount != 1){
 8002b10:	882b      	ldrh	r3, [r5, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d103      	bne.n	8002b20 <DisplayPrint+0x114>
						down_detected = 0;
 8002b18:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <DisplayPrint+0x1dc>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e7ca      	b.n	8002ab6 <DisplayPrint+0xaa>
							strcpy(temp_buff,mainmenu[rCount - 2]);
 8002b20:	4d30      	ldr	r5, [pc, #192]	; (8002be4 <DisplayPrint+0x1d8>)
 8002b22:	882b      	ldrh	r3, [r5, #0]
 8002b24:	3b02      	subs	r3, #2
 8002b26:	2116      	movs	r1, #22
 8002b28:	4359      	muls	r1, r3
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <DisplayPrint+0x1d0>)
 8002b2c:	18c9      	adds	r1, r1, r3
 8002b2e:	4c2c      	ldr	r4, [pc, #176]	; (8002be0 <DisplayPrint+0x1d4>)
 8002b30:	0020      	movs	r0, r4
 8002b32:	f002 fb4f 	bl	80051d4 <strcpy>
							ILI9341_WriteString1(MENU_X_AXIS_START,( 4 * (rCount-1))*10,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 8002b36:	8829      	ldrh	r1, [r5, #0]
 8002b38:	2328      	movs	r3, #40	; 0x28
 8002b3a:	4359      	muls	r1, r3
 8002b3c:	3928      	subs	r1, #40	; 0x28
 8002b3e:	b289      	uxth	r1, r1
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <DisplayPrint+0x1c8>)
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	0022      	movs	r2, r4
 8002b48:	2028      	movs	r0, #40	; 0x28
 8002b4a:	f7fe feb9 	bl	80018c0 <ILI9341_WriteString1>
 8002b4e:	e7e3      	b.n	8002b18 <DisplayPrint+0x10c>
					rCount--;
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <DisplayPrint+0x1d8>)
 8002b52:	8813      	ldrh	r3, [r2, #0]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8013      	strh	r3, [r2, #0]
					if((rCount  == 65535) || (rCount <= 0 ))
 8002b5a:	8813      	ldrh	r3, [r2, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <DisplayPrint+0x1c8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <DisplayPrint+0x162>
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <DisplayPrint+0x1d8>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <DisplayPrint+0x168>
						rCount=1;
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <DisplayPrint+0x1d8>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	801a      	strh	r2, [r3, #0]
					strcpy(temp_buff,mainmenu[rCount - 1]);
 8002b74:	4d1b      	ldr	r5, [pc, #108]	; (8002be4 <DisplayPrint+0x1d8>)
 8002b76:	8829      	ldrh	r1, [r5, #0]
 8002b78:	3901      	subs	r1, #1
 8002b7a:	2316      	movs	r3, #22
 8002b7c:	4698      	mov	r8, r3
 8002b7e:	4359      	muls	r1, r3
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <DisplayPrint+0x1d0>)
 8002b82:	4699      	mov	r9, r3
 8002b84:	4449      	add	r1, r9
 8002b86:	4c16      	ldr	r4, [pc, #88]	; (8002be0 <DisplayPrint+0x1d4>)
 8002b88:	0020      	movs	r0, r4
 8002b8a:	f002 fb23 	bl	80051d4 <strcpy>
					ILI9341_WriteString1(MENU_X_AXIS_START,( 4 * (rCount))*10,temp_buff, ILI9341_RED, ILI9341_WHITE);
 8002b8e:	8829      	ldrh	r1, [r5, #0]
 8002b90:	23f8      	movs	r3, #248	; 0xf8
 8002b92:	2728      	movs	r7, #40	; 0x28
 8002b94:	4379      	muls	r1, r7
 8002b96:	b289      	uxth	r1, r1
 8002b98:	4e0e      	ldr	r6, [pc, #56]	; (8002bd4 <DisplayPrint+0x1c8>)
 8002b9a:	9600      	str	r6, [sp, #0]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	0022      	movs	r2, r4
 8002ba0:	2028      	movs	r0, #40	; 0x28
 8002ba2:	f7fe fe8d 	bl	80018c0 <ILI9341_WriteString1>
					HAL_Delay(2);
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	f000 fa28 	bl	8002ffc <HAL_Delay>
					strcpy(temp_buff,mainmenu[rCount]);
 8002bac:	8829      	ldrh	r1, [r5, #0]
 8002bae:	4643      	mov	r3, r8
 8002bb0:	4359      	muls	r1, r3
 8002bb2:	4449      	add	r1, r9
 8002bb4:	0020      	movs	r0, r4
 8002bb6:	f002 fb0d 	bl	80051d4 <strcpy>
					ILI9341_WriteString1(MENU_X_AXIS_START,( 4 * (rCount+1))*10,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
 8002bba:	8829      	ldrh	r1, [r5, #0]
 8002bbc:	3101      	adds	r1, #1
 8002bbe:	4379      	muls	r1, r7
 8002bc0:	b289      	uxth	r1, r1
 8002bc2:	9600      	str	r6, [sp, #0]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	0022      	movs	r2, r4
 8002bc8:	2028      	movs	r0, #40	; 0x28
 8002bca:	f7fe fe79 	bl	80018c0 <ILI9341_WriteString1>
 8002bce:	e772      	b.n	8002ab6 <DisplayPrint+0xaa>
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	0000ffff 	.word	0x0000ffff
 8002bd8:	200006cc 	.word	0x200006cc
 8002bdc:	080067f8 	.word	0x080067f8
 8002be0:	200000c4 	.word	0x200000c4
 8002be4:	2000019c 	.word	0x2000019c
 8002be8:	2000020b 	.word	0x2000020b
 8002bec:	2000020a 	.word	0x2000020a

08002bf0 <switchDetected>:



void switchDetected(void)
{
	if(ok_detected == 1)
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <switchDetected+0x50>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d000      	beq.n	8002bfa <switchDetected+0xa>
			manualClearFlag = 0;
		}
		home_detected = 0;
	}
#endif
}
 8002bf8:	4770      	bx	lr
		if(currentMachineState == homeScreenInit)
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <switchDetected+0x54>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d003      	beq.n	8002c0a <switchDetected+0x1a>
		ok_detected = 0;
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <switchDetected+0x50>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
}
 8002c08:	e7f6      	b.n	8002bf8 <switchDetected+0x8>
			if(rCount == 1)
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <switchDetected+0x58>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d00d      	beq.n	8002c30 <switchDetected+0x40>
			else if(rCount == 2)
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <switchDetected+0x58>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d00c      	beq.n	8002c38 <switchDetected+0x48>
			else if(rCount == 3)
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <switchDetected+0x58>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d1ec      	bne.n	8002c02 <switchDetected+0x12>
				machineState = kesari_sel;
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <switchDetected+0x5c>)
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e7e8      	b.n	8002c02 <switchDetected+0x12>
				machineState = upma_sel;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <switchDetected+0x5c>)
 8002c32:	2207      	movs	r2, #7
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e7e4      	b.n	8002c02 <switchDetected+0x12>
				machineState = poha_sel;
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <switchDetected+0x5c>)
 8002c3a:	2209      	movs	r2, #9
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e7e0      	b.n	8002c02 <switchDetected+0x12>
 8002c40:	20000208 	.word	0x20000208
 8002c44:	200000a0 	.word	0x200000a0
 8002c48:	2000019c 	.word	0x2000019c
 8002c4c:	200000a1 	.word	0x200000a1

08002c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c50:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_MspInit+0x2c>)
 8002c54:	6999      	ldr	r1, [r3, #24]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	6199      	str	r1, [r3, #24]
 8002c5c:	6999      	ldr	r1, [r3, #24]
 8002c5e:	400a      	ands	r2, r1
 8002c60:	9200      	str	r2, [sp, #0]
 8002c62:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	2180      	movs	r1, #128	; 0x80
 8002c68:	0549      	lsls	r1, r1, #21
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	61da      	str	r2, [r3, #28]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	400b      	ands	r3, r1
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c76:	b002      	add	sp, #8
 8002c78:	4770      	bx	lr
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c80:	b510      	push	{r4, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c86:	2214      	movs	r2, #20
 8002c88:	2100      	movs	r1, #0
 8002c8a:	a803      	add	r0, sp, #12
 8002c8c:	f002 f9b1 	bl	8004ff2 <memset>
  if(hi2c->Instance==I2C1)
 8002c90:	6822      	ldr	r2, [r4, #0]
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_I2C_MspInit+0x60>)
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c98:	b008      	add	sp, #32
 8002c9a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9c:	4c11      	ldr	r4, [pc, #68]	; (8002ce4 <HAL_I2C_MspInit+0x64>)
 8002c9e:	6962      	ldr	r2, [r4, #20]
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	02c9      	lsls	r1, r1, #11
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	6162      	str	r2, [r4, #20]
 8002ca8:	6963      	ldr	r3, [r4, #20]
 8002caa:	400b      	ands	r3, r1
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cb0:	23c0      	movs	r3, #192	; 0xc0
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cba:	3b11      	subs	r3, #17
 8002cbc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002cc2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	a903      	add	r1, sp, #12
 8002cc6:	4808      	ldr	r0, [pc, #32]	; (8002ce8 <HAL_I2C_MspInit+0x68>)
 8002cc8:	f000 fa04 	bl	80030d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ccc:	69e2      	ldr	r2, [r4, #28]
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	0389      	lsls	r1, r1, #14
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	61e2      	str	r2, [r4, #28]
 8002cd6:	69e3      	ldr	r3, [r4, #28]
 8002cd8:	400b      	ands	r3, r1
 8002cda:	9302      	str	r3, [sp, #8]
 8002cdc:	9b02      	ldr	r3, [sp, #8]
}
 8002cde:	e7db      	b.n	8002c98 <HAL_I2C_MspInit+0x18>
 8002ce0:	40005400 	.word	0x40005400
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	48000400 	.word	0x48000400

08002cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cec:	b510      	push	{r4, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf2:	2214      	movs	r2, #20
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	a803      	add	r0, sp, #12
 8002cf8:	f002 f97b 	bl	8004ff2 <memset>
  if(hspi->Instance==SPI1)
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_SPI_MspInit+0x5c>)
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d04:	b008      	add	sp, #32
 8002d06:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_SPI_MspInit+0x60>)
 8002d0a:	6999      	ldr	r1, [r3, #24]
 8002d0c:	2080      	movs	r0, #128	; 0x80
 8002d0e:	0140      	lsls	r0, r0, #5
 8002d10:	4301      	orrs	r1, r0
 8002d12:	6199      	str	r1, [r3, #24]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	4002      	ands	r2, r0
 8002d18:	9201      	str	r2, [sp, #4]
 8002d1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0289      	lsls	r1, r1, #10
 8002d22:	430a      	orrs	r2, r1
 8002d24:	615a      	str	r2, [r3, #20]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	400b      	ands	r3, r1
 8002d2a:	9302      	str	r3, [sp, #8]
 8002d2c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d2e:	23e0      	movs	r3, #224	; 0xe0
 8002d30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	3bde      	subs	r3, #222	; 0xde
 8002d34:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d36:	3301      	adds	r3, #1
 8002d38:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	2090      	movs	r0, #144	; 0x90
 8002d3c:	a903      	add	r1, sp, #12
 8002d3e:	05c0      	lsls	r0, r0, #23
 8002d40:	f000 f9c8 	bl	80030d4 <HAL_GPIO_Init>
}
 8002d44:	e7de      	b.n	8002d04 <HAL_SPI_MspInit+0x18>
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	40013000 	.word	0x40013000
 8002d4c:	40021000 	.word	0x40021000

08002d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d50:	b500      	push	{lr}
 8002d52:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8002d54:	6803      	ldr	r3, [r0, #0]
 8002d56:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <HAL_TIM_Base_MspInit+0x8c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d007      	beq.n	8002d6c <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002d5c:	4a20      	ldr	r2, [pc, #128]	; (8002de0 <HAL_TIM_Base_MspInit+0x90>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d017      	beq.n	8002d92 <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8002d62:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <HAL_TIM_Base_MspInit+0x94>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d026      	beq.n	8002db6 <HAL_TIM_Base_MspInit+0x66>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002d68:	b005      	add	sp, #20
 8002d6a:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d6c:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_TIM_Base_MspInit+0x98>)
 8002d6e:	6991      	ldr	r1, [r2, #24]
 8002d70:	2080      	movs	r0, #128	; 0x80
 8002d72:	0100      	lsls	r0, r0, #4
 8002d74:	4301      	orrs	r1, r0
 8002d76:	6191      	str	r1, [r2, #24]
 8002d78:	6993      	ldr	r3, [r2, #24]
 8002d7a:	4003      	ands	r3, r0
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	200d      	movs	r0, #13
 8002d86:	f000 f94b 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002d8a:	200d      	movs	r0, #13
 8002d8c:	f000 f97a 	bl	8003084 <HAL_NVIC_EnableIRQ>
 8002d90:	e7ea      	b.n	8002d68 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_TIM_Base_MspInit+0x98>)
 8002d94:	69d1      	ldr	r1, [r2, #28]
 8002d96:	2302      	movs	r3, #2
 8002d98:	4319      	orrs	r1, r3
 8002d9a:	61d1      	str	r1, [r2, #28]
 8002d9c:	69d2      	ldr	r2, [r2, #28]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	2010      	movs	r0, #16
 8002daa:	f000 f939 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dae:	2010      	movs	r0, #16
 8002db0:	f000 f968 	bl	8003084 <HAL_NVIC_EnableIRQ>
 8002db4:	e7d8      	b.n	8002d68 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002db6:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <HAL_TIM_Base_MspInit+0x98>)
 8002db8:	6991      	ldr	r1, [r2, #24]
 8002dba:	2080      	movs	r0, #128	; 0x80
 8002dbc:	0240      	lsls	r0, r0, #9
 8002dbe:	4301      	orrs	r1, r0
 8002dc0:	6191      	str	r1, [r2, #24]
 8002dc2:	6993      	ldr	r3, [r2, #24]
 8002dc4:	4003      	ands	r3, r0
 8002dc6:	9303      	str	r3, [sp, #12]
 8002dc8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	2014      	movs	r0, #20
 8002dd0:	f000 f926 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002dd4:	2014      	movs	r0, #20
 8002dd6:	f000 f955 	bl	8003084 <HAL_NVIC_EnableIRQ>
}
 8002dda:	e7c5      	b.n	8002d68 <HAL_TIM_Base_MspInit+0x18>
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40021000 	.word	0x40021000

08002dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002dee:	f001 f923 	bl	8004038 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002df2:	bd10      	pop	{r4, pc}

08002df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df4:	e7fe      	b.n	8002df4 <HardFault_Handler>

08002df6 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002df6:	4770      	bx	lr

08002df8 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df8:	4770      	bx	lr

08002dfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dfa:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dfc:	f000 f8ec 	bl	8002fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e00:	bd10      	pop	{r4, pc}
	...

08002e04 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002e04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
		if(TIM1_Steps!=0)
 8002e06:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x8c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
			Timer1_Count++;
 8002e0e:	4a21      	ldr	r2, [pc, #132]	; (8002e94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x90>)
 8002e10:	6813      	ldr	r3, [r2, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e16:	4820      	ldr	r0, [pc, #128]	; (8002e98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x94>)
 8002e18:	f001 fee2 	bl	8004be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
	  if(Chamber1_flag==1)
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x98>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d012      	beq.n	8002e4a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x46>
		  HAL_GPIO_TogglePin(STEPPER_1_PUL_GPIO_Port, STEPPER_1_PUL_Pin);
	  else if(Chamber2_flag==1)
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x9c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d013      	beq.n	8002e54 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x50>
		  HAL_GPIO_TogglePin(STEPPER_2_PUL_GPIO_Port, STEPPER_2_PUL_Pin);
	  else if(Chamber3_flag==1)
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xa0>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d015      	beq.n	8002e60 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x5c>
		  HAL_GPIO_TogglePin(STEPPER_3_PUL_GPIO_Port, STEPPER_3_PUL_Pin);
	  else if(Chamber4_flag==1)
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xa4>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d016      	beq.n	8002e6a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x66>
	  	  HAL_GPIO_TogglePin(STEPPER_4_PUL_GPIO_Port, STEPPER_4_PUL_Pin);

	  if(TIM1_Steps == Timer1_Count && TIM1_Steps!=0 ){
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x8c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x90>)
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d017      	beq.n	8002e78 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x74>
	 	  StopAllMotors();
	 	  Timer1_Count=0;

	   }
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002e48:	bd10      	pop	{r4, pc}
		  HAL_GPIO_TogglePin(STEPPER_1_PUL_GPIO_Port, STEPPER_1_PUL_Pin);
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	4817      	ldr	r0, [pc, #92]	; (8002eac <TIM1_BRK_UP_TRG_COM_IRQHandler+0xa8>)
 8002e4e:	f000 fa14 	bl	800327a <HAL_GPIO_TogglePin>
 8002e52:	e7f3      	b.n	8002e3c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
		  HAL_GPIO_TogglePin(STEPPER_2_PUL_GPIO_Port, STEPPER_2_PUL_Pin);
 8002e54:	2090      	movs	r0, #144	; 0x90
 8002e56:	2104      	movs	r1, #4
 8002e58:	05c0      	lsls	r0, r0, #23
 8002e5a:	f000 fa0e 	bl	800327a <HAL_GPIO_TogglePin>
 8002e5e:	e7ed      	b.n	8002e3c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
		  HAL_GPIO_TogglePin(STEPPER_3_PUL_GPIO_Port, STEPPER_3_PUL_Pin);
 8002e60:	2120      	movs	r1, #32
 8002e62:	4813      	ldr	r0, [pc, #76]	; (8002eb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xac>)
 8002e64:	f000 fa09 	bl	800327a <HAL_GPIO_TogglePin>
 8002e68:	e7e8      	b.n	8002e3c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
	  	  HAL_GPIO_TogglePin(STEPPER_4_PUL_GPIO_Port, STEPPER_4_PUL_Pin);
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	2090      	movs	r0, #144	; 0x90
 8002e6e:	0089      	lsls	r1, r1, #2
 8002e70:	05c0      	lsls	r0, r0, #23
 8002e72:	f000 fa02 	bl	800327a <HAL_GPIO_TogglePin>
 8002e76:	e7e1      	b.n	8002e3c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
	  if(TIM1_Steps == Timer1_Count && TIM1_Steps!=0 ){
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0e5      	beq.n	8002e48 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>
	 	  HAL_TIM_Base_Stop_IT(&htim1);
 8002e7c:	4806      	ldr	r0, [pc, #24]	; (8002e98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x94>)
 8002e7e:	f001 fe8f 	bl	8004ba0 <HAL_TIM_Base_Stop_IT>
	 	  StopAllMotors();
 8002e82:	f7ff fb0d 	bl	80024a0 <StopAllMotors>
	 	  Timer1_Count=0;
 8002e86:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x90>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
}
 8002e8c:	e7dc      	b.n	8002e48 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000540 	.word	0x20000540
 8002e94:	200000a4 	.word	0x200000a4
 8002e98:	200004f8 	.word	0x200004f8
 8002e9c:	20000091 	.word	0x20000091
 8002ea0:	20000092 	.word	0x20000092
 8002ea4:	20000093 	.word	0x20000093
 8002ea8:	20000094 	.word	0x20000094
 8002eac:	48001400 	.word	0x48001400
 8002eb0:	48000400 	.word	0x48000400

08002eb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002eb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002eb6:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <TIM3_IRQHandler+0xc>)
 8002eb8:	f001 fe92 	bl	8004be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ebc:	bd10      	pop	{r4, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	20000434 	.word	0x20000434

08002ec4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002ec4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002ec6:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <TIM15_IRQHandler+0xc>)
 8002ec8:	f001 fe8a 	bl	8004be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002ecc:	bd10      	pop	{r4, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	200002f4 	.word	0x200002f4

08002ed4 <_sbrk>:
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <_sbrk+0x34>)
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	2a00      	cmp	r2, #0
 8002ede:	d008      	beq.n	8002ef2 <_sbrk+0x1e>
 8002ee0:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <_sbrk+0x34>)
 8002ee2:	6810      	ldr	r0, [r2, #0]
 8002ee4:	18c3      	adds	r3, r0, r3
 8002ee6:	466a      	mov	r2, sp
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d806      	bhi.n	8002efa <_sbrk+0x26>
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <_sbrk+0x34>)
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <_sbrk+0x34>)
 8002ef4:	4905      	ldr	r1, [pc, #20]	; (8002f0c <_sbrk+0x38>)
 8002ef6:	6011      	str	r1, [r2, #0]
 8002ef8:	e7f2      	b.n	8002ee0 <_sbrk+0xc>
 8002efa:	f002 f847 	bl	8004f8c <__errno>
 8002efe:	230c      	movs	r3, #12
 8002f00:	6003      	str	r3, [r0, #0]
 8002f02:	2001      	movs	r0, #1
 8002f04:	4240      	negs	r0, r0
 8002f06:	e7f3      	b.n	8002ef0 <_sbrk+0x1c>
 8002f08:	200000a8 	.word	0x200000a8
 8002f0c:	20000718 	.word	0x20000718

08002f10 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002f10:	4770      	bx	lr
	...

08002f14 <Reset_Handler>:
 8002f14:	480d      	ldr	r0, [pc, #52]	; (8002f4c <LoopForever+0x2>)
 8002f16:	4685      	mov	sp, r0
 8002f18:	480d      	ldr	r0, [pc, #52]	; (8002f50 <LoopForever+0x6>)
 8002f1a:	490e      	ldr	r1, [pc, #56]	; (8002f54 <LoopForever+0xa>)
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <LoopForever+0xe>)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e002      	b.n	8002f28 <LoopCopyDataInit>

08002f22 <CopyDataInit>:
 8002f22:	58d4      	ldr	r4, [r2, r3]
 8002f24:	50c4      	str	r4, [r0, r3]
 8002f26:	3304      	adds	r3, #4

08002f28 <LoopCopyDataInit>:
 8002f28:	18c4      	adds	r4, r0, r3
 8002f2a:	428c      	cmp	r4, r1
 8002f2c:	d3f9      	bcc.n	8002f22 <CopyDataInit>
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <LoopForever+0x12>)
 8002f30:	4c0b      	ldr	r4, [pc, #44]	; (8002f60 <LoopForever+0x16>)
 8002f32:	2300      	movs	r3, #0
 8002f34:	e001      	b.n	8002f3a <LoopFillZerobss>

08002f36 <FillZerobss>:
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	3204      	adds	r2, #4

08002f3a <LoopFillZerobss>:
 8002f3a:	42a2      	cmp	r2, r4
 8002f3c:	d3fb      	bcc.n	8002f36 <FillZerobss>
 8002f3e:	f7ff ffe7 	bl	8002f10 <SystemInit>
 8002f42:	f002 f829 	bl	8004f98 <__libc_init_array>
 8002f46:	f7fe ff41 	bl	8001dcc <main>

08002f4a <LoopForever>:
 8002f4a:	e7fe      	b.n	8002f4a <LoopForever>
 8002f4c:	20002000 	.word	0x20002000
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000074 	.word	0x20000074
 8002f58:	08006920 	.word	0x08006920
 8002f5c:	20000074 	.word	0x20000074
 8002f60:	20000718 	.word	0x20000718

08002f64 <ADC1_IRQHandler>:
 8002f64:	e7fe      	b.n	8002f64 <ADC1_IRQHandler>
	...

08002f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_InitTick+0x44>)
 8002f6e:	7819      	ldrb	r1, [r3, #0]
 8002f70:	20fa      	movs	r0, #250	; 0xfa
 8002f72:	0080      	lsls	r0, r0, #2
 8002f74:	f7fd f8c8 	bl	8000108 <__udivsi3>
 8002f78:	0001      	movs	r1, r0
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_InitTick+0x48>)
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	f7fd f8c3 	bl	8000108 <__udivsi3>
 8002f82:	f000 f88b 	bl	800309c <HAL_SYSTICK_Config>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d10d      	bne.n	8002fa6 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	2c03      	cmp	r4, #3
 8002f8c:	d901      	bls.n	8002f92 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002f8e:	2001      	movs	r0, #1
 8002f90:	e00a      	b.n	8002fa8 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f92:	3001      	adds	r0, #1
 8002f94:	2200      	movs	r2, #0
 8002f96:	0021      	movs	r1, r4
 8002f98:	4240      	negs	r0, r0
 8002f9a:	f000 f841 	bl	8003020 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_InitTick+0x4c>)
 8002fa0:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8002fa6:	2001      	movs	r0, #1
}
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	20000004 	.word	0x20000004
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <HAL_Init>:
{
 8002fb8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fba:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <HAL_Init+0x1c>)
 8002fbc:	6813      	ldr	r3, [r2, #0]
 8002fbe:	2110      	movs	r1, #16
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7ff ffcf 	bl	8002f68 <HAL_InitTick>
  HAL_MspInit();
 8002fca:	f7ff fe41 	bl	8002c50 <HAL_MspInit>
}
 8002fce:	2000      	movs	r0, #0
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	40022000 	.word	0x40022000

08002fd8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002fd8:	4a03      	ldr	r2, [pc, #12]	; (8002fe8 <HAL_IncTick+0x10>)
 8002fda:	6811      	ldr	r1, [r2, #0]
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_IncTick+0x14>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	185b      	adds	r3, r3, r1
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	4770      	bx	lr
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	20000710 	.word	0x20000710
 8002fec:	20000008 	.word	0x20000008

08002ff0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ff0:	4b01      	ldr	r3, [pc, #4]	; (8002ff8 <HAL_GetTick+0x8>)
 8002ff2:	6818      	ldr	r0, [r3, #0]
}
 8002ff4:	4770      	bx	lr
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	20000710 	.word	0x20000710

08002ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff fff6 	bl	8002ff0 <HAL_GetTick>
 8003004:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003006:	1c63      	adds	r3, r4, #1
 8003008:	d002      	beq.n	8003010 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <HAL_Delay+0x20>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003010:	f7ff ffee 	bl	8002ff0 <HAL_GetTick>
 8003014:	1b40      	subs	r0, r0, r5
 8003016:	42a0      	cmp	r0, r4
 8003018:	d3fa      	bcc.n	8003010 <HAL_Delay+0x14>
  {
  }
}
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	20000008 	.word	0x20000008

08003020 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003020:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003022:	2800      	cmp	r0, #0
 8003024:	db11      	blt.n	800304a <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003026:	0883      	lsrs	r3, r0, #2
 8003028:	4d14      	ldr	r5, [pc, #80]	; (800307c <HAL_NVIC_SetPriority+0x5c>)
 800302a:	33c0      	adds	r3, #192	; 0xc0
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	595c      	ldr	r4, [r3, r5]
 8003030:	2203      	movs	r2, #3
 8003032:	4010      	ands	r0, r2
 8003034:	00c0      	lsls	r0, r0, #3
 8003036:	32fc      	adds	r2, #252	; 0xfc
 8003038:	0016      	movs	r6, r2
 800303a:	4086      	lsls	r6, r0
 800303c:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800303e:	0189      	lsls	r1, r1, #6
 8003040:	400a      	ands	r2, r1
 8003042:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003044:	4322      	orrs	r2, r4
 8003046:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003048:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800304a:	b2c0      	uxtb	r0, r0
 800304c:	230f      	movs	r3, #15
 800304e:	4003      	ands	r3, r0
 8003050:	3b08      	subs	r3, #8
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3306      	adds	r3, #6
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_NVIC_SetPriority+0x60>)
 800305a:	4694      	mov	ip, r2
 800305c:	4463      	add	r3, ip
 800305e:	685d      	ldr	r5, [r3, #4]
 8003060:	2403      	movs	r4, #3
 8003062:	4020      	ands	r0, r4
 8003064:	00c0      	lsls	r0, r0, #3
 8003066:	22ff      	movs	r2, #255	; 0xff
 8003068:	0014      	movs	r4, r2
 800306a:	4084      	lsls	r4, r0
 800306c:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800306e:	0189      	lsls	r1, r1, #6
 8003070:	4011      	ands	r1, r2
 8003072:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003074:	4329      	orrs	r1, r5
 8003076:	6059      	str	r1, [r3, #4]
 8003078:	e7e6      	b.n	8003048 <HAL_NVIC_SetPriority+0x28>
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	e000e100 	.word	0xe000e100
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003084:	2800      	cmp	r0, #0
 8003086:	db05      	blt.n	8003094 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003088:	231f      	movs	r3, #31
 800308a:	4018      	ands	r0, r3
 800308c:	3b1e      	subs	r3, #30
 800308e:	4083      	lsls	r3, r0
 8003090:	4a01      	ldr	r2, [pc, #4]	; (8003098 <HAL_NVIC_EnableIRQ+0x14>)
 8003092:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003094:	4770      	bx	lr
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	e000e100 	.word	0xe000e100

0800309c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800309c:	3801      	subs	r0, #1
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_SYSTICK_Config+0x2c>)
 80030a0:	4298      	cmp	r0, r3
 80030a2:	d80f      	bhi.n	80030c4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a4:	4a09      	ldr	r2, [pc, #36]	; (80030cc <HAL_SYSTICK_Config+0x30>)
 80030a6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <HAL_SYSTICK_Config+0x34>)
 80030aa:	6a03      	ldr	r3, [r0, #32]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	21c0      	movs	r1, #192	; 0xc0
 80030b2:	0609      	lsls	r1, r1, #24
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b8:	2300      	movs	r3, #0
 80030ba:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030bc:	3307      	adds	r3, #7
 80030be:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c0:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80030c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80030c4:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80030c6:	e7fc      	b.n	80030c2 <HAL_SYSTICK_Config+0x26>
 80030c8:	00ffffff 	.word	0x00ffffff
 80030cc:	e000e010 	.word	0xe000e010
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80030d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d6:	46ce      	mov	lr, r9
 80030d8:	4647      	mov	r7, r8
 80030da:	b580      	push	{r7, lr}
 80030dc:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e0:	e033      	b.n	800314a <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030e2:	2603      	movs	r6, #3
 80030e4:	e000      	b.n	80030e8 <HAL_GPIO_Init+0x14>
 80030e6:	2600      	movs	r6, #0
 80030e8:	40ae      	lsls	r6, r5
 80030ea:	0035      	movs	r5, r6
 80030ec:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ee:	3402      	adds	r4, #2
 80030f0:	00a4      	lsls	r4, r4, #2
 80030f2:	4e55      	ldr	r6, [pc, #340]	; (8003248 <HAL_GPIO_Init+0x174>)
 80030f4:	51a5      	str	r5, [r4, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f6:	4c55      	ldr	r4, [pc, #340]	; (800324c <HAL_GPIO_Init+0x178>)
 80030f8:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80030fa:	43d4      	mvns	r4, r2
 80030fc:	002e      	movs	r6, r5
 80030fe:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003100:	684f      	ldr	r7, [r1, #4]
 8003102:	03ff      	lsls	r7, r7, #15
 8003104:	d501      	bpl.n	800310a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003106:	4315      	orrs	r5, r2
 8003108:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 800310a:	4d50      	ldr	r5, [pc, #320]	; (800324c <HAL_GPIO_Init+0x178>)
 800310c:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800310e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003110:	002e      	movs	r6, r5
 8003112:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003114:	684f      	ldr	r7, [r1, #4]
 8003116:	03bf      	lsls	r7, r7, #14
 8003118:	d501      	bpl.n	800311e <HAL_GPIO_Init+0x4a>
        {
          temp |= iocurrent;
 800311a:	4315      	orrs	r5, r2
 800311c:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 800311e:	4d4b      	ldr	r5, [pc, #300]	; (800324c <HAL_GPIO_Init+0x178>)
 8003120:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003122:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8003124:	002e      	movs	r6, r5
 8003126:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003128:	684f      	ldr	r7, [r1, #4]
 800312a:	02ff      	lsls	r7, r7, #11
 800312c:	d501      	bpl.n	8003132 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 800312e:	4315      	orrs	r5, r2
 8003130:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8003132:	4d46      	ldr	r5, [pc, #280]	; (800324c <HAL_GPIO_Init+0x178>)
 8003134:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8003136:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003138:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800313a:	684e      	ldr	r6, [r1, #4]
 800313c:	02b6      	lsls	r6, r6, #10
 800313e:	d501      	bpl.n	8003144 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8003140:	432a      	orrs	r2, r5
 8003142:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8003144:	4a41      	ldr	r2, [pc, #260]	; (800324c <HAL_GPIO_Init+0x178>)
 8003146:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8003148:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	680a      	ldr	r2, [r1, #0]
 800314c:	0014      	movs	r4, r2
 800314e:	40dc      	lsrs	r4, r3
 8003150:	d074      	beq.n	800323c <HAL_GPIO_Init+0x168>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003152:	2401      	movs	r4, #1
 8003154:	409c      	lsls	r4, r3
 8003156:	4022      	ands	r2, r4
    if (iocurrent != 0x00u)
 8003158:	d0f6      	beq.n	8003148 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800315a:	684d      	ldr	r5, [r1, #4]
 800315c:	1e6e      	subs	r6, r5, #1
 800315e:	2e01      	cmp	r6, #1
 8003160:	d903      	bls.n	800316a <HAL_GPIO_Init+0x96>
 8003162:	2d11      	cmp	r5, #17
 8003164:	d001      	beq.n	800316a <HAL_GPIO_Init+0x96>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003166:	2d12      	cmp	r5, #18
 8003168:	d112      	bne.n	8003190 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 800316a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800316c:	005f      	lsls	r7, r3, #1
 800316e:	2603      	movs	r6, #3
 8003170:	40be      	lsls	r6, r7
 8003172:	43b5      	bics	r5, r6
 8003174:	002e      	movs	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003176:	68cd      	ldr	r5, [r1, #12]
 8003178:	40bd      	lsls	r5, r7
 800317a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800317c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800317e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003180:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003182:	684c      	ldr	r4, [r1, #4]
 8003184:	0926      	lsrs	r6, r4, #4
 8003186:	2401      	movs	r4, #1
 8003188:	4034      	ands	r4, r6
 800318a:	409c      	lsls	r4, r3
 800318c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800318e:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003190:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003192:	005e      	lsls	r6, r3, #1
 8003194:	2403      	movs	r4, #3
 8003196:	40b4      	lsls	r4, r6
 8003198:	43e4      	mvns	r4, r4
 800319a:	46a4      	mov	ip, r4
 800319c:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800319e:	688d      	ldr	r5, [r1, #8]
 80031a0:	40b5      	lsls	r5, r6
 80031a2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80031a4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a6:	684c      	ldr	r4, [r1, #4]
 80031a8:	2c02      	cmp	r4, #2
 80031aa:	d001      	beq.n	80031b0 <HAL_GPIO_Init+0xdc>
 80031ac:	2c12      	cmp	r4, #18
 80031ae:	d110      	bne.n	80031d2 <HAL_GPIO_Init+0xfe>
        temp = GPIOx->AFR[position >> 3u];
 80031b0:	08dc      	lsrs	r4, r3, #3
 80031b2:	3408      	adds	r4, #8
 80031b4:	00a4      	lsls	r4, r4, #2
 80031b6:	46a1      	mov	r9, r4
 80031b8:	5827      	ldr	r7, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031ba:	2507      	movs	r5, #7
 80031bc:	401d      	ands	r5, r3
 80031be:	00ad      	lsls	r5, r5, #2
 80031c0:	240f      	movs	r4, #15
 80031c2:	40ac      	lsls	r4, r5
 80031c4:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031c6:	690c      	ldr	r4, [r1, #16]
 80031c8:	40ac      	lsls	r4, r5
 80031ca:	0025      	movs	r5, r4
 80031cc:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 80031ce:	464c      	mov	r4, r9
 80031d0:	5025      	str	r5, [r4, r0]
      temp = GPIOx->MODER;
 80031d2:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031d4:	4664      	mov	r4, ip
 80031d6:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d8:	2403      	movs	r4, #3
 80031da:	684f      	ldr	r7, [r1, #4]
 80031dc:	403c      	ands	r4, r7
 80031de:	40b4      	lsls	r4, r6
 80031e0:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80031e2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031e4:	684c      	ldr	r4, [r1, #4]
 80031e6:	00e4      	lsls	r4, r4, #3
 80031e8:	d5ae      	bpl.n	8003148 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	4d19      	ldr	r5, [pc, #100]	; (8003250 <HAL_GPIO_Init+0x17c>)
 80031ec:	69ae      	ldr	r6, [r5, #24]
 80031ee:	2401      	movs	r4, #1
 80031f0:	4326      	orrs	r6, r4
 80031f2:	61ae      	str	r6, [r5, #24]
 80031f4:	69ad      	ldr	r5, [r5, #24]
 80031f6:	402c      	ands	r4, r5
 80031f8:	9401      	str	r4, [sp, #4]
 80031fa:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80031fc:	089c      	lsrs	r4, r3, #2
 80031fe:	1ca5      	adds	r5, r4, #2
 8003200:	00ad      	lsls	r5, r5, #2
 8003202:	4e11      	ldr	r6, [pc, #68]	; (8003248 <HAL_GPIO_Init+0x174>)
 8003204:	59af      	ldr	r7, [r5, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003206:	2503      	movs	r5, #3
 8003208:	401d      	ands	r5, r3
 800320a:	00ad      	lsls	r5, r5, #2
 800320c:	260f      	movs	r6, #15
 800320e:	40ae      	lsls	r6, r5
 8003210:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003212:	2690      	movs	r6, #144	; 0x90
 8003214:	05f6      	lsls	r6, r6, #23
 8003216:	42b0      	cmp	r0, r6
 8003218:	d100      	bne.n	800321c <HAL_GPIO_Init+0x148>
 800321a:	e764      	b.n	80030e6 <HAL_GPIO_Init+0x12>
 800321c:	4e0d      	ldr	r6, [pc, #52]	; (8003254 <HAL_GPIO_Init+0x180>)
 800321e:	42b0      	cmp	r0, r6
 8003220:	d008      	beq.n	8003234 <HAL_GPIO_Init+0x160>
 8003222:	4e0d      	ldr	r6, [pc, #52]	; (8003258 <HAL_GPIO_Init+0x184>)
 8003224:	42b0      	cmp	r0, r6
 8003226:	d007      	beq.n	8003238 <HAL_GPIO_Init+0x164>
 8003228:	4e0c      	ldr	r6, [pc, #48]	; (800325c <HAL_GPIO_Init+0x188>)
 800322a:	42b0      	cmp	r0, r6
 800322c:	d100      	bne.n	8003230 <HAL_GPIO_Init+0x15c>
 800322e:	e758      	b.n	80030e2 <HAL_GPIO_Init+0xe>
 8003230:	2605      	movs	r6, #5
 8003232:	e759      	b.n	80030e8 <HAL_GPIO_Init+0x14>
 8003234:	2601      	movs	r6, #1
 8003236:	e757      	b.n	80030e8 <HAL_GPIO_Init+0x14>
 8003238:	2602      	movs	r6, #2
 800323a:	e755      	b.n	80030e8 <HAL_GPIO_Init+0x14>
  } 
}
 800323c:	b003      	add	sp, #12
 800323e:	bc0c      	pop	{r2, r3}
 8003240:	4690      	mov	r8, r2
 8003242:	4699      	mov	r9, r3
 8003244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	40010000 	.word	0x40010000
 800324c:	40010400 	.word	0x40010400
 8003250:	40021000 	.word	0x40021000
 8003254:	48000400 	.word	0x48000400
 8003258:	48000800 	.word	0x48000800
 800325c:	48000c00 	.word	0x48000c00

08003260 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003260:	6903      	ldr	r3, [r0, #16]
 8003262:	420b      	tst	r3, r1
 8003264:	d101      	bne.n	800326a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003266:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 8003268:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800326a:	2001      	movs	r0, #1
 800326c:	e7fc      	b.n	8003268 <HAL_GPIO_ReadPin+0x8>

0800326e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800326e:	2a00      	cmp	r2, #0
 8003270:	d101      	bne.n	8003276 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003272:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003274:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003276:	6181      	str	r1, [r0, #24]
 8003278:	e7fc      	b.n	8003274 <HAL_GPIO_WritePin+0x6>

0800327a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800327a:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800327c:	0013      	movs	r3, r2
 800327e:	400b      	ands	r3, r1
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	4391      	bics	r1, r2
 8003284:	4319      	orrs	r1, r3
 8003286:	6181      	str	r1, [r0, #24]
}
 8003288:	4770      	bx	lr

0800328a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800328a:	6803      	ldr	r3, [r0, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	0792      	lsls	r2, r2, #30
 8003290:	d501      	bpl.n	8003296 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003296:	6803      	ldr	r3, [r0, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	07d2      	lsls	r2, r2, #31
 800329c:	d403      	bmi.n	80032a6 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	2101      	movs	r1, #1
 80032a2:	430a      	orrs	r2, r1
 80032a4:	619a      	str	r2, [r3, #24]
  }
}
 80032a6:	4770      	bx	lr

080032a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032aa:	9c05      	ldr	r4, [sp, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80032ac:	6805      	ldr	r5, [r0, #0]
 80032ae:	6868      	ldr	r0, [r5, #4]
 80032b0:	0d66      	lsrs	r6, r4, #21
 80032b2:	2780      	movs	r7, #128	; 0x80
 80032b4:	00ff      	lsls	r7, r7, #3
 80032b6:	4037      	ands	r7, r6
 80032b8:	4e05      	ldr	r6, [pc, #20]	; (80032d0 <I2C_TransferConfig+0x28>)
 80032ba:	433e      	orrs	r6, r7
 80032bc:	43b0      	bics	r0, r6
 80032be:	0589      	lsls	r1, r1, #22
 80032c0:	0d89      	lsrs	r1, r1, #22
 80032c2:	0412      	lsls	r2, r2, #16
 80032c4:	4311      	orrs	r1, r2
 80032c6:	430b      	orrs	r3, r1
 80032c8:	4323      	orrs	r3, r4
 80032ca:	4303      	orrs	r3, r0
 80032cc:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d0:	03ff63ff 	.word	0x03ff63ff

080032d4 <I2C_IsAcknowledgeFailed>:
{
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	0004      	movs	r4, r0
 80032d8:	000e      	movs	r6, r1
 80032da:	0015      	movs	r5, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032dc:	6803      	ldr	r3, [r0, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	06db      	lsls	r3, r3, #27
 80032e2:	d519      	bpl.n	8003318 <I2C_IsAcknowledgeFailed+0x44>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	0692      	lsls	r2, r2, #26
 80032ea:	d417      	bmi.n	800331c <I2C_IsAcknowledgeFailed+0x48>
      if (Timeout != HAL_MAX_DELAY)
 80032ec:	1c73      	adds	r3, r6, #1
 80032ee:	d0f9      	beq.n	80032e4 <I2C_IsAcknowledgeFailed+0x10>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7ff fe7e 	bl	8002ff0 <HAL_GetTick>
 80032f4:	1b40      	subs	r0, r0, r5
 80032f6:	42b0      	cmp	r0, r6
 80032f8:	d801      	bhi.n	80032fe <I2C_IsAcknowledgeFailed+0x2a>
 80032fa:	2e00      	cmp	r6, #0
 80032fc:	d1f2      	bne.n	80032e4 <I2C_IsAcknowledgeFailed+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003300:	2220      	movs	r2, #32
 8003302:	4313      	orrs	r3, r2
 8003304:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003306:	2341      	movs	r3, #65	; 0x41
 8003308:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	2300      	movs	r3, #0
 800330c:	3222      	adds	r2, #34	; 0x22
 800330e:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8003310:	3a02      	subs	r2, #2
 8003312:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8003314:	2001      	movs	r0, #1
 8003316:	e01a      	b.n	800334e <I2C_IsAcknowledgeFailed+0x7a>
  return HAL_OK;
 8003318:	2000      	movs	r0, #0
 800331a:	e018      	b.n	800334e <I2C_IsAcknowledgeFailed+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331c:	2210      	movs	r2, #16
 800331e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	2520      	movs	r5, #32
 8003324:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003326:	0020      	movs	r0, r4
 8003328:	f7ff ffaf 	bl	800328a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	6853      	ldr	r3, [r2, #4]
 8003330:	4907      	ldr	r1, [pc, #28]	; (8003350 <I2C_IsAcknowledgeFailed+0x7c>)
 8003332:	400b      	ands	r3, r1
 8003334:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003338:	2204      	movs	r2, #4
 800333a:	4313      	orrs	r3, r2
 800333c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	2341      	movs	r3, #65	; 0x41
 8003340:	54e5      	strb	r5, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	2300      	movs	r3, #0
 8003344:	323e      	adds	r2, #62	; 0x3e
 8003346:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003348:	3a02      	subs	r2, #2
 800334a:	54a3      	strb	r3, [r4, r2]
    return HAL_ERROR;
 800334c:	2001      	movs	r0, #1
}
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	fe00e800 	.word	0xfe00e800

08003354 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	0004      	movs	r4, r0
 8003358:	000d      	movs	r5, r1
 800335a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	079b      	lsls	r3, r3, #30
 8003362:	d41c      	bmi.n	800339e <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003364:	0032      	movs	r2, r6
 8003366:	0029      	movs	r1, r5
 8003368:	0020      	movs	r0, r4
 800336a:	f7ff ffb3 	bl	80032d4 <I2C_IsAcknowledgeFailed>
 800336e:	2800      	cmp	r0, #0
 8003370:	d117      	bne.n	80033a2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003372:	1c6b      	adds	r3, r5, #1
 8003374:	d0f2      	beq.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7ff fe3b 	bl	8002ff0 <HAL_GetTick>
 800337a:	1b80      	subs	r0, r0, r6
 800337c:	42a8      	cmp	r0, r5
 800337e:	d801      	bhi.n	8003384 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8003380:	2d00      	cmp	r5, #0
 8003382:	d1eb      	bne.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003386:	2220      	movs	r2, #32
 8003388:	4313      	orrs	r3, r2
 800338a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800338c:	2341      	movs	r3, #65	; 0x41
 800338e:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	2300      	movs	r3, #0
 8003392:	3222      	adds	r2, #34	; 0x22
 8003394:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8003396:	3a02      	subs	r2, #2
 8003398:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 800339a:	2001      	movs	r0, #1
 800339c:	e000      	b.n	80033a0 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  return HAL_OK;
 800339e:	2000      	movs	r0, #0
}
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80033a2:	2001      	movs	r0, #1
 80033a4:	e7fc      	b.n	80033a0 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>

080033a6 <I2C_WaitOnFlagUntilTimeout>:
{
 80033a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a8:	0006      	movs	r6, r0
 80033aa:	000c      	movs	r4, r1
 80033ac:	0017      	movs	r7, r2
 80033ae:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b0:	6833      	ldr	r3, [r6, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	4023      	ands	r3, r4
 80033b6:	1b1b      	subs	r3, r3, r4
 80033b8:	425a      	negs	r2, r3
 80033ba:	4153      	adcs	r3, r2
 80033bc:	42bb      	cmp	r3, r7
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80033c0:	1c6b      	adds	r3, r5, #1
 80033c2:	d0f5      	beq.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c4:	f7ff fe14 	bl	8002ff0 <HAL_GetTick>
 80033c8:	9b06      	ldr	r3, [sp, #24]
 80033ca:	1ac0      	subs	r0, r0, r3
 80033cc:	42a8      	cmp	r0, r5
 80033ce:	d801      	bhi.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	d1ed      	bne.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80033d6:	2220      	movs	r2, #32
 80033d8:	4313      	orrs	r3, r2
 80033da:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	2341      	movs	r3, #65	; 0x41
 80033de:	54f2      	strb	r2, [r6, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	3222      	adds	r2, #34	; 0x22
 80033e4:	54b3      	strb	r3, [r6, r2]
        __HAL_UNLOCK(hi2c);
 80033e6:	3a02      	subs	r2, #2
 80033e8:	54b3      	strb	r3, [r6, r2]
        return HAL_ERROR;
 80033ea:	2001      	movs	r0, #1
 80033ec:	e000      	b.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80033ee:	2000      	movs	r0, #0
}
 80033f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033f4 <I2C_RequestMemoryWrite>:
{
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	0004      	movs	r4, r0
 80033fa:	0016      	movs	r6, r2
 80033fc:	001d      	movs	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	b2ea      	uxtb	r2, r5
 8003402:	4818      	ldr	r0, [pc, #96]	; (8003464 <I2C_RequestMemoryWrite+0x70>)
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	045b      	lsls	r3, r3, #17
 8003408:	0020      	movs	r0, r4
 800340a:	f7ff ff4d 	bl	80032a8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	9a07      	ldr	r2, [sp, #28]
 8003410:	9906      	ldr	r1, [sp, #24]
 8003412:	0020      	movs	r0, r4
 8003414:	f7ff ff9e 	bl	8003354 <I2C_WaitOnTXISFlagUntilTimeout>
 8003418:	2800      	cmp	r0, #0
 800341a:	d11e      	bne.n	800345a <I2C_RequestMemoryWrite+0x66>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800341c:	2d01      	cmp	r5, #1
 800341e:	d10e      	bne.n	800343e <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	b2f6      	uxtb	r6, r6
 8003424:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003426:	9b07      	ldr	r3, [sp, #28]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	9b06      	ldr	r3, [sp, #24]
 800342c:	2200      	movs	r2, #0
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	0020      	movs	r0, r4
 8003432:	f7ff ffb8 	bl	80033a6 <I2C_WaitOnFlagUntilTimeout>
 8003436:	2800      	cmp	r0, #0
 8003438:	d010      	beq.n	800345c <I2C_RequestMemoryWrite+0x68>
    return HAL_ERROR;
 800343a:	2001      	movs	r0, #1
 800343c:	e00e      	b.n	800345c <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	0a32      	lsrs	r2, r6, #8
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003444:	9a07      	ldr	r2, [sp, #28]
 8003446:	9906      	ldr	r1, [sp, #24]
 8003448:	0020      	movs	r0, r4
 800344a:	f7ff ff83 	bl	8003354 <I2C_WaitOnTXISFlagUntilTimeout>
 800344e:	2800      	cmp	r0, #0
 8003450:	d106      	bne.n	8003460 <I2C_RequestMemoryWrite+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	b2f6      	uxtb	r6, r6
 8003456:	629e      	str	r6, [r3, #40]	; 0x28
 8003458:	e7e5      	b.n	8003426 <I2C_RequestMemoryWrite+0x32>
    return HAL_ERROR;
 800345a:	2001      	movs	r0, #1
}
 800345c:	b002      	add	sp, #8
 800345e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003460:	2001      	movs	r0, #1
 8003462:	e7fb      	b.n	800345c <I2C_RequestMemoryWrite+0x68>
 8003464:	80002000 	.word	0x80002000

08003468 <I2C_RequestMemoryRead>:
{
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	0004      	movs	r4, r0
 800346e:	0016      	movs	r6, r2
 8003470:	001d      	movs	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003472:	b2da      	uxtb	r2, r3
 8003474:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <I2C_RequestMemoryRead+0x6c>)
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2300      	movs	r3, #0
 800347a:	f7ff ff15 	bl	80032a8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347e:	9a07      	ldr	r2, [sp, #28]
 8003480:	9906      	ldr	r1, [sp, #24]
 8003482:	0020      	movs	r0, r4
 8003484:	f7ff ff66 	bl	8003354 <I2C_WaitOnTXISFlagUntilTimeout>
 8003488:	2800      	cmp	r0, #0
 800348a:	d11e      	bne.n	80034ca <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800348c:	2d01      	cmp	r5, #1
 800348e:	d10e      	bne.n	80034ae <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	b2f6      	uxtb	r6, r6
 8003494:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003496:	9b07      	ldr	r3, [sp, #28]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	9b06      	ldr	r3, [sp, #24]
 800349c:	2200      	movs	r2, #0
 800349e:	2140      	movs	r1, #64	; 0x40
 80034a0:	0020      	movs	r0, r4
 80034a2:	f7ff ff80 	bl	80033a6 <I2C_WaitOnFlagUntilTimeout>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d010      	beq.n	80034cc <I2C_RequestMemoryRead+0x64>
    return HAL_ERROR;
 80034aa:	2001      	movs	r0, #1
 80034ac:	e00e      	b.n	80034cc <I2C_RequestMemoryRead+0x64>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	0a32      	lsrs	r2, r6, #8
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b4:	9a07      	ldr	r2, [sp, #28]
 80034b6:	9906      	ldr	r1, [sp, #24]
 80034b8:	0020      	movs	r0, r4
 80034ba:	f7ff ff4b 	bl	8003354 <I2C_WaitOnTXISFlagUntilTimeout>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d106      	bne.n	80034d0 <I2C_RequestMemoryRead+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	b2f6      	uxtb	r6, r6
 80034c6:	629e      	str	r6, [r3, #40]	; 0x28
 80034c8:	e7e5      	b.n	8003496 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
}
 80034cc:	b002      	add	sp, #8
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80034d0:	2001      	movs	r0, #1
 80034d2:	e7fb      	b.n	80034cc <I2C_RequestMemoryRead+0x64>
 80034d4:	80002000 	.word	0x80002000

080034d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	0005      	movs	r5, r0
 80034dc:	000c      	movs	r4, r1
 80034de:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	069b      	lsls	r3, r3, #26
 80034e6:	d41a      	bmi.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e8:	0032      	movs	r2, r6
 80034ea:	0021      	movs	r1, r4
 80034ec:	0028      	movs	r0, r5
 80034ee:	f7ff fef1 	bl	80032d4 <I2C_IsAcknowledgeFailed>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d115      	bne.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7ff fd7b 	bl	8002ff0 <HAL_GetTick>
 80034fa:	1b80      	subs	r0, r0, r6
 80034fc:	42a0      	cmp	r0, r4
 80034fe:	d801      	bhi.n	8003504 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003500:	2c00      	cmp	r4, #0
 8003502:	d1ed      	bne.n	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003504:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003506:	2220      	movs	r2, #32
 8003508:	4313      	orrs	r3, r2
 800350a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800350c:	2341      	movs	r3, #65	; 0x41
 800350e:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	2300      	movs	r3, #0
 8003512:	3222      	adds	r2, #34	; 0x22
 8003514:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 8003516:	3a02      	subs	r2, #2
 8003518:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 800351a:	2001      	movs	r0, #1
}
 800351c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800351e:	2000      	movs	r0, #0
 8003520:	e7fc      	b.n	800351c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8003522:	2001      	movs	r0, #1
 8003524:	e7fa      	b.n	800351c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
	...

08003528 <HAL_I2C_Init>:
{
 8003528:	b510      	push	{r4, lr}
 800352a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 800352c:	d059      	beq.n	80035e2 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800352e:	2341      	movs	r3, #65	; 0x41
 8003530:	5cc3      	ldrb	r3, [r0, r3]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d043      	beq.n	80035be <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003536:	2341      	movs	r3, #65	; 0x41
 8003538:	2224      	movs	r2, #36	; 0x24
 800353a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 800353c:	6822      	ldr	r2, [r4, #0]
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	438b      	bics	r3, r1
 8003544:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003546:	6822      	ldr	r2, [r4, #0]
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_I2C_Init+0xc0>)
 800354a:	6861      	ldr	r1, [r4, #4]
 800354c:	400b      	ands	r3, r1
 800354e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	6893      	ldr	r3, [r2, #8]
 8003554:	4925      	ldr	r1, [pc, #148]	; (80035ec <HAL_I2C_Init+0xc4>)
 8003556:	400b      	ands	r3, r1
 8003558:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d034      	beq.n	80035ca <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	2384      	movs	r3, #132	; 0x84
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68a1      	ldr	r1, [r4, #8]
 8003568:	430b      	orrs	r3, r1
 800356a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800356c:	68e3      	ldr	r3, [r4, #12]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d032      	beq.n	80035d8 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003572:	6822      	ldr	r2, [r4, #0]
 8003574:	6851      	ldr	r1, [r2, #4]
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_I2C_Init+0xc8>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800357c:	6822      	ldr	r2, [r4, #0]
 800357e:	68d3      	ldr	r3, [r2, #12]
 8003580:	491a      	ldr	r1, [pc, #104]	; (80035ec <HAL_I2C_Init+0xc4>)
 8003582:	400b      	ands	r3, r1
 8003584:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003586:	6923      	ldr	r3, [r4, #16]
 8003588:	6962      	ldr	r2, [r4, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	69a2      	ldr	r2, [r4, #24]
 800358e:	0212      	lsls	r2, r2, #8
 8003590:	6821      	ldr	r1, [r4, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	69e3      	ldr	r3, [r4, #28]
 800359a:	6a21      	ldr	r1, [r4, #32]
 800359c:	430b      	orrs	r3, r1
 800359e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	2241      	movs	r2, #65	; 0x41
 80035b0:	311f      	adds	r1, #31
 80035b2:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b6:	3201      	adds	r2, #1
 80035b8:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80035ba:	2000      	movs	r0, #0
}
 80035bc:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80035be:	3340      	adds	r3, #64	; 0x40
 80035c0:	2200      	movs	r2, #0
 80035c2:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80035c4:	f7ff fb5c 	bl	8002c80 <HAL_I2C_MspInit>
 80035c8:	e7b5      	b.n	8003536 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	68a1      	ldr	r1, [r4, #8]
 80035d2:	430b      	orrs	r3, r1
 80035d4:	6093      	str	r3, [r2, #8]
 80035d6:	e7c9      	b.n	800356c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	e7c7      	b.n	8003572 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80035e2:	2001      	movs	r0, #1
 80035e4:	e7ea      	b.n	80035bc <HAL_I2C_Init+0x94>
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	f0ffffff 	.word	0xf0ffffff
 80035ec:	ffff7fff 	.word	0xffff7fff
 80035f0:	02008000 	.word	0x02008000

080035f4 <HAL_I2C_Mem_Write>:
{
 80035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	0005      	movs	r5, r0
 80035fa:	9103      	str	r1, [sp, #12]
 80035fc:	9204      	str	r2, [sp, #16]
 80035fe:	9305      	str	r3, [sp, #20]
 8003600:	ab0c      	add	r3, sp, #48	; 0x30
 8003602:	cb10      	ldmia	r3!, {r4}
 8003604:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003606:	2341      	movs	r3, #65	; 0x41
 8003608:	5cc3      	ldrb	r3, [r0, r3]
 800360a:	2b20      	cmp	r3, #32
 800360c:	d000      	beq.n	8003610 <HAL_I2C_Mem_Write+0x1c>
 800360e:	e0b3      	b.n	8003778 <HAL_I2C_Mem_Write+0x184>
    if ((pData == NULL) || (Size == 0U))
 8003610:	2c00      	cmp	r4, #0
 8003612:	d018      	beq.n	8003646 <HAL_I2C_Mem_Write+0x52>
 8003614:	2e00      	cmp	r6, #0
 8003616:	d016      	beq.n	8003646 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8003618:	2340      	movs	r3, #64	; 0x40
 800361a:	5cc3      	ldrb	r3, [r0, r3]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d100      	bne.n	8003622 <HAL_I2C_Mem_Write+0x2e>
 8003620:	e0ad      	b.n	800377e <HAL_I2C_Mem_Write+0x18a>
 8003622:	2340      	movs	r3, #64	; 0x40
 8003624:	2201      	movs	r2, #1
 8003626:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8003628:	f7ff fce2 	bl	8002ff0 <HAL_GetTick>
 800362c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	9000      	str	r0, [sp, #0]
 8003632:	2319      	movs	r3, #25
 8003634:	2201      	movs	r2, #1
 8003636:	0209      	lsls	r1, r1, #8
 8003638:	0028      	movs	r0, r5
 800363a:	f7ff feb4 	bl	80033a6 <I2C_WaitOnFlagUntilTimeout>
 800363e:	2800      	cmp	r0, #0
 8003640:	d006      	beq.n	8003650 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8003642:	2001      	movs	r0, #1
 8003644:	e099      	b.n	800377a <HAL_I2C_Mem_Write+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	646b      	str	r3, [r5, #68]	; 0x44
      return  HAL_ERROR;
 800364c:	2001      	movs	r0, #1
 800364e:	e094      	b.n	800377a <HAL_I2C_Mem_Write+0x186>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003650:	2341      	movs	r3, #65	; 0x41
 8003652:	2221      	movs	r2, #33	; 0x21
 8003654:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003656:	3301      	adds	r3, #1
 8003658:	321f      	adds	r2, #31
 800365a:	54ea      	strb	r2, [r5, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365c:	2300      	movs	r3, #0
 800365e:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003660:	626c      	str	r4, [r5, #36]	; 0x24
    hi2c->XferCount = Size;
 8003662:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003664:	636b      	str	r3, [r5, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003666:	9701      	str	r7, [sp, #4]
 8003668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	9b05      	ldr	r3, [sp, #20]
 800366e:	9a04      	ldr	r2, [sp, #16]
 8003670:	9903      	ldr	r1, [sp, #12]
 8003672:	0028      	movs	r0, r5
 8003674:	f7ff febe 	bl	80033f4 <I2C_RequestMemoryWrite>
 8003678:	2800      	cmp	r0, #0
 800367a:	d10f      	bne.n	800369c <HAL_I2C_Mem_Write+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800367c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2bff      	cmp	r3, #255	; 0xff
 8003682:	d910      	bls.n	80036a6 <HAL_I2C_Mem_Write+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003684:	23ff      	movs	r3, #255	; 0xff
 8003686:	852b      	strh	r3, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003688:	3b7f      	subs	r3, #127	; 0x7f
 800368a:	2200      	movs	r2, #0
 800368c:	9200      	str	r2, [sp, #0]
 800368e:	045b      	lsls	r3, r3, #17
 8003690:	32ff      	adds	r2, #255	; 0xff
 8003692:	9903      	ldr	r1, [sp, #12]
 8003694:	0028      	movs	r0, r5
 8003696:	f7ff fe07 	bl	80032a8 <I2C_TransferConfig>
 800369a:	e021      	b.n	80036e0 <HAL_I2C_Mem_Write+0xec>
      __HAL_UNLOCK(hi2c);
 800369c:	2340      	movs	r3, #64	; 0x40
 800369e:	2200      	movs	r2, #0
 80036a0:	54ea      	strb	r2, [r5, r3]
      return HAL_ERROR;
 80036a2:	2001      	movs	r0, #1
 80036a4:	e069      	b.n	800377a <HAL_I2C_Mem_Write+0x186>
      hi2c->XferSize = hi2c->XferCount;
 80036a6:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 80036a8:	b292      	uxth	r2, r2
 80036aa:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	2100      	movs	r1, #0
 80036b2:	9100      	str	r1, [sp, #0]
 80036b4:	049b      	lsls	r3, r3, #18
 80036b6:	9903      	ldr	r1, [sp, #12]
 80036b8:	0028      	movs	r0, r5
 80036ba:	f7ff fdf5 	bl	80032a8 <I2C_TransferConfig>
 80036be:	e00f      	b.n	80036e0 <HAL_I2C_Mem_Write+0xec>
          hi2c->XferSize = hi2c->XferCount;
 80036c0:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 80036c2:	b292      	uxth	r2, r2
 80036c4:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	2100      	movs	r1, #0
 80036cc:	9100      	str	r1, [sp, #0]
 80036ce:	049b      	lsls	r3, r3, #18
 80036d0:	9903      	ldr	r1, [sp, #12]
 80036d2:	0028      	movs	r0, r5
 80036d4:	f7ff fde8 	bl	80032a8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80036d8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d034      	beq.n	800374a <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e0:	003a      	movs	r2, r7
 80036e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80036e4:	0028      	movs	r0, r5
 80036e6:	f7ff fe35 	bl	8003354 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d149      	bne.n	8003782 <HAL_I2C_Mem_Write+0x18e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80036f2:	7812      	ldrb	r2, [r2, #0]
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80036f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80036f8:	3301      	adds	r3, #1
 80036fa:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 80036fc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	856b      	strh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8003704:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29b      	uxth	r3, r3
 800370a:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800370c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800370e:	b292      	uxth	r2, r2
 8003710:	2a00      	cmp	r2, #0
 8003712:	d0e1      	beq.n	80036d8 <HAL_I2C_Mem_Write+0xe4>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1df      	bne.n	80036d8 <HAL_I2C_Mem_Write+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003718:	9700      	str	r7, [sp, #0]
 800371a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800371c:	2200      	movs	r2, #0
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	0028      	movs	r0, r5
 8003722:	f7ff fe40 	bl	80033a6 <I2C_WaitOnFlagUntilTimeout>
 8003726:	2800      	cmp	r0, #0
 8003728:	d12d      	bne.n	8003786 <HAL_I2C_Mem_Write+0x192>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2bff      	cmp	r3, #255	; 0xff
 8003730:	d9c6      	bls.n	80036c0 <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003732:	23ff      	movs	r3, #255	; 0xff
 8003734:	852b      	strh	r3, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003736:	3b7f      	subs	r3, #127	; 0x7f
 8003738:	2200      	movs	r2, #0
 800373a:	9200      	str	r2, [sp, #0]
 800373c:	045b      	lsls	r3, r3, #17
 800373e:	32ff      	adds	r2, #255	; 0xff
 8003740:	9903      	ldr	r1, [sp, #12]
 8003742:	0028      	movs	r0, r5
 8003744:	f7ff fdb0 	bl	80032a8 <I2C_TransferConfig>
 8003748:	e7c6      	b.n	80036d8 <HAL_I2C_Mem_Write+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374a:	003a      	movs	r2, r7
 800374c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800374e:	0028      	movs	r0, r5
 8003750:	f7ff fec2 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003754:	2800      	cmp	r0, #0
 8003756:	d118      	bne.n	800378a <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	2220      	movs	r2, #32
 800375c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800375e:	6829      	ldr	r1, [r5, #0]
 8003760:	684b      	ldr	r3, [r1, #4]
 8003762:	4c0b      	ldr	r4, [pc, #44]	; (8003790 <HAL_I2C_Mem_Write+0x19c>)
 8003764:	4023      	ands	r3, r4
 8003766:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003768:	2341      	movs	r3, #65	; 0x41
 800376a:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800376c:	2300      	movs	r3, #0
 800376e:	3222      	adds	r2, #34	; 0x22
 8003770:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 8003772:	3a02      	subs	r2, #2
 8003774:	54ab      	strb	r3, [r5, r2]
    return HAL_OK;
 8003776:	e000      	b.n	800377a <HAL_I2C_Mem_Write+0x186>
    return HAL_BUSY;
 8003778:	2002      	movs	r0, #2
}
 800377a:	b007      	add	sp, #28
 800377c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800377e:	2002      	movs	r0, #2
 8003780:	e7fb      	b.n	800377a <HAL_I2C_Mem_Write+0x186>
        return HAL_ERROR;
 8003782:	2001      	movs	r0, #1
 8003784:	e7f9      	b.n	800377a <HAL_I2C_Mem_Write+0x186>
          return HAL_ERROR;
 8003786:	2001      	movs	r0, #1
 8003788:	e7f7      	b.n	800377a <HAL_I2C_Mem_Write+0x186>
      return HAL_ERROR;
 800378a:	2001      	movs	r0, #1
 800378c:	e7f5      	b.n	800377a <HAL_I2C_Mem_Write+0x186>
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fe00e800 	.word	0xfe00e800

08003794 <HAL_I2C_Mem_Read>:
{
 8003794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003796:	b087      	sub	sp, #28
 8003798:	0004      	movs	r4, r0
 800379a:	9103      	str	r1, [sp, #12]
 800379c:	9204      	str	r2, [sp, #16]
 800379e:	9305      	str	r3, [sp, #20]
 80037a0:	ab0c      	add	r3, sp, #48	; 0x30
 80037a2:	cb20      	ldmia	r3!, {r5}
 80037a4:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	2341      	movs	r3, #65	; 0x41
 80037a8:	5cc3      	ldrb	r3, [r0, r3]
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d000      	beq.n	80037b0 <HAL_I2C_Mem_Read+0x1c>
 80037ae:	e0b5      	b.n	800391c <HAL_I2C_Mem_Read+0x188>
    if ((pData == NULL) || (Size == 0U))
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	d018      	beq.n	80037e6 <HAL_I2C_Mem_Read+0x52>
 80037b4:	2f00      	cmp	r7, #0
 80037b6:	d016      	beq.n	80037e6 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 80037b8:	2340      	movs	r3, #64	; 0x40
 80037ba:	5cc3      	ldrb	r3, [r0, r3]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d100      	bne.n	80037c2 <HAL_I2C_Mem_Read+0x2e>
 80037c0:	e0af      	b.n	8003922 <HAL_I2C_Mem_Read+0x18e>
 80037c2:	2340      	movs	r3, #64	; 0x40
 80037c4:	2201      	movs	r2, #1
 80037c6:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80037c8:	f7ff fc12 	bl	8002ff0 <HAL_GetTick>
 80037cc:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ce:	2180      	movs	r1, #128	; 0x80
 80037d0:	9000      	str	r0, [sp, #0]
 80037d2:	2319      	movs	r3, #25
 80037d4:	2201      	movs	r2, #1
 80037d6:	0209      	lsls	r1, r1, #8
 80037d8:	0020      	movs	r0, r4
 80037da:	f7ff fde4 	bl	80033a6 <I2C_WaitOnFlagUntilTimeout>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d006      	beq.n	80037f0 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 80037e2:	2001      	movs	r0, #1
 80037e4:	e09b      	b.n	800391e <HAL_I2C_Mem_Read+0x18a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80037ec:	2001      	movs	r0, #1
 80037ee:	e096      	b.n	800391e <HAL_I2C_Mem_Read+0x18a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037f0:	2341      	movs	r3, #65	; 0x41
 80037f2:	2222      	movs	r2, #34	; 0x22
 80037f4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f6:	3301      	adds	r3, #1
 80037f8:	321e      	adds	r2, #30
 80037fa:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003800:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003802:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003804:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003806:	9601      	str	r6, [sp, #4]
 8003808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	9b05      	ldr	r3, [sp, #20]
 800380e:	9a04      	ldr	r2, [sp, #16]
 8003810:	9903      	ldr	r1, [sp, #12]
 8003812:	0020      	movs	r0, r4
 8003814:	f7ff fe28 	bl	8003468 <I2C_RequestMemoryRead>
 8003818:	2800      	cmp	r0, #0
 800381a:	d10f      	bne.n	800383c <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800381c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	2bff      	cmp	r3, #255	; 0xff
 8003822:	d910      	bls.n	8003846 <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003824:	23ff      	movs	r3, #255	; 0xff
 8003826:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003828:	3b7f      	subs	r3, #127	; 0x7f
 800382a:	4a42      	ldr	r2, [pc, #264]	; (8003934 <HAL_I2C_Mem_Read+0x1a0>)
 800382c:	9200      	str	r2, [sp, #0]
 800382e:	045b      	lsls	r3, r3, #17
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	9903      	ldr	r1, [sp, #12]
 8003834:	0020      	movs	r0, r4
 8003836:	f7ff fd37 	bl	80032a8 <I2C_TransferConfig>
 800383a:	e021      	b.n	8003880 <HAL_I2C_Mem_Read+0xec>
      __HAL_UNLOCK(hi2c);
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	2200      	movs	r2, #0
 8003840:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003842:	2001      	movs	r0, #1
 8003844:	e06b      	b.n	800391e <HAL_I2C_Mem_Read+0x18a>
      hi2c->XferSize = hi2c->XferCount;
 8003846:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003848:	b292      	uxth	r2, r2
 800384a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	4938      	ldr	r1, [pc, #224]	; (8003934 <HAL_I2C_Mem_Read+0x1a0>)
 8003852:	9100      	str	r1, [sp, #0]
 8003854:	049b      	lsls	r3, r3, #18
 8003856:	9903      	ldr	r1, [sp, #12]
 8003858:	0020      	movs	r0, r4
 800385a:	f7ff fd25 	bl	80032a8 <I2C_TransferConfig>
 800385e:	e00f      	b.n	8003880 <HAL_I2C_Mem_Read+0xec>
          hi2c->XferSize = hi2c->XferCount;
 8003860:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003862:	b292      	uxth	r2, r2
 8003864:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	2100      	movs	r1, #0
 800386c:	9100      	str	r1, [sp, #0]
 800386e:	049b      	lsls	r3, r3, #18
 8003870:	9903      	ldr	r1, [sp, #12]
 8003872:	0020      	movs	r0, r4
 8003874:	f7ff fd18 	bl	80032a8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d036      	beq.n	80038ee <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003880:	9600      	str	r6, [sp, #0]
 8003882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	2104      	movs	r1, #4
 8003888:	0020      	movs	r0, r4
 800388a:	f7ff fd8c 	bl	80033a6 <I2C_WaitOnFlagUntilTimeout>
 800388e:	2800      	cmp	r0, #0
 8003890:	d149      	bne.n	8003926 <HAL_I2C_Mem_Read+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003898:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800389a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800389c:	3301      	adds	r3, #1
 800389e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80038a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80038a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038aa:	3a01      	subs	r2, #1
 80038ac:	b292      	uxth	r2, r2
 80038ae:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038b2:	b292      	uxth	r2, r2
 80038b4:	2a00      	cmp	r2, #0
 80038b6:	d0df      	beq.n	8003878 <HAL_I2C_Mem_Read+0xe4>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1dd      	bne.n	8003878 <HAL_I2C_Mem_Read+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038bc:	9600      	str	r6, [sp, #0]
 80038be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038c0:	2200      	movs	r2, #0
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	0020      	movs	r0, r4
 80038c6:	f7ff fd6e 	bl	80033a6 <I2C_WaitOnFlagUntilTimeout>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d12d      	bne.n	800392a <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2bff      	cmp	r3, #255	; 0xff
 80038d4:	d9c4      	bls.n	8003860 <HAL_I2C_Mem_Read+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d6:	23ff      	movs	r3, #255	; 0xff
 80038d8:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038da:	3b7f      	subs	r3, #127	; 0x7f
 80038dc:	2200      	movs	r2, #0
 80038de:	9200      	str	r2, [sp, #0]
 80038e0:	045b      	lsls	r3, r3, #17
 80038e2:	32ff      	adds	r2, #255	; 0xff
 80038e4:	9903      	ldr	r1, [sp, #12]
 80038e6:	0020      	movs	r0, r4
 80038e8:	f7ff fcde 	bl	80032a8 <I2C_TransferConfig>
 80038ec:	e7c4      	b.n	8003878 <HAL_I2C_Mem_Read+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ee:	0032      	movs	r2, r6
 80038f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80038f2:	0020      	movs	r0, r4
 80038f4:	f7ff fdf0 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d118      	bne.n	800392e <HAL_I2C_Mem_Read+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	2220      	movs	r2, #32
 8003900:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003902:	6821      	ldr	r1, [r4, #0]
 8003904:	684b      	ldr	r3, [r1, #4]
 8003906:	4d0c      	ldr	r5, [pc, #48]	; (8003938 <HAL_I2C_Mem_Read+0x1a4>)
 8003908:	402b      	ands	r3, r5
 800390a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800390c:	2341      	movs	r3, #65	; 0x41
 800390e:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003910:	2300      	movs	r3, #0
 8003912:	3222      	adds	r2, #34	; 0x22
 8003914:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003916:	3a02      	subs	r2, #2
 8003918:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 800391a:	e000      	b.n	800391e <HAL_I2C_Mem_Read+0x18a>
    return HAL_BUSY;
 800391c:	2002      	movs	r0, #2
}
 800391e:	b007      	add	sp, #28
 8003920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003922:	2002      	movs	r0, #2
 8003924:	e7fb      	b.n	800391e <HAL_I2C_Mem_Read+0x18a>
        return HAL_ERROR;
 8003926:	2001      	movs	r0, #1
 8003928:	e7f9      	b.n	800391e <HAL_I2C_Mem_Read+0x18a>
          return HAL_ERROR;
 800392a:	2001      	movs	r0, #1
 800392c:	e7f7      	b.n	800391e <HAL_I2C_Mem_Read+0x18a>
      return HAL_ERROR;
 800392e:	2001      	movs	r0, #1
 8003930:	e7f5      	b.n	800391e <HAL_I2C_Mem_Read+0x18a>
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	80002400 	.word	0x80002400
 8003938:	fe00e800 	.word	0xfe00e800

0800393c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800393c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393e:	2341      	movs	r3, #65	; 0x41
 8003940:	5cc3      	ldrb	r3, [r0, r3]
 8003942:	2b20      	cmp	r3, #32
 8003944:	d120      	bne.n	8003988 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003946:	3320      	adds	r3, #32
 8003948:	5cc3      	ldrb	r3, [r0, r3]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d01e      	beq.n	800398c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800394e:	2440      	movs	r4, #64	; 0x40
 8003950:	2201      	movs	r2, #1
 8003952:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003954:	2541      	movs	r5, #65	; 0x41
 8003956:	2324      	movs	r3, #36	; 0x24
 8003958:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800395a:	6806      	ldr	r6, [r0, #0]
 800395c:	6833      	ldr	r3, [r6, #0]
 800395e:	4393      	bics	r3, r2
 8003960:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003962:	6806      	ldr	r6, [r0, #0]
 8003964:	6833      	ldr	r3, [r6, #0]
 8003966:	4f0a      	ldr	r7, [pc, #40]	; (8003990 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8003968:	403b      	ands	r3, r7
 800396a:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800396c:	6806      	ldr	r6, [r0, #0]
 800396e:	6833      	ldr	r3, [r6, #0]
 8003970:	4319      	orrs	r1, r3
 8003972:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003974:	6801      	ldr	r1, [r0, #0]
 8003976:	680b      	ldr	r3, [r1, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397c:	2320      	movs	r3, #32
 800397e:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	2300      	movs	r3, #0
 8003982:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003984:	2000      	movs	r0, #0
 8003986:	e000      	b.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x4e>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2002      	movs	r0, #2
  }
}
 800398a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800398c:	2002      	movs	r0, #2
 800398e:	e7fc      	b.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x4e>
 8003990:	ffffefff 	.word	0xffffefff

08003994 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003996:	2341      	movs	r3, #65	; 0x41
 8003998:	5cc3      	ldrb	r3, [r0, r3]
 800399a:	2b20      	cmp	r3, #32
 800399c:	d11e      	bne.n	80039dc <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399e:	3320      	adds	r3, #32
 80039a0:	5cc3      	ldrb	r3, [r0, r3]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d01c      	beq.n	80039e0 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80039a6:	2440      	movs	r4, #64	; 0x40
 80039a8:	2201      	movs	r2, #1
 80039aa:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ac:	2541      	movs	r5, #65	; 0x41
 80039ae:	2324      	movs	r3, #36	; 0x24
 80039b0:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b2:	6806      	ldr	r6, [r0, #0]
 80039b4:	6833      	ldr	r3, [r6, #0]
 80039b6:	4393      	bics	r3, r2
 80039b8:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ba:	6806      	ldr	r6, [r0, #0]
 80039bc:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039be:	4f09      	ldr	r7, [pc, #36]	; (80039e4 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 80039c0:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c2:	0209      	lsls	r1, r1, #8
 80039c4:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039c6:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	680b      	ldr	r3, [r1, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	2320      	movs	r3, #32
 80039d2:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d4:	2300      	movs	r3, #0
 80039d6:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80039d8:	2000      	movs	r0, #0
 80039da:	e000      	b.n	80039de <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2002      	movs	r0, #2
  }
}
 80039de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80039e0:	2002      	movs	r0, #2
 80039e2:	e7fc      	b.n	80039de <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 80039e4:	fffff0ff 	.word	0xfffff0ff

080039e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ee:	d100      	bne.n	80039f2 <HAL_RCC_OscConfig+0xa>
 80039f0:	e232      	b.n	8003e58 <HAL_RCC_OscConfig+0x470>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f2:	6803      	ldr	r3, [r0, #0]
 80039f4:	07db      	lsls	r3, r3, #31
 80039f6:	d526      	bpl.n	8003a46 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039f8:	4bae      	ldr	r3, [pc, #696]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	230c      	movs	r3, #12
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d018      	beq.n	8003a36 <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a04:	4bab      	ldr	r3, [pc, #684]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	230c      	movs	r3, #12
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d00e      	beq.n	8003a2e <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a10:	6863      	ldr	r3, [r4, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d03c      	beq.n	8003a90 <HAL_RCC_OscConfig+0xa8>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d151      	bne.n	8003abe <HAL_RCC_OscConfig+0xd6>
 8003a1a:	4ba6      	ldr	r3, [pc, #664]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	49a6      	ldr	r1, [pc, #664]	; (8003cb8 <HAL_RCC_OscConfig+0x2d0>)
 8003a20:	400a      	ands	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	49a5      	ldr	r1, [pc, #660]	; (8003cbc <HAL_RCC_OscConfig+0x2d4>)
 8003a28:	400a      	ands	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e036      	b.n	8003a9c <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a2e:	4ba1      	ldr	r3, [pc, #644]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	03db      	lsls	r3, r3, #15
 8003a34:	d5ec      	bpl.n	8003a10 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a36:	4b9f      	ldr	r3, [pc, #636]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	039b      	lsls	r3, r3, #14
 8003a3c:	d503      	bpl.n	8003a46 <HAL_RCC_OscConfig+0x5e>
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d100      	bne.n	8003a46 <HAL_RCC_OscConfig+0x5e>
 8003a44:	e20b      	b.n	8003e5e <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	079b      	lsls	r3, r3, #30
 8003a4a:	d573      	bpl.n	8003b34 <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a4c:	4b99      	ldr	r3, [pc, #612]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	220c      	movs	r2, #12
 8003a52:	421a      	tst	r2, r3
 8003a54:	d05d      	beq.n	8003b12 <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a56:	4b97      	ldr	r3, [pc, #604]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d053      	beq.n	8003b0a <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d100      	bne.n	8003a6a <HAL_RCC_OscConfig+0x82>
 8003a68:	e086      	b.n	8003b78 <HAL_RCC_OscConfig+0x190>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a6a:	4a92      	ldr	r2, [pc, #584]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7ff fabc 	bl	8002ff0 <HAL_GetTick>
 8003a78:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	4b8e      	ldr	r3, [pc, #568]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	079b      	lsls	r3, r3, #30
 8003a80:	d471      	bmi.n	8003b66 <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a82:	f7ff fab5 	bl	8002ff0 <HAL_GetTick>
 8003a86:	1b40      	subs	r0, r0, r5
 8003a88:	2802      	cmp	r0, #2
 8003a8a:	d9f6      	bls.n	8003a7a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8003a8c:	2003      	movs	r0, #3
 8003a8e:	e1e4      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a90:	4a88      	ldr	r2, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003a92:	6811      	ldr	r1, [r2, #0]
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	025b      	lsls	r3, r3, #9
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d025      	beq.n	8003aee <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8003aa2:	f7ff faa5 	bl	8002ff0 <HAL_GetTick>
 8003aa6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa8:	4b82      	ldr	r3, [pc, #520]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	039b      	lsls	r3, r3, #14
 8003aae:	d4ca      	bmi.n	8003a46 <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7ff fa9e 	bl	8002ff0 <HAL_GetTick>
 8003ab4:	1b40      	subs	r0, r0, r5
 8003ab6:	2864      	cmp	r0, #100	; 0x64
 8003ab8:	d9f6      	bls.n	8003aa8 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8003aba:	2003      	movs	r0, #3
 8003abc:	e1cd      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCC_OscConfig+0xee>
 8003ac2:	4b7c      	ldr	r3, [pc, #496]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	497c      	ldr	r1, [pc, #496]	; (8003cb8 <HAL_RCC_OscConfig+0x2d0>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	497b      	ldr	r1, [pc, #492]	; (8003cbc <HAL_RCC_OscConfig+0x2d4>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e7e2      	b.n	8003a9c <HAL_RCC_OscConfig+0xb4>
 8003ad6:	4b77      	ldr	r3, [pc, #476]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	02d2      	lsls	r2, r2, #11
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	0252      	lsls	r2, r2, #9
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e7d6      	b.n	8003a9c <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 8003aee:	f7ff fa7f 	bl	8002ff0 <HAL_GetTick>
 8003af2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af4:	4b6f      	ldr	r3, [pc, #444]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	039b      	lsls	r3, r3, #14
 8003afa:	d5a4      	bpl.n	8003a46 <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afc:	f7ff fa78 	bl	8002ff0 <HAL_GetTick>
 8003b00:	1b40      	subs	r0, r0, r5
 8003b02:	2864      	cmp	r0, #100	; 0x64
 8003b04:	d9f6      	bls.n	8003af4 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8003b06:	2003      	movs	r0, #3
 8003b08:	e1a7      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b0a:	4b6a      	ldr	r3, [pc, #424]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	03db      	lsls	r3, r3, #15
 8003b10:	d4a7      	bmi.n	8003a62 <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	079b      	lsls	r3, r3, #30
 8003b18:	d504      	bpl.n	8003b24 <HAL_RCC_OscConfig+0x13c>
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_OscConfig+0x13c>
        return HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
 8003b22:	e19a      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4963      	ldr	r1, [pc, #396]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003b26:	680b      	ldr	r3, [r1, #0]
 8003b28:	22f8      	movs	r2, #248	; 0xf8
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	6922      	ldr	r2, [r4, #16]
 8003b2e:	00d2      	lsls	r2, r2, #3
 8003b30:	4313      	orrs	r3, r2
 8003b32:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	071b      	lsls	r3, r3, #28
 8003b38:	d544      	bpl.n	8003bc4 <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3a:	69e3      	ldr	r3, [r4, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02e      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1b6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b40:	4a5c      	ldr	r2, [pc, #368]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003b42:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003b44:	2101      	movs	r1, #1
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4a:	f7ff fa51 	bl	8002ff0 <HAL_GetTick>
 8003b4e:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b50:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	079b      	lsls	r3, r3, #30
 8003b56:	d435      	bmi.n	8003bc4 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b58:	f7ff fa4a 	bl	8002ff0 <HAL_GetTick>
 8003b5c:	1b40      	subs	r0, r0, r5
 8003b5e:	2802      	cmp	r0, #2
 8003b60:	d9f6      	bls.n	8003b50 <HAL_RCC_OscConfig+0x168>
        {
          return HAL_TIMEOUT;
 8003b62:	2003      	movs	r0, #3
 8003b64:	e179      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b66:	4953      	ldr	r1, [pc, #332]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003b68:	680b      	ldr	r3, [r1, #0]
 8003b6a:	22f8      	movs	r2, #248	; 0xf8
 8003b6c:	4393      	bics	r3, r2
 8003b6e:	6922      	ldr	r2, [r4, #16]
 8003b70:	00d2      	lsls	r2, r2, #3
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
 8003b76:	e7dd      	b.n	8003b34 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8003b78:	4a4e      	ldr	r2, [pc, #312]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	438b      	bics	r3, r1
 8003b80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b82:	f7ff fa35 	bl	8002ff0 <HAL_GetTick>
 8003b86:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b88:	4b4a      	ldr	r3, [pc, #296]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	079b      	lsls	r3, r3, #30
 8003b8e:	d5d1      	bpl.n	8003b34 <HAL_RCC_OscConfig+0x14c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b90:	f7ff fa2e 	bl	8002ff0 <HAL_GetTick>
 8003b94:	1b40      	subs	r0, r0, r5
 8003b96:	2802      	cmp	r0, #2
 8003b98:	d9f6      	bls.n	8003b88 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	e15d      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9e:	4a45      	ldr	r2, [pc, #276]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003ba0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	438b      	bics	r3, r1
 8003ba6:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7ff fa22 	bl	8002ff0 <HAL_GetTick>
 8003bac:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bae:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	079b      	lsls	r3, r3, #30
 8003bb4:	d506      	bpl.n	8003bc4 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7ff fa1b 	bl	8002ff0 <HAL_GetTick>
 8003bba:	1b40      	subs	r0, r0, r5
 8003bbc:	2802      	cmp	r0, #2
 8003bbe:	d9f6      	bls.n	8003bae <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_TIMEOUT;
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	e14a      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	075b      	lsls	r3, r3, #29
 8003bc8:	d400      	bmi.n	8003bcc <HAL_RCC_OscConfig+0x1e4>
 8003bca:	e07f      	b.n	8003ccc <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bcc:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	d41d      	bmi.n	8003c10 <HAL_RCC_OscConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4a37      	ldr	r2, [pc, #220]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003bd6:	69d1      	ldr	r1, [r2, #28]
 8003bd8:	2080      	movs	r0, #128	; 0x80
 8003bda:	0540      	lsls	r0, r0, #21
 8003bdc:	4301      	orrs	r1, r0
 8003bde:	61d1      	str	r1, [r2, #28]
 8003be0:	69d3      	ldr	r3, [r2, #28]
 8003be2:	4003      	ands	r3, r0
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003be8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <HAL_RCC_OscConfig+0x2d8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	05db      	lsls	r3, r3, #23
 8003bf0:	d510      	bpl.n	8003c14 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf2:	68a3      	ldr	r3, [r4, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d021      	beq.n	8003c3c <HAL_RCC_OscConfig+0x254>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d136      	bne.n	8003c6a <HAL_RCC_OscConfig+0x282>
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
 8003c00:	2101      	movs	r1, #1
 8003c02:	438a      	bics	r2, r1
 8003c04:	621a      	str	r2, [r3, #32]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	3103      	adds	r1, #3
 8003c0a:	438a      	bics	r2, r1
 8003c0c:	621a      	str	r2, [r3, #32]
 8003c0e:	e01a      	b.n	8003c46 <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 8003c10:	2500      	movs	r5, #0
 8003c12:	e7ea      	b.n	8003bea <HAL_RCC_OscConfig+0x202>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c14:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <HAL_RCC_OscConfig+0x2d8>)
 8003c16:	6811      	ldr	r1, [r2, #0]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c20:	f7ff f9e6 	bl	8002ff0 <HAL_GetTick>
 8003c24:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_RCC_OscConfig+0x2d8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	05db      	lsls	r3, r3, #23
 8003c2c:	d4e1      	bmi.n	8003bf2 <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7ff f9df 	bl	8002ff0 <HAL_GetTick>
 8003c32:	1b80      	subs	r0, r0, r6
 8003c34:	2864      	cmp	r0, #100	; 0x64
 8003c36:	d9f6      	bls.n	8003c26 <HAL_RCC_OscConfig+0x23e>
          return HAL_TIMEOUT;
 8003c38:	2003      	movs	r0, #3
 8003c3a:	e10e      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003c3e:	6a13      	ldr	r3, [r2, #32]
 8003c40:	2101      	movs	r1, #1
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c46:	68a3      	ldr	r3, [r4, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d024      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2ae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4c:	f7ff f9d0 	bl	8002ff0 <HAL_GetTick>
 8003c50:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	079b      	lsls	r3, r3, #30
 8003c58:	d436      	bmi.n	8003cc8 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7ff f9c9 	bl	8002ff0 <HAL_GetTick>
 8003c5e:	1b80      	subs	r0, r0, r6
 8003c60:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_RCC_OscConfig+0x2dc>)
 8003c62:	4298      	cmp	r0, r3
 8003c64:	d9f5      	bls.n	8003c52 <HAL_RCC_OscConfig+0x26a>
        {
          return HAL_TIMEOUT;
 8003c66:	2003      	movs	r0, #3
 8003c68:	e0f7      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCC_OscConfig+0x29a>
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	2101      	movs	r1, #1
 8003c74:	438a      	bics	r2, r1
 8003c76:	621a      	str	r2, [r3, #32]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	3103      	adds	r1, #3
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	621a      	str	r2, [r3, #32]
 8003c80:	e7e1      	b.n	8003c46 <HAL_RCC_OscConfig+0x25e>
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	2104      	movs	r1, #4
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	621a      	str	r2, [r3, #32]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	3903      	subs	r1, #3
 8003c90:	430a      	orrs	r2, r1
 8003c92:	621a      	str	r2, [r3, #32]
 8003c94:	e7d7      	b.n	8003c46 <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7ff f9ab 	bl	8002ff0 <HAL_GetTick>
 8003c9a:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_OscConfig+0x2cc>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	079b      	lsls	r3, r3, #30
 8003ca2:	d511      	bpl.n	8003cc8 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7ff f9a4 	bl	8002ff0 <HAL_GetTick>
 8003ca8:	1b80      	subs	r0, r0, r6
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCC_OscConfig+0x2dc>)
 8003cac:	4298      	cmp	r0, r3
 8003cae:	d9f5      	bls.n	8003c9c <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_TIMEOUT;
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	e0d2      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	fffeffff 	.word	0xfffeffff
 8003cbc:	fffbffff 	.word	0xfffbffff
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cc8:	2d01      	cmp	r5, #1
 8003cca:	d033      	beq.n	8003d34 <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	06db      	lsls	r3, r3, #27
 8003cd0:	d510      	bpl.n	8003cf4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003cd2:	6963      	ldr	r3, [r4, #20]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d033      	beq.n	8003d40 <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003cd8:	3305      	adds	r3, #5
 8003cda:	d151      	bne.n	8003d80 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003cdc:	4a64      	ldr	r2, [pc, #400]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003cde:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	438b      	bics	r3, r1
 8003ce4:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ce6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003ce8:	31f4      	adds	r1, #244	; 0xf4
 8003cea:	438b      	bics	r3, r1
 8003cec:	69a1      	ldr	r1, [r4, #24]
 8003cee:	00c9      	lsls	r1, r1, #3
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	6a23      	ldr	r3, [r4, #32]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d100      	bne.n	8003cfc <HAL_RCC_OscConfig+0x314>
 8003cfa:	e0b2      	b.n	8003e62 <HAL_RCC_OscConfig+0x47a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cfc:	4a5c      	ldr	r2, [pc, #368]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003cfe:	6851      	ldr	r1, [r2, #4]
 8003d00:	220c      	movs	r2, #12
 8003d02:	400a      	ands	r2, r1
 8003d04:	2a08      	cmp	r2, #8
 8003d06:	d100      	bne.n	8003d0a <HAL_RCC_OscConfig+0x322>
 8003d08:	e08a      	b.n	8003e20 <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d04f      	beq.n	8003dae <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	4a58      	ldr	r2, [pc, #352]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003d10:	6813      	ldr	r3, [r2, #0]
 8003d12:	4958      	ldr	r1, [pc, #352]	; (8003e74 <HAL_RCC_OscConfig+0x48c>)
 8003d14:	400b      	ands	r3, r1
 8003d16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7ff f96a 	bl	8002ff0 <HAL_GetTick>
 8003d1c:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1e:	4b54      	ldr	r3, [pc, #336]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	019b      	lsls	r3, r3, #6
 8003d24:	d57a      	bpl.n	8003e1c <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7ff f963 	bl	8002ff0 <HAL_GetTick>
 8003d2a:	1b00      	subs	r0, r0, r4
 8003d2c:	2802      	cmp	r0, #2
 8003d2e:	d9f6      	bls.n	8003d1e <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 8003d30:	2003      	movs	r0, #3
 8003d32:	e092      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d34:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003d36:	69d3      	ldr	r3, [r2, #28]
 8003d38:	494f      	ldr	r1, [pc, #316]	; (8003e78 <HAL_RCC_OscConfig+0x490>)
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	61d3      	str	r3, [r2, #28]
 8003d3e:	e7c5      	b.n	8003ccc <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d40:	4b4b      	ldr	r3, [pc, #300]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d44:	2104      	movs	r1, #4
 8003d46:	430a      	orrs	r2, r1
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	3903      	subs	r1, #3
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003d52:	f7ff f94d 	bl	8002ff0 <HAL_GetTick>
 8003d56:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d58:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	079b      	lsls	r3, r3, #30
 8003d5e:	d406      	bmi.n	8003d6e <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d60:	f7ff f946 	bl	8002ff0 <HAL_GetTick>
 8003d64:	1b40      	subs	r0, r0, r5
 8003d66:	2802      	cmp	r0, #2
 8003d68:	d9f6      	bls.n	8003d58 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 8003d6a:	2003      	movs	r0, #3
 8003d6c:	e075      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d6e:	4940      	ldr	r1, [pc, #256]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003d70:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003d72:	22f8      	movs	r2, #248	; 0xf8
 8003d74:	4393      	bics	r3, r2
 8003d76:	69a2      	ldr	r2, [r4, #24]
 8003d78:	00d2      	lsls	r2, r2, #3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	634b      	str	r3, [r1, #52]	; 0x34
 8003d7e:	e7b9      	b.n	8003cf4 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d80:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d84:	2104      	movs	r1, #4
 8003d86:	430a      	orrs	r2, r1
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8c:	3903      	subs	r1, #3
 8003d8e:	438a      	bics	r2, r1
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003d92:	f7ff f92d 	bl	8002ff0 <HAL_GetTick>
 8003d96:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d98:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	079b      	lsls	r3, r3, #30
 8003d9e:	d5a9      	bpl.n	8003cf4 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003da0:	f7ff f926 	bl	8002ff0 <HAL_GetTick>
 8003da4:	1b40      	subs	r0, r0, r5
 8003da6:	2802      	cmp	r0, #2
 8003da8:	d9f6      	bls.n	8003d98 <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8003daa:	2003      	movs	r0, #3
 8003dac:	e055      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	4930      	ldr	r1, [pc, #192]	; (8003e74 <HAL_RCC_OscConfig+0x48c>)
 8003db4:	400b      	ands	r3, r1
 8003db6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003db8:	f7ff f91a 	bl	8002ff0 <HAL_GetTick>
 8003dbc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbe:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	019b      	lsls	r3, r3, #6
 8003dc4:	d506      	bpl.n	8003dd4 <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7ff f913 	bl	8002ff0 <HAL_GetTick>
 8003dca:	1b40      	subs	r0, r0, r5
 8003dcc:	2802      	cmp	r0, #2
 8003dce:	d9f6      	bls.n	8003dbe <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	e042      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd4:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	210f      	movs	r1, #15
 8003dda:	438a      	bics	r2, r1
 8003ddc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003dde:	430a      	orrs	r2, r1
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	4925      	ldr	r1, [pc, #148]	; (8003e7c <HAL_RCC_OscConfig+0x494>)
 8003de6:	400a      	ands	r2, r1
 8003de8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003dea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003dec:	4301      	orrs	r1, r0
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	2280      	movs	r2, #128	; 0x80
 8003df6:	0452      	lsls	r2, r2, #17
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003dfc:	f7ff f8f8 	bl	8002ff0 <HAL_GetTick>
 8003e00:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	019b      	lsls	r3, r3, #6
 8003e08:	d406      	bmi.n	8003e18 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7ff f8f1 	bl	8002ff0 <HAL_GetTick>
 8003e0e:	1b00      	subs	r0, r0, r4
 8003e10:	2802      	cmp	r0, #2
 8003e12:	d9f6      	bls.n	8003e02 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8003e14:	2003      	movs	r0, #3
 8003e16:	e020      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }

  return HAL_OK;
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e01e      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_OscConfig+0x47e>
        pll_config  = RCC->CFGR;
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCC_OscConfig+0x488>)
 8003e26:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8003e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	025b      	lsls	r3, r3, #9
 8003e2e:	4013      	ands	r3, r2
 8003e30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e32:	4283      	cmp	r3, r0
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x452>
          return HAL_ERROR;
 8003e36:	2001      	movs	r0, #1
 8003e38:	e00f      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003e3a:	230f      	movs	r3, #15
 8003e3c:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003e40:	428b      	cmp	r3, r1
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 8003e44:	2001      	movs	r0, #1
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003e48:	23f0      	movs	r3, #240	; 0xf0
 8003e4a:	039b      	lsls	r3, r3, #14
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCC_OscConfig+0x482>
          return HAL_ERROR;
 8003e54:	2001      	movs	r0, #1
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
    return HAL_ERROR;
 8003e58:	2001      	movs	r0, #1
}
 8003e5a:	b002      	add	sp, #8
 8003e5c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003e5e:	2001      	movs	r0, #1
 8003e60:	e7fb      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8003e62:	2000      	movs	r0, #0
 8003e64:	e7f9      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
        return HAL_ERROR;
 8003e66:	2001      	movs	r0, #1
 8003e68:	e7f7      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	e7f5      	b.n	8003e5a <HAL_RCC_OscConfig+0x472>
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	40021000 	.word	0x40021000
 8003e74:	feffffff 	.word	0xfeffffff
 8003e78:	efffffff 	.word	0xefffffff
 8003e7c:	ffc2ffff 	.word	0xffc2ffff

08003e80 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003e80:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <HAL_RCC_EnableCSS+0x10>)
 8003e82:	6811      	ldr	r1, [r2, #0]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	031b      	lsls	r3, r3, #12
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	4770      	bx	lr
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	40021000 	.word	0x40021000

08003e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e94:	b530      	push	{r4, r5, lr}
 8003e96:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003e98:	aa04      	add	r2, sp, #16
 8003e9a:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	c832      	ldmia	r0!, {r1, r4, r5}
 8003ea0:	c232      	stmia	r2!, {r1, r4, r5}
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	6802      	ldr	r2, [r0, #0]
 8003ea6:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003ea8:	466a      	mov	r2, sp
 8003eaa:	3310      	adds	r3, #16
 8003eac:	cb13      	ldmia	r3!, {r0, r1, r4}
 8003eae:	c213      	stmia	r2!, {r0, r1, r4}
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <HAL_RCC_GetSysClockFreq+0x68>)
 8003eb6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eb8:	230c      	movs	r3, #12
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d119      	bne.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003ec0:	0c91      	lsrs	r1, r2, #18
 8003ec2:	3307      	adds	r3, #7
 8003ec4:	4019      	ands	r1, r3
 8003ec6:	a804      	add	r0, sp, #16
 8003ec8:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003eca:	490c      	ldr	r1, [pc, #48]	; (8003efc <HAL_RCC_GetSysClockFreq+0x68>)
 8003ecc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003ece:	400b      	ands	r3, r1
 8003ed0:	4669      	mov	r1, sp
 8003ed2:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ed4:	03d3      	lsls	r3, r2, #15
 8003ed6:	d408      	bmi.n	8003eea <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ed8:	0163      	lsls	r3, r4, #5
 8003eda:	1b1b      	subs	r3, r3, r4
 8003edc:	0198      	lsls	r0, r3, #6
 8003ede:	1ac0      	subs	r0, r0, r3
 8003ee0:	00c0      	lsls	r0, r0, #3
 8003ee2:	1904      	adds	r4, r0, r4
 8003ee4:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003ee6:	b009      	add	sp, #36	; 0x24
 8003ee8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eea:	4805      	ldr	r0, [pc, #20]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003eec:	f7fc f90c 	bl	8000108 <__udivsi3>
 8003ef0:	4360      	muls	r0, r4
 8003ef2:	e7f8      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003ef6:	e7f6      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x52>
 8003ef8:	08005890 	.word	0x08005890
 8003efc:	40021000 	.word	0x40021000
 8003f00:	007a1200 	.word	0x007a1200

08003f04 <HAL_RCC_ClockConfig>:
{
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	0004      	movs	r4, r0
 8003f08:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d100      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xc>
 8003f0e:	e081      	b.n	8004014 <HAL_RCC_ClockConfig+0x110>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b42      	ldr	r3, [pc, #264]	; (800401c <HAL_RCC_ClockConfig+0x118>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2301      	movs	r3, #1
 8003f16:	4013      	ands	r3, r2
 8003f18:	428b      	cmp	r3, r1
 8003f1a:	d20b      	bcs.n	8003f34 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1c:	493f      	ldr	r1, [pc, #252]	; (800401c <HAL_RCC_ClockConfig+0x118>)
 8003f1e:	680b      	ldr	r3, [r1, #0]
 8003f20:	2201      	movs	r2, #1
 8003f22:	4393      	bics	r3, r2
 8003f24:	432b      	orrs	r3, r5
 8003f26:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f28:	680b      	ldr	r3, [r1, #0]
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	42aa      	cmp	r2, r5
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003f30:	2001      	movs	r0, #1
 8003f32:	e070      	b.n	8004016 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	079a      	lsls	r2, r3, #30
 8003f38:	d50e      	bpl.n	8003f58 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3a:	075b      	lsls	r3, r3, #29
 8003f3c:	d505      	bpl.n	8003f4a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f3e:	4a38      	ldr	r2, [pc, #224]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003f40:	6851      	ldr	r1, [r2, #4]
 8003f42:	23e0      	movs	r3, #224	; 0xe0
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4a:	4a35      	ldr	r2, [pc, #212]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003f4c:	6853      	ldr	r3, [r2, #4]
 8003f4e:	21f0      	movs	r1, #240	; 0xf0
 8003f50:	438b      	bics	r3, r1
 8003f52:	68a1      	ldr	r1, [r4, #8]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	07db      	lsls	r3, r3, #31
 8003f5c:	d52d      	bpl.n	8003fba <HAL_RCC_ClockConfig+0xb6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	6863      	ldr	r3, [r4, #4]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d01e      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d022      	beq.n	8003fae <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f68:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	0792      	lsls	r2, r2, #30
 8003f6e:	d553      	bpl.n	8004018 <HAL_RCC_ClockConfig+0x114>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f70:	492b      	ldr	r1, [pc, #172]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003f72:	684a      	ldr	r2, [r1, #4]
 8003f74:	2003      	movs	r0, #3
 8003f76:	4382      	bics	r2, r0
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003f7c:	f7ff f838 	bl	8002ff0 <HAL_GetTick>
 8003f80:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	4b27      	ldr	r3, [pc, #156]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	220c      	movs	r2, #12
 8003f88:	401a      	ands	r2, r3
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d013      	beq.n	8003fba <HAL_RCC_ClockConfig+0xb6>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f92:	f7ff f82d 	bl	8002ff0 <HAL_GetTick>
 8003f96:	1b80      	subs	r0, r0, r6
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <HAL_RCC_ClockConfig+0x120>)
 8003f9a:	4298      	cmp	r0, r3
 8003f9c:	d9f1      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8003f9e:	2003      	movs	r0, #3
 8003fa0:	e039      	b.n	8004016 <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	0392      	lsls	r2, r2, #14
 8003fa8:	d4e2      	bmi.n	8003f70 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8003faa:	2001      	movs	r0, #1
 8003fac:	e033      	b.n	8004016 <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	0192      	lsls	r2, r2, #6
 8003fb4:	d4dc      	bmi.n	8003f70 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	e02d      	b.n	8004016 <HAL_RCC_ClockConfig+0x112>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <HAL_RCC_ClockConfig+0x118>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	42ab      	cmp	r3, r5
 8003fc4:	d90b      	bls.n	8003fde <HAL_RCC_ClockConfig+0xda>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4915      	ldr	r1, [pc, #84]	; (800401c <HAL_RCC_ClockConfig+0x118>)
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4393      	bics	r3, r2
 8003fce:	432b      	orrs	r3, r5
 8003fd0:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	680b      	ldr	r3, [r1, #0]
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	42aa      	cmp	r2, r5
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_ClockConfig+0xda>
      return HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e01b      	b.n	8004016 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	075b      	lsls	r3, r3, #29
 8003fe2:	d506      	bpl.n	8003ff2 <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003fe6:	6853      	ldr	r3, [r2, #4]
 8003fe8:	490f      	ldr	r1, [pc, #60]	; (8004028 <HAL_RCC_ClockConfig+0x124>)
 8003fea:	400b      	ands	r3, r1
 8003fec:	68e1      	ldr	r1, [r4, #12]
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ff2:	f7ff ff4f 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_RCC_ClockConfig+0x11c>)
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	0912      	lsrs	r2, r2, #4
 8003ffc:	230f      	movs	r3, #15
 8003ffe:	4013      	ands	r3, r2
 8004000:	4a0a      	ldr	r2, [pc, #40]	; (800402c <HAL_RCC_ClockConfig+0x128>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	40d8      	lsrs	r0, r3
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x12c>)
 8004008:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800400a:	2000      	movs	r0, #0
 800400c:	f7fe ffac 	bl	8002f68 <HAL_InitTick>
  return HAL_OK;
 8004010:	2000      	movs	r0, #0
 8004012:	e000      	b.n	8004016 <HAL_RCC_ClockConfig+0x112>
    return HAL_ERROR;
 8004014:	2001      	movs	r0, #1
}
 8004016:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
 800401a:	e7fc      	b.n	8004016 <HAL_RCC_ClockConfig+0x112>
 800401c:	40022000 	.word	0x40022000
 8004020:	40021000 	.word	0x40021000
 8004024:	00001388 	.word	0x00001388
 8004028:	fffff8ff 	.word	0xfffff8ff
 800402c:	080068d4 	.word	0x080068d4
 8004030:	20000004 	.word	0x20000004

08004034 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8004034:	4770      	bx	lr
	...

08004038 <HAL_RCC_NMI_IRQHandler>:
{
 8004038:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCC_NMI_IRQHandler+0x18>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	d400      	bmi.n	8004044 <HAL_RCC_NMI_IRQHandler+0xc>
}
 8004042:	bd10      	pop	{r4, pc}
    HAL_RCC_CSSCallback();
 8004044:	f7ff fff6 	bl	8004034 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004048:	4b02      	ldr	r3, [pc, #8]	; (8004054 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800404a:	2280      	movs	r2, #128	; 0x80
 800404c:	701a      	strb	r2, [r3, #0]
}
 800404e:	e7f8      	b.n	8004042 <HAL_RCC_NMI_IRQHandler+0xa>
 8004050:	40021000 	.word	0x40021000
 8004054:	4002100a 	.word	0x4002100a

08004058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800405e:	6803      	ldr	r3, [r0, #0]
 8004060:	03db      	lsls	r3, r3, #15
 8004062:	d535      	bpl.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004064:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	d448      	bmi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	4a3a      	ldr	r2, [pc, #232]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800406e:	69d1      	ldr	r1, [r2, #28]
 8004070:	2080      	movs	r0, #128	; 0x80
 8004072:	0540      	lsls	r0, r0, #21
 8004074:	4301      	orrs	r1, r0
 8004076:	61d1      	str	r1, [r2, #28]
 8004078:	69d3      	ldr	r3, [r2, #28]
 800407a:	4003      	ands	r3, r0
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004080:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004082:	4b36      	ldr	r3, [pc, #216]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	05db      	lsls	r3, r3, #23
 8004088:	d53b      	bpl.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800408a:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	22c0      	movs	r2, #192	; 0xc0
 8004090:	0092      	lsls	r2, r2, #2
 8004092:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004094:	d013      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004096:	6861      	ldr	r1, [r4, #4]
 8004098:	400a      	ands	r2, r1
 800409a:	429a      	cmp	r2, r3
 800409c:	d00f      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80040a0:	6a18      	ldr	r0, [r3, #32]
 80040a2:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80040a4:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040a6:	6a1e      	ldr	r6, [r3, #32]
 80040a8:	2180      	movs	r1, #128	; 0x80
 80040aa:	0249      	lsls	r1, r1, #9
 80040ac:	4331      	orrs	r1, r6
 80040ae:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b0:	6a19      	ldr	r1, [r3, #32]
 80040b2:	4e2c      	ldr	r6, [pc, #176]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040b4:	4031      	ands	r1, r6
 80040b6:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040b8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040ba:	07c3      	lsls	r3, r0, #31
 80040bc:	d435      	bmi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80040c0:	6a13      	ldr	r3, [r2, #32]
 80040c2:	4927      	ldr	r1, [pc, #156]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80040c4:	400b      	ands	r3, r1
 80040c6:	6861      	ldr	r1, [r4, #4]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040cc:	2d01      	cmp	r5, #1
 80040ce:	d03b      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	07db      	lsls	r3, r3, #31
 80040d4:	d506      	bpl.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d6:	4a20      	ldr	r2, [pc, #128]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80040d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80040da:	2103      	movs	r1, #3
 80040dc:	438b      	bics	r3, r1
 80040de:	68a1      	ldr	r1, [r4, #8]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	069b      	lsls	r3, r3, #26
 80040e8:	d533      	bpl.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ea:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80040ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80040ee:	2110      	movs	r1, #16
 80040f0:	438b      	bics	r3, r1
 80040f2:	68e1      	ldr	r1, [r4, #12]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80040f8:	2000      	movs	r0, #0
}
 80040fa:	b002      	add	sp, #8
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	2500      	movs	r5, #0
 8004100:	e7bf      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8004104:	6811      	ldr	r1, [r2, #0]
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	430b      	orrs	r3, r1
 800410c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800410e:	f7fe ff6f 	bl	8002ff0 <HAL_GetTick>
 8004112:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	05db      	lsls	r3, r3, #23
 800411a:	d4b6      	bmi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411c:	f7fe ff68 	bl	8002ff0 <HAL_GetTick>
 8004120:	1b80      	subs	r0, r0, r6
 8004122:	2864      	cmp	r0, #100	; 0x64
 8004124:	d9f6      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8004126:	2003      	movs	r0, #3
 8004128:	e7e7      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 800412a:	f7fe ff61 	bl	8002ff0 <HAL_GetTick>
 800412e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	079b      	lsls	r3, r3, #30
 8004136:	d4c2      	bmi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004138:	f7fe ff5a 	bl	8002ff0 <HAL_GetTick>
 800413c:	1b80      	subs	r0, r0, r6
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004140:	4298      	cmp	r0, r3
 8004142:	d9f5      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8004144:	2003      	movs	r0, #3
 8004146:	e7d8      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	69d3      	ldr	r3, [r2, #28]
 800414a:	4908      	ldr	r1, [pc, #32]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800414c:	400b      	ands	r3, r1
 800414e:	61d3      	str	r3, [r2, #28]
 8004150:	e7be      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8004152:	2000      	movs	r0, #0
 8004154:	e7d1      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	40021000 	.word	0x40021000
 800415c:	40007000 	.word	0x40007000
 8004160:	fffffcff 	.word	0xfffffcff
 8004164:	fffeffff 	.word	0xfffeffff
 8004168:	00001388 	.word	0x00001388
 800416c:	efffffff 	.word	0xefffffff

08004170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004172:	46ce      	mov	lr, r9
 8004174:	4647      	mov	r7, r8
 8004176:	b580      	push	{r7, lr}
 8004178:	b083      	sub	sp, #12
 800417a:	0005      	movs	r5, r0
 800417c:	000c      	movs	r4, r1
 800417e:	0017      	movs	r7, r2
 8004180:	001e      	movs	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004182:	f7fe ff35 	bl	8002ff0 <HAL_GetTick>
 8004186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004188:	1a18      	subs	r0, r3, r0
 800418a:	4680      	mov	r8, r0
 800418c:	44b0      	add	r8, r6
  tmp_tickstart = HAL_GetTick();
 800418e:	f7fe ff2f 	bl	8002ff0 <HAL_GetTick>
 8004192:	4681      	mov	r9, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004194:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	015b      	lsls	r3, r3, #5
 800419a:	0d1b      	lsrs	r3, r3, #20
 800419c:	4642      	mov	r2, r8
 800419e:	4353      	muls	r3, r2
 80041a0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	4023      	ands	r3, r4
 80041a8:	1b1b      	subs	r3, r3, r4
 80041aa:	425a      	negs	r2, r3
 80041ac:	4153      	adcs	r3, r2
 80041ae:	42bb      	cmp	r3, r7
 80041b0:	d044      	beq.n	800423c <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	1c73      	adds	r3, r6, #1
 80041b4:	d0f5      	beq.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041b6:	f7fe ff1b 	bl	8002ff0 <HAL_GetTick>
 80041ba:	464b      	mov	r3, r9
 80041bc:	1ac0      	subs	r0, r0, r3
 80041be:	4540      	cmp	r0, r8
 80041c0:	d20a      	bcs.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x68>
 80041c2:	4643      	mov	r3, r8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041c8:	9b01      	ldr	r3, [sp, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d100      	bne.n	80041d0 <SPI_WaitFlagStateUntilTimeout+0x60>
      {
        tmp_timeout = 0U;
 80041ce:	4698      	mov	r8, r3
      }
      count--;
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	e7e4      	b.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0x32>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041d8:	682a      	ldr	r2, [r5, #0]
 80041da:	6853      	ldr	r3, [r2, #4]
 80041dc:	21e0      	movs	r1, #224	; 0xe0
 80041de:	438b      	bics	r3, r1
 80041e0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e2:	2382      	movs	r3, #130	; 0x82
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	686a      	ldr	r2, [r5, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d00c      	beq.n	8004206 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	019b      	lsls	r3, r3, #6
 80041f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d016      	beq.n	8004224 <SPI_WaitFlagStateUntilTimeout+0xb4>
        hspi->State = HAL_SPI_STATE_READY;
 80041f6:	235d      	movs	r3, #93	; 0x5d
 80041f8:	2201      	movs	r2, #1
 80041fa:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hspi);
 80041fc:	3b01      	subs	r3, #1
 80041fe:	2200      	movs	r2, #0
 8004200:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8004202:	2003      	movs	r0, #3
 8004204:	e01b      	b.n	800423e <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004206:	68ab      	ldr	r3, [r5, #8]
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	0212      	lsls	r2, r2, #8
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <SPI_WaitFlagStateUntilTimeout+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	00d2      	lsls	r2, r2, #3
 8004214:	4293      	cmp	r3, r2
 8004216:	d1e9      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8004218:	682a      	ldr	r2, [r5, #0]
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	438b      	bics	r3, r1
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e7e3      	b.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x7c>
          SPI_RESET_CRC(hspi);
 8004224:	682a      	ldr	r2, [r5, #0]
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	4908      	ldr	r1, [pc, #32]	; (800424c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800422a:	400b      	ands	r3, r1
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	682a      	ldr	r2, [r5, #0]
 8004230:	6811      	ldr	r1, [r2, #0]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	019b      	lsls	r3, r3, #6
 8004236:	430b      	orrs	r3, r1
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e7dc      	b.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 800423c:	2000      	movs	r0, #0
}
 800423e:	b003      	add	sp, #12
 8004240:	bc0c      	pop	{r2, r3}
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004248:	20000004 	.word	0x20000004
 800424c:	ffffdfff 	.word	0xffffdfff

08004250 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	46ce      	mov	lr, r9
 8004254:	4647      	mov	r7, r8
 8004256:	b580      	push	{r7, lr}
 8004258:	b083      	sub	sp, #12
 800425a:	0006      	movs	r6, r0
 800425c:	000c      	movs	r4, r1
 800425e:	0015      	movs	r5, r2
 8004260:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004262:	f7fe fec5 	bl	8002ff0 <HAL_GetTick>
 8004266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004268:	1a18      	subs	r0, r3, r0
 800426a:	4680      	mov	r8, r0
 800426c:	44b8      	add	r8, r7
  tmp_tickstart = HAL_GetTick();
 800426e:	f7fe febf 	bl	8002ff0 <HAL_GetTick>
 8004272:	4681      	mov	r9, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004274:	4b31      	ldr	r3, [pc, #196]	; (800433c <SPI_WaitFifoStateUntilTimeout+0xec>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	0093      	lsls	r3, r2, #2
 800427a:	189a      	adds	r2, r3, r2
 800427c:	00d3      	lsls	r3, r2, #3
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	0d1b      	lsrs	r3, r3, #20
 8004282:	4642      	mov	r2, r8
 8004284:	4353      	muls	r3, r2
 8004286:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004288:	e001      	b.n	800428e <SPI_WaitFifoStateUntilTimeout+0x3e>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800428a:	1c7b      	adds	r3, r7, #1
 800428c:	d10c      	bne.n	80042a8 <SPI_WaitFifoStateUntilTimeout+0x58>
  while ((hspi->Instance->SR & Fifo) != State)
 800428e:	6832      	ldr	r2, [r6, #0]
 8004290:	6893      	ldr	r3, [r2, #8]
 8004292:	4023      	ands	r3, r4
 8004294:	42ab      	cmp	r3, r5
 8004296:	d04a      	beq.n	800432e <SPI_WaitFifoStateUntilTimeout+0xde>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004298:	23c0      	movs	r3, #192	; 0xc0
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	429c      	cmp	r4, r3
 800429e:	d1f4      	bne.n	800428a <SPI_WaitFifoStateUntilTimeout+0x3a>
 80042a0:	2d00      	cmp	r5, #0
 80042a2:	d1f2      	bne.n	800428a <SPI_WaitFifoStateUntilTimeout+0x3a>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80042a4:	7b13      	ldrb	r3, [r2, #12]
 80042a6:	e7f0      	b.n	800428a <SPI_WaitFifoStateUntilTimeout+0x3a>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042a8:	f7fe fea2 	bl	8002ff0 <HAL_GetTick>
 80042ac:	464b      	mov	r3, r9
 80042ae:	1ac0      	subs	r0, r0, r3
 80042b0:	4540      	cmp	r0, r8
 80042b2:	d20a      	bcs.n	80042ca <SPI_WaitFifoStateUntilTimeout+0x7a>
 80042b4:	4643      	mov	r3, r8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <SPI_WaitFifoStateUntilTimeout+0x7a>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042ba:	9b01      	ldr	r3, [sp, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d100      	bne.n	80042c2 <SPI_WaitFifoStateUntilTimeout+0x72>
      {
        tmp_timeout = 0U;
 80042c0:	4698      	mov	r8, r3
      }      
      count--;
 80042c2:	9b01      	ldr	r3, [sp, #4]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	e7e1      	b.n	800428e <SPI_WaitFifoStateUntilTimeout+0x3e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ca:	6832      	ldr	r2, [r6, #0]
 80042cc:	6853      	ldr	r3, [r2, #4]
 80042ce:	21e0      	movs	r1, #224	; 0xe0
 80042d0:	438b      	bics	r3, r1
 80042d2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d4:	2382      	movs	r3, #130	; 0x82
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	6872      	ldr	r2, [r6, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d00c      	beq.n	80042f8 <SPI_WaitFifoStateUntilTimeout+0xa8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d016      	beq.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xc6>
        hspi->State = HAL_SPI_STATE_READY;
 80042e8:	235d      	movs	r3, #93	; 0x5d
 80042ea:	2201      	movs	r2, #1
 80042ec:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 80042ee:	3b01      	subs	r3, #1
 80042f0:	2200      	movs	r2, #0
 80042f2:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 80042f4:	2003      	movs	r0, #3
 80042f6:	e01b      	b.n	8004330 <SPI_WaitFifoStateUntilTimeout+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f8:	68b3      	ldr	r3, [r6, #8]
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	0212      	lsls	r2, r2, #8
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <SPI_WaitFifoStateUntilTimeout+0xba>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004302:	2280      	movs	r2, #128	; 0x80
 8004304:	00d2      	lsls	r2, r2, #3
 8004306:	4293      	cmp	r3, r2
 8004308:	d1e9      	bne.n	80042de <SPI_WaitFifoStateUntilTimeout+0x8e>
          __HAL_SPI_DISABLE(hspi);
 800430a:	6832      	ldr	r2, [r6, #0]
 800430c:	6813      	ldr	r3, [r2, #0]
 800430e:	2140      	movs	r1, #64	; 0x40
 8004310:	438b      	bics	r3, r1
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e7e3      	b.n	80042de <SPI_WaitFifoStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8004316:	6832      	ldr	r2, [r6, #0]
 8004318:	6813      	ldr	r3, [r2, #0]
 800431a:	4909      	ldr	r1, [pc, #36]	; (8004340 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 800431c:	400b      	ands	r3, r1
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	6832      	ldr	r2, [r6, #0]
 8004322:	6811      	ldr	r1, [r2, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	019b      	lsls	r3, r3, #6
 8004328:	430b      	orrs	r3, r1
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e7dc      	b.n	80042e8 <SPI_WaitFifoStateUntilTimeout+0x98>
    }
  }

  return HAL_OK;
 800432e:	2000      	movs	r0, #0
}
 8004330:	b003      	add	sp, #12
 8004332:	bc0c      	pop	{r2, r3}
 8004334:	4690      	mov	r8, r2
 8004336:	4699      	mov	r9, r3
 8004338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	20000004 	.word	0x20000004
 8004340:	ffffdfff 	.word	0xffffdfff

08004344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	0004      	movs	r4, r0
 800434a:	000d      	movs	r5, r1
 800434c:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800434e:	21c0      	movs	r1, #192	; 0xc0
 8004350:	9200      	str	r2, [sp, #0]
 8004352:	002b      	movs	r3, r5
 8004354:	2200      	movs	r2, #0
 8004356:	0149      	lsls	r1, r1, #5
 8004358:	f7ff ff7a 	bl	8004250 <SPI_WaitFifoStateUntilTimeout>
 800435c:	2800      	cmp	r0, #0
 800435e:	d118      	bne.n	8004392 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	9600      	str	r6, [sp, #0]
 8004362:	002b      	movs	r3, r5
 8004364:	2200      	movs	r2, #0
 8004366:	2180      	movs	r1, #128	; 0x80
 8004368:	0020      	movs	r0, r4
 800436a:	f7ff ff01 	bl	8004170 <SPI_WaitFlagStateUntilTimeout>
 800436e:	2800      	cmp	r0, #0
 8004370:	d116      	bne.n	80043a0 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004372:	21c0      	movs	r1, #192	; 0xc0
 8004374:	9600      	str	r6, [sp, #0]
 8004376:	002b      	movs	r3, r5
 8004378:	2200      	movs	r2, #0
 800437a:	00c9      	lsls	r1, r1, #3
 800437c:	0020      	movs	r0, r4
 800437e:	f7ff ff67 	bl	8004250 <SPI_WaitFifoStateUntilTimeout>
 8004382:	2800      	cmp	r0, #0
 8004384:	d00a      	beq.n	800439c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004386:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004388:	2220      	movs	r2, #32
 800438a:	4313      	orrs	r3, r2
 800438c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800438e:	2003      	movs	r0, #3
 8004390:	e004      	b.n	800439c <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004392:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004394:	2220      	movs	r2, #32
 8004396:	4313      	orrs	r3, r2
 8004398:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800439a:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800439c:	b002      	add	sp, #8
 800439e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043a2:	2220      	movs	r2, #32
 80043a4:	4313      	orrs	r3, r2
 80043a6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80043a8:	2003      	movs	r0, #3
 80043aa:	e7f7      	b.n	800439c <SPI_EndRxTxTransaction+0x58>

080043ac <SPI_EndRxTransaction>:
{
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	0004      	movs	r4, r0
 80043b2:	000d      	movs	r5, r1
 80043b4:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b6:	2382      	movs	r3, #130	; 0x82
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	6842      	ldr	r2, [r0, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d00f      	beq.n	80043e0 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043c0:	9600      	str	r6, [sp, #0]
 80043c2:	002b      	movs	r3, r5
 80043c4:	2200      	movs	r2, #0
 80043c6:	2180      	movs	r1, #128	; 0x80
 80043c8:	0020      	movs	r0, r4
 80043ca:	f7ff fed1 	bl	8004170 <SPI_WaitFlagStateUntilTimeout>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d115      	bne.n	80043fe <SPI_EndRxTransaction+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d2:	2382      	movs	r3, #130	; 0x82
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	6862      	ldr	r2, [r4, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d016      	beq.n	800440a <SPI_EndRxTransaction+0x5e>
}
 80043dc:	b002      	add	sp, #8
 80043de:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e0:	6883      	ldr	r3, [r0, #8]
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	0212      	lsls	r2, r2, #8
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ea:	2280      	movs	r2, #128	; 0x80
 80043ec:	00d2      	lsls	r2, r2, #3
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d1e6      	bne.n	80043c0 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	6813      	ldr	r3, [r2, #0]
 80043f6:	2140      	movs	r1, #64	; 0x40
 80043f8:	438b      	bics	r3, r1
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	e7e0      	b.n	80043c0 <SPI_EndRxTransaction+0x14>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004400:	2220      	movs	r2, #32
 8004402:	4313      	orrs	r3, r2
 8004404:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004406:	2003      	movs	r0, #3
 8004408:	e7e8      	b.n	80043dc <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440a:	68a3      	ldr	r3, [r4, #8]
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	0212      	lsls	r2, r2, #8
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <SPI_EndRxTransaction+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004414:	2280      	movs	r2, #128	; 0x80
 8004416:	00d2      	lsls	r2, r2, #3
 8004418:	4293      	cmp	r3, r2
 800441a:	d1df      	bne.n	80043dc <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800441c:	21c0      	movs	r1, #192	; 0xc0
 800441e:	9600      	str	r6, [sp, #0]
 8004420:	002b      	movs	r3, r5
 8004422:	2200      	movs	r2, #0
 8004424:	00c9      	lsls	r1, r1, #3
 8004426:	0020      	movs	r0, r4
 8004428:	f7ff ff12 	bl	8004250 <SPI_WaitFifoStateUntilTimeout>
 800442c:	2800      	cmp	r0, #0
 800442e:	d0d5      	beq.n	80043dc <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004430:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004432:	2220      	movs	r2, #32
 8004434:	4313      	orrs	r3, r2
 8004436:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004438:	2003      	movs	r0, #3
 800443a:	e7cf      	b.n	80043dc <SPI_EndRxTransaction+0x30>

0800443c <HAL_SPI_Init>:
{
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8004440:	d100      	bne.n	8004444 <HAL_SPI_Init+0x8>
 8004442:	e078      	b.n	8004536 <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004444:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800444a:	3305      	adds	r3, #5
 800444c:	33ff      	adds	r3, #255	; 0xff
 800444e:	6842      	ldr	r2, [r0, #4]
 8004450:	429a      	cmp	r2, r3
 8004452:	d005      	beq.n	8004460 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004454:	2300      	movs	r3, #0
 8004456:	61c3      	str	r3, [r0, #28]
 8004458:	e002      	b.n	8004460 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800445a:	2300      	movs	r3, #0
 800445c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004460:	2300      	movs	r3, #0
 8004462:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004464:	335d      	adds	r3, #93	; 0x5d
 8004466:	5ce3      	ldrb	r3, [r4, r3]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05a      	beq.n	8004522 <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800446c:	235d      	movs	r3, #93	; 0x5d
 800446e:	2202      	movs	r2, #2
 8004470:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	2140      	movs	r1, #64	; 0x40
 8004478:	438b      	bics	r3, r1
 800447a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800447c:	68e3      	ldr	r3, [r4, #12]
 800447e:	22e0      	movs	r2, #224	; 0xe0
 8004480:	00d2      	lsls	r2, r2, #3
 8004482:	4293      	cmp	r3, r2
 8004484:	d954      	bls.n	8004530 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004486:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004488:	21f0      	movs	r1, #240	; 0xf0
 800448a:	0109      	lsls	r1, r1, #4
 800448c:	428b      	cmp	r3, r1
 800448e:	d005      	beq.n	800449c <HAL_SPI_Init+0x60>
 8004490:	21e0      	movs	r1, #224	; 0xe0
 8004492:	00c9      	lsls	r1, r1, #3
 8004494:	428b      	cmp	r3, r1
 8004496:	d001      	beq.n	800449c <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800449c:	2382      	movs	r3, #130	; 0x82
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	6861      	ldr	r1, [r4, #4]
 80044a2:	400b      	ands	r3, r1
 80044a4:	2184      	movs	r1, #132	; 0x84
 80044a6:	0209      	lsls	r1, r1, #8
 80044a8:	68a0      	ldr	r0, [r4, #8]
 80044aa:	4001      	ands	r1, r0
 80044ac:	430b      	orrs	r3, r1
 80044ae:	2102      	movs	r1, #2
 80044b0:	6920      	ldr	r0, [r4, #16]
 80044b2:	4001      	ands	r1, r0
 80044b4:	430b      	orrs	r3, r1
 80044b6:	2101      	movs	r1, #1
 80044b8:	6960      	ldr	r0, [r4, #20]
 80044ba:	4008      	ands	r0, r1
 80044bc:	4303      	orrs	r3, r0
 80044be:	2080      	movs	r0, #128	; 0x80
 80044c0:	0080      	lsls	r0, r0, #2
 80044c2:	69a5      	ldr	r5, [r4, #24]
 80044c4:	4028      	ands	r0, r5
 80044c6:	4303      	orrs	r3, r0
 80044c8:	2038      	movs	r0, #56	; 0x38
 80044ca:	69e5      	ldr	r5, [r4, #28]
 80044cc:	4028      	ands	r0, r5
 80044ce:	4303      	orrs	r3, r0
 80044d0:	2080      	movs	r0, #128	; 0x80
 80044d2:	6a25      	ldr	r5, [r4, #32]
 80044d4:	4028      	ands	r0, r5
 80044d6:	4303      	orrs	r3, r0
 80044d8:	2080      	movs	r0, #128	; 0x80
 80044da:	0180      	lsls	r0, r0, #6
 80044dc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80044de:	4028      	ands	r0, r5
 80044e0:	6825      	ldr	r5, [r4, #0]
 80044e2:	4303      	orrs	r3, r0
 80044e4:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044e6:	8b60      	ldrh	r0, [r4, #26]
 80044e8:	2304      	movs	r3, #4
 80044ea:	4003      	ands	r3, r0
 80044ec:	2010      	movs	r0, #16
 80044ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80044f0:	4028      	ands	r0, r5
 80044f2:	4303      	orrs	r3, r0
 80044f4:	2008      	movs	r0, #8
 80044f6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80044f8:	4028      	ands	r0, r5
 80044fa:	4303      	orrs	r3, r0
 80044fc:	20f0      	movs	r0, #240	; 0xf0
 80044fe:	0100      	lsls	r0, r0, #4
 8004500:	68e5      	ldr	r5, [r4, #12]
 8004502:	4028      	ands	r0, r5
 8004504:	4303      	orrs	r3, r0
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	69d3      	ldr	r3, [r2, #28]
 8004510:	480a      	ldr	r0, [pc, #40]	; (800453c <HAL_SPI_Init+0x100>)
 8004512:	4003      	ands	r3, r0
 8004514:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004516:	2300      	movs	r3, #0
 8004518:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800451a:	335d      	adds	r3, #93	; 0x5d
 800451c:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 800451e:	2000      	movs	r0, #0
}
 8004520:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004522:	335c      	adds	r3, #92	; 0x5c
 8004524:	2200      	movs	r2, #0
 8004526:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8004528:	0020      	movs	r0, r4
 800452a:	f7fe fbdf 	bl	8002cec <HAL_SPI_MspInit>
 800452e:	e79d      	b.n	800446c <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004530:	2280      	movs	r2, #128	; 0x80
 8004532:	0152      	lsls	r2, r2, #5
 8004534:	e7a8      	b.n	8004488 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004536:	2001      	movs	r0, #1
 8004538:	e7f2      	b.n	8004520 <HAL_SPI_Init+0xe4>
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	fffff7ff 	.word	0xfffff7ff

08004540 <HAL_SPI_Transmit>:
{
 8004540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004542:	b085      	sub	sp, #20
 8004544:	0004      	movs	r4, r0
 8004546:	9101      	str	r1, [sp, #4]
 8004548:	0016      	movs	r6, r2
 800454a:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 800454c:	235c      	movs	r3, #92	; 0x5c
 800454e:	5cc3      	ldrb	r3, [r0, r3]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d100      	bne.n	8004556 <HAL_SPI_Transmit+0x16>
 8004554:	e0c6      	b.n	80046e4 <HAL_SPI_Transmit+0x1a4>
 8004556:	235c      	movs	r3, #92	; 0x5c
 8004558:	2201      	movs	r2, #1
 800455a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800455c:	f7fe fd48 	bl	8002ff0 <HAL_GetTick>
 8004560:	0005      	movs	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004562:	235d      	movs	r3, #93	; 0x5d
 8004564:	5ce3      	ldrb	r3, [r4, r3]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d008      	beq.n	800457c <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 800456a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800456c:	235d      	movs	r3, #93	; 0x5d
 800456e:	2201      	movs	r2, #1
 8004570:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8004572:	3b01      	subs	r3, #1
 8004574:	2200      	movs	r2, #0
 8004576:	54e2      	strb	r2, [r4, r3]
}
 8004578:	b005      	add	sp, #20
 800457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 800457c:	9901      	ldr	r1, [sp, #4]
 800457e:	2900      	cmp	r1, #0
 8004580:	d100      	bne.n	8004584 <HAL_SPI_Transmit+0x44>
 8004582:	e0a1      	b.n	80046c8 <HAL_SPI_Transmit+0x188>
 8004584:	2e00      	cmp	r6, #0
 8004586:	d100      	bne.n	800458a <HAL_SPI_Transmit+0x4a>
 8004588:	e0a0      	b.n	80046cc <HAL_SPI_Transmit+0x18c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800458a:	335c      	adds	r3, #92	; 0x5c
 800458c:	2203      	movs	r2, #3
 800458e:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004590:	2300      	movs	r3, #0
 8004592:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004594:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004596:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004598:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800459a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800459c:	3241      	adds	r2, #65	; 0x41
 800459e:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80045a0:	3202      	adds	r2, #2
 80045a2:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80045a4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045a6:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	68a2      	ldr	r2, [r4, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d01d      	beq.n	80045ee <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	0652      	lsls	r2, r2, #25
 80045b8:	d403      	bmi.n	80045c2 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2140      	movs	r1, #64	; 0x40
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045c2:	23e0      	movs	r3, #224	; 0xe0
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	68e2      	ldr	r2, [r4, #12]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d938      	bls.n	800463e <HAL_SPI_Transmit+0xfe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_SPI_Transmit+0x96>
 80045d2:	2e01      	cmp	r6, #1
 80045d4:	d120      	bne.n	8004618 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045da:	8812      	ldrh	r2, [r2, #0]
 80045dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045e0:	3302      	adds	r3, #2
 80045e2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80045e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80045ec:	e014      	b.n	8004618 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	6813      	ldr	r3, [r2, #0]
 80045f2:	2140      	movs	r1, #64	; 0x40
 80045f4:	438b      	bics	r3, r1
 80045f6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	6811      	ldr	r1, [r2, #0]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	430b      	orrs	r3, r1
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e7d5      	b.n	80045b2 <HAL_SPI_Transmit+0x72>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004606:	f7fe fcf3 	bl	8002ff0 <HAL_GetTick>
 800460a:	1b40      	subs	r0, r0, r5
 800460c:	42b8      	cmp	r0, r7
 800460e:	d301      	bcc.n	8004614 <HAL_SPI_Transmit+0xd4>
 8004610:	1c7b      	adds	r3, r7, #1
 8004612:	d15d      	bne.n	80046d0 <HAL_SPI_Transmit+0x190>
 8004614:	2f00      	cmp	r7, #0
 8004616:	d05d      	beq.n	80046d4 <HAL_SPI_Transmit+0x194>
    while (hspi->TxXferCount > 0U)
 8004618:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03b      	beq.n	8004698 <HAL_SPI_Transmit+0x158>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	0792      	lsls	r2, r2, #30
 8004626:	d5ee      	bpl.n	8004606 <HAL_SPI_Transmit+0xc6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004628:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800462a:	8812      	ldrh	r2, [r2, #0]
 800462c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800462e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004630:	3302      	adds	r3, #2
 8004632:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004634:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004636:	3b01      	subs	r3, #1
 8004638:	b29b      	uxth	r3, r3
 800463a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800463c:	e7ec      	b.n	8004618 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800463e:	6863      	ldr	r3, [r4, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_SPI_Transmit+0x108>
 8004644:	2e01      	cmp	r6, #1
 8004646:	d114      	bne.n	8004672 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004648:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004652:	3301      	adds	r3, #1
 8004654:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004656:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004658:	3b01      	subs	r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800465e:	e008      	b.n	8004672 <HAL_SPI_Transmit+0x132>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004660:	f7fe fcc6 	bl	8002ff0 <HAL_GetTick>
 8004664:	1b40      	subs	r0, r0, r5
 8004666:	42b8      	cmp	r0, r7
 8004668:	d301      	bcc.n	800466e <HAL_SPI_Transmit+0x12e>
 800466a:	1c7b      	adds	r3, r7, #1
 800466c:	d134      	bne.n	80046d8 <HAL_SPI_Transmit+0x198>
 800466e:	2f00      	cmp	r7, #0
 8004670:	d034      	beq.n	80046dc <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0U)
 8004672:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <HAL_SPI_Transmit+0x158>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	0792      	lsls	r2, r2, #30
 8004680:	d5ee      	bpl.n	8004660 <HAL_SPI_Transmit+0x120>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004682:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800468a:	3301      	adds	r3, #1
 800468c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800468e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004690:	3b01      	subs	r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004696:	e7ec      	b.n	8004672 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004698:	002a      	movs	r2, r5
 800469a:	0039      	movs	r1, r7
 800469c:	0020      	movs	r0, r4
 800469e:	f7ff fe51 	bl	8004344 <SPI_EndRxTxTransaction>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d001      	beq.n	80046aa <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a6:	2320      	movs	r3, #32
 80046a8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046aa:	68a3      	ldr	r3, [r4, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <HAL_SPI_Transmit+0x17e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b0:	9303      	str	r3, [sp, #12]
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	9203      	str	r2, [sp, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	9303      	str	r3, [sp, #12]
 80046bc:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10d      	bne.n	80046e0 <HAL_SPI_Transmit+0x1a0>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046c4:	2000      	movs	r0, #0
 80046c6:	e751      	b.n	800456c <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 80046c8:	2001      	movs	r0, #1
 80046ca:	e74f      	b.n	800456c <HAL_SPI_Transmit+0x2c>
 80046cc:	2001      	movs	r0, #1
 80046ce:	e74d      	b.n	800456c <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 80046d0:	2003      	movs	r0, #3
 80046d2:	e74b      	b.n	800456c <HAL_SPI_Transmit+0x2c>
 80046d4:	2003      	movs	r0, #3
 80046d6:	e749      	b.n	800456c <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 80046d8:	2003      	movs	r0, #3
 80046da:	e747      	b.n	800456c <HAL_SPI_Transmit+0x2c>
 80046dc:	2003      	movs	r0, #3
 80046de:	e745      	b.n	800456c <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 80046e0:	2001      	movs	r0, #1
 80046e2:	e743      	b.n	800456c <HAL_SPI_Transmit+0x2c>
  __HAL_LOCK(hspi);
 80046e4:	2002      	movs	r0, #2
 80046e6:	e747      	b.n	8004578 <HAL_SPI_Transmit+0x38>

080046e8 <HAL_SPI_TransmitReceive>:
{
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	b083      	sub	sp, #12
 80046ec:	0004      	movs	r4, r0
 80046ee:	000e      	movs	r6, r1
 80046f0:	9201      	str	r2, [sp, #4]
 80046f2:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80046f4:	235c      	movs	r3, #92	; 0x5c
 80046f6:	5cc3      	ldrb	r3, [r0, r3]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d100      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x16>
 80046fc:	e116      	b.n	800492c <HAL_SPI_TransmitReceive+0x244>
 80046fe:	235c      	movs	r3, #92	; 0x5c
 8004700:	2201      	movs	r2, #1
 8004702:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004704:	f7fe fc74 	bl	8002ff0 <HAL_GetTick>
 8004708:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 800470a:	235d      	movs	r3, #93	; 0x5d
 800470c:	5ce3      	ldrb	r3, [r4, r3]
 800470e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004710:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004712:	2b01      	cmp	r3, #1
 8004714:	d014      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x58>
 8004716:	2182      	movs	r1, #130	; 0x82
 8004718:	0049      	lsls	r1, r1, #1
 800471a:	428a      	cmp	r2, r1
 800471c:	d008      	beq.n	8004730 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800471e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004720:	235d      	movs	r3, #93	; 0x5d
 8004722:	2201      	movs	r2, #1
 8004724:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8004726:	3b01      	subs	r3, #1
 8004728:	2200      	movs	r2, #0
 800472a:	54e2      	strb	r2, [r4, r3]
}
 800472c:	b003      	add	sp, #12
 800472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004730:	68a2      	ldr	r2, [r4, #8]
 8004732:	2a00      	cmp	r2, #0
 8004734:	d000      	beq.n	8004738 <HAL_SPI_TransmitReceive+0x50>
 8004736:	e0eb      	b.n	8004910 <HAL_SPI_TransmitReceive+0x228>
 8004738:	2b04      	cmp	r3, #4
 800473a:	d001      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 800473c:	2002      	movs	r0, #2
 800473e:	e7ef      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004740:	2e00      	cmp	r6, #0
 8004742:	d100      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x5e>
 8004744:	e0e6      	b.n	8004914 <HAL_SPI_TransmitReceive+0x22c>
 8004746:	9b01      	ldr	r3, [sp, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d100      	bne.n	800474e <HAL_SPI_TransmitReceive+0x66>
 800474c:	e0e4      	b.n	8004918 <HAL_SPI_TransmitReceive+0x230>
 800474e:	2d00      	cmp	r5, #0
 8004750:	d100      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x6c>
 8004752:	e0e3      	b.n	800491c <HAL_SPI_TransmitReceive+0x234>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004754:	235d      	movs	r3, #93	; 0x5d
 8004756:	5ce3      	ldrb	r3, [r4, r3]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d002      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800475c:	235d      	movs	r3, #93	; 0x5d
 800475e:	2205      	movs	r2, #5
 8004760:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004762:	2300      	movs	r3, #0
 8004764:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004766:	9a01      	ldr	r2, [sp, #4]
 8004768:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800476a:	2246      	movs	r2, #70	; 0x46
 800476c:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 800476e:	3a02      	subs	r2, #2
 8004770:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004772:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004774:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004776:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8004778:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800477a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800477c:	23e0      	movs	r3, #224	; 0xe0
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	68e2      	ldr	r2, [r4, #12]
 8004782:	429a      	cmp	r2, r3
 8004784:	d923      	bls.n	80047ce <HAL_SPI_TransmitReceive+0xe6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	6853      	ldr	r3, [r2, #4]
 800478a:	4969      	ldr	r1, [pc, #420]	; (8004930 <HAL_SPI_TransmitReceive+0x248>)
 800478c:	400b      	ands	r3, r1
 800478e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	0652      	lsls	r2, r2, #25
 8004796:	d403      	bmi.n	80047a0 <HAL_SPI_TransmitReceive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	2140      	movs	r1, #64	; 0x40
 800479c:	430a      	orrs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047a0:	23e0      	movs	r3, #224	; 0xe0
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	68e2      	ldr	r2, [r4, #12]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d955      	bls.n	8004856 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_SPI_TransmitReceive+0xcc>
 80047b0:	2d01      	cmp	r5, #1
 80047b2:	d10a      	bne.n	80047ca <HAL_SPI_TransmitReceive+0xe2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047b8:	8812      	ldrh	r2, [r2, #0]
 80047ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047be:	3302      	adds	r3, #2
 80047c0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80047c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80047ca:	2501      	movs	r5, #1
 80047cc:	e024      	b.n	8004818 <HAL_SPI_TransmitReceive+0x130>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	6851      	ldr	r1, [r2, #4]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	015b      	lsls	r3, r3, #5
 80047d6:	430b      	orrs	r3, r1
 80047d8:	6053      	str	r3, [r2, #4]
 80047da:	e7d9      	b.n	8004790 <HAL_SPI_TransmitReceive+0xa8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	07d2      	lsls	r2, r2, #31
 80047e2:	d510      	bpl.n	8004806 <HAL_SPI_TransmitReceive+0x11e>
 80047e4:	2246      	movs	r2, #70	; 0x46
 80047e6:	5aa2      	ldrh	r2, [r4, r2]
 80047e8:	b292      	uxth	r2, r2
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x11e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047f2:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047f6:	3302      	adds	r3, #2
 80047f8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80047fa:	2246      	movs	r2, #70	; 0x46
 80047fc:	5aa3      	ldrh	r3, [r4, r2]
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29b      	uxth	r3, r3
 8004802:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8004804:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004806:	f7fe fbf3 	bl	8002ff0 <HAL_GetTick>
 800480a:	1bc0      	subs	r0, r0, r7
 800480c:	9b08      	ldr	r3, [sp, #32]
 800480e:	4298      	cmp	r0, r3
 8004810:	d302      	bcc.n	8004818 <HAL_SPI_TransmitReceive+0x130>
 8004812:	3301      	adds	r3, #1
 8004814:	d000      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x130>
 8004816:	e083      	b.n	8004920 <HAL_SPI_TransmitReceive+0x238>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004818:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <HAL_SPI_TransmitReceive+0x142>
 8004820:	3346      	adds	r3, #70	; 0x46
 8004822:	5ae3      	ldrh	r3, [r4, r3]
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d066      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x210>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	0792      	lsls	r2, r2, #30
 8004830:	d5d4      	bpl.n	80047dc <HAL_SPI_TransmitReceive+0xf4>
 8004832:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004834:	b292      	uxth	r2, r2
 8004836:	2a00      	cmp	r2, #0
 8004838:	d0d0      	beq.n	80047dc <HAL_SPI_TransmitReceive+0xf4>
 800483a:	2d01      	cmp	r5, #1
 800483c:	d1ce      	bne.n	80047dc <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004846:	3302      	adds	r3, #2
 8004848:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800484a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800484c:	3b01      	subs	r3, #1
 800484e:	b29b      	uxth	r3, r3
 8004850:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004852:	2500      	movs	r5, #0
 8004854:	e7c2      	b.n	80047dc <HAL_SPI_TransmitReceive+0xf4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004856:	6863      	ldr	r3, [r4, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_SPI_TransmitReceive+0x178>
 800485c:	2d01      	cmp	r5, #1
 800485e:	d10a      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x18e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800486a:	3301      	adds	r3, #1
 800486c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800486e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004870:	3b01      	subs	r3, #1
 8004872:	b29b      	uxth	r3, r3
 8004874:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004876:	2501      	movs	r5, #1
 8004878:	e01f      	b.n	80048ba <HAL_SPI_TransmitReceive+0x1d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	07d2      	lsls	r2, r2, #31
 8004880:	d510      	bpl.n	80048a4 <HAL_SPI_TransmitReceive+0x1bc>
 8004882:	2246      	movs	r2, #70	; 0x46
 8004884:	5aa2      	ldrh	r2, [r4, r2]
 8004886:	b292      	uxth	r2, r2
 8004888:	2a00      	cmp	r2, #0
 800488a:	d00b      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x1bc>
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800488c:	7b1b      	ldrb	r3, [r3, #12]
 800488e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004890:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8004892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004894:	3301      	adds	r3, #1
 8004896:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004898:	2246      	movs	r2, #70	; 0x46
 800489a:	5aa3      	ldrh	r3, [r4, r2]
 800489c:	3b01      	subs	r3, #1
 800489e:	b29b      	uxth	r3, r3
 80048a0:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 80048a2:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048a4:	f7fe fba4 	bl	8002ff0 <HAL_GetTick>
 80048a8:	1bc0      	subs	r0, r0, r7
 80048aa:	9b08      	ldr	r3, [sp, #32]
 80048ac:	4298      	cmp	r0, r3
 80048ae:	d301      	bcc.n	80048b4 <HAL_SPI_TransmitReceive+0x1cc>
 80048b0:	3301      	adds	r3, #1
 80048b2:	d137      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x23c>
 80048b4:	9b08      	ldr	r3, [sp, #32]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d036      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x240>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x1e4>
 80048c2:	3346      	adds	r3, #70	; 0x46
 80048c4:	5ae3      	ldrh	r3, [r4, r3]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d015      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x210>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	0792      	lsls	r2, r2, #30
 80048d2:	d5d2      	bpl.n	800487a <HAL_SPI_TransmitReceive+0x192>
 80048d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80048d6:	b292      	uxth	r2, r2
 80048d8:	2a00      	cmp	r2, #0
 80048da:	d0ce      	beq.n	800487a <HAL_SPI_TransmitReceive+0x192>
 80048dc:	2d01      	cmp	r5, #1
 80048de:	d1cc      	bne.n	800487a <HAL_SPI_TransmitReceive+0x192>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048e2:	7812      	ldrb	r2, [r2, #0]
 80048e4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80048e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048e8:	3301      	adds	r3, #1
 80048ea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80048ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80048f4:	2500      	movs	r5, #0
 80048f6:	e7c0      	b.n	800487a <HAL_SPI_TransmitReceive+0x192>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f8:	003a      	movs	r2, r7
 80048fa:	9908      	ldr	r1, [sp, #32]
 80048fc:	0020      	movs	r0, r4
 80048fe:	f7ff fd21 	bl	8004344 <SPI_EndRxTxTransaction>
 8004902:	2800      	cmp	r0, #0
 8004904:	d100      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x220>
 8004906:	e70b      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004908:	2320      	movs	r3, #32
 800490a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800490c:	2001      	movs	r0, #1
 800490e:	e707      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 8004910:	2002      	movs	r0, #2
 8004912:	e705      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 8004914:	2001      	movs	r0, #1
 8004916:	e703      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
 8004918:	2001      	movs	r0, #1
 800491a:	e701      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
 800491c:	2001      	movs	r0, #1
 800491e:	e6ff      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 8004920:	2003      	movs	r0, #3
 8004922:	e6fd      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 8004924:	2003      	movs	r0, #3
 8004926:	e6fb      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
 8004928:	2003      	movs	r0, #3
 800492a:	e6f9      	b.n	8004720 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800492c:	2002      	movs	r0, #2
 800492e:	e6fd      	b.n	800472c <HAL_SPI_TransmitReceive+0x44>
 8004930:	ffffefff 	.word	0xffffefff

08004934 <HAL_SPI_Receive>:
{
 8004934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004936:	b085      	sub	sp, #20
 8004938:	0004      	movs	r4, r0
 800493a:	000d      	movs	r5, r1
 800493c:	0016      	movs	r6, r2
 800493e:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004940:	2382      	movs	r3, #130	; 0x82
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	6842      	ldr	r2, [r0, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d017      	beq.n	800497a <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 800494a:	235c      	movs	r3, #92	; 0x5c
 800494c:	5ce3      	ldrb	r3, [r4, r3]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d100      	bne.n	8004954 <HAL_SPI_Receive+0x20>
 8004952:	e0bc      	b.n	8004ace <HAL_SPI_Receive+0x19a>
 8004954:	235c      	movs	r3, #92	; 0x5c
 8004956:	2201      	movs	r2, #1
 8004958:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 800495a:	f7fe fb49 	bl	8002ff0 <HAL_GetTick>
 800495e:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8004960:	235d      	movs	r3, #93	; 0x5d
 8004962:	5ce3      	ldrb	r3, [r4, r3]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d014      	beq.n	8004992 <HAL_SPI_Receive+0x5e>
    errorcode = HAL_BUSY;
 8004968:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800496a:	235d      	movs	r3, #93	; 0x5d
 800496c:	2201      	movs	r2, #1
 800496e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8004970:	3b01      	subs	r3, #1
 8004972:	2200      	movs	r2, #0
 8004974:	54e2      	strb	r2, [r4, r3]
}
 8004976:	b005      	add	sp, #20
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800497a:	6883      	ldr	r3, [r0, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e4      	bne.n	800494a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004980:	335d      	adds	r3, #93	; 0x5d
 8004982:	2204      	movs	r2, #4
 8004984:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004986:	9700      	str	r7, [sp, #0]
 8004988:	0033      	movs	r3, r6
 800498a:	000a      	movs	r2, r1
 800498c:	f7ff feac 	bl	80046e8 <HAL_SPI_TransmitReceive>
 8004990:	e7f1      	b.n	8004976 <HAL_SPI_Receive+0x42>
  if ((pData == NULL) || (Size == 0U))
 8004992:	2d00      	cmp	r5, #0
 8004994:	d100      	bne.n	8004998 <HAL_SPI_Receive+0x64>
 8004996:	e08c      	b.n	8004ab2 <HAL_SPI_Receive+0x17e>
 8004998:	2e00      	cmp	r6, #0
 800499a:	d100      	bne.n	800499e <HAL_SPI_Receive+0x6a>
 800499c:	e08b      	b.n	8004ab6 <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800499e:	335c      	adds	r3, #92	; 0x5c
 80049a0:	2204      	movs	r2, #4
 80049a2:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049a8:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80049aa:	3240      	adds	r2, #64	; 0x40
 80049ac:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 80049ae:	3202      	adds	r2, #2
 80049b0:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049b2:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80049b4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80049b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80049b8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049ba:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049bc:	23e0      	movs	r3, #224	; 0xe0
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	68e2      	ldr	r2, [r4, #12]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d917      	bls.n	80049f6 <HAL_SPI_Receive+0xc2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	6853      	ldr	r3, [r2, #4]
 80049ca:	4942      	ldr	r1, [pc, #264]	; (8004ad4 <HAL_SPI_Receive+0x1a0>)
 80049cc:	400b      	ands	r3, r1
 80049ce:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	68a2      	ldr	r2, [r4, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d014      	beq.n	8004a04 <HAL_SPI_Receive+0xd0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	0652      	lsls	r2, r2, #25
 80049e0:	d403      	bmi.n	80049ea <HAL_SPI_Receive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	2140      	movs	r1, #64	; 0x40
 80049e6:	430a      	orrs	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80049ea:	23e0      	movs	r3, #224	; 0xe0
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	68e2      	ldr	r2, [r4, #12]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d91c      	bls.n	8004a2e <HAL_SPI_Receive+0xfa>
 80049f4:	e03a      	b.n	8004a6c <HAL_SPI_Receive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	6851      	ldr	r1, [r2, #4]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	015b      	lsls	r3, r3, #5
 80049fe:	430b      	orrs	r3, r1
 8004a00:	6053      	str	r3, [r2, #4]
 8004a02:	e7e5      	b.n	80049d0 <HAL_SPI_Receive+0x9c>
    __HAL_SPI_DISABLE(hspi);
 8004a04:	6822      	ldr	r2, [r4, #0]
 8004a06:	6813      	ldr	r3, [r2, #0]
 8004a08:	2140      	movs	r1, #64	; 0x40
 8004a0a:	438b      	bics	r3, r1
 8004a0c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	6813      	ldr	r3, [r2, #0]
 8004a12:	4931      	ldr	r1, [pc, #196]	; (8004ad8 <HAL_SPI_Receive+0x1a4>)
 8004a14:	400b      	ands	r3, r1
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e7df      	b.n	80049da <HAL_SPI_Receive+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1a:	f7fe fae9 	bl	8002ff0 <HAL_GetTick>
 8004a1e:	9b03      	ldr	r3, [sp, #12]
 8004a20:	1ac0      	subs	r0, r0, r3
 8004a22:	42b8      	cmp	r0, r7
 8004a24:	d301      	bcc.n	8004a2a <HAL_SPI_Receive+0xf6>
 8004a26:	1c7b      	adds	r3, r7, #1
 8004a28:	d147      	bne.n	8004aba <HAL_SPI_Receive+0x186>
 8004a2a:	2f00      	cmp	r7, #0
 8004a2c:	d047      	beq.n	8004abe <HAL_SPI_Receive+0x18a>
    while (hspi->RxXferCount > 0U)
 8004a2e:	2346      	movs	r3, #70	; 0x46
 8004a30:	5ae3      	ldrh	r3, [r4, r3]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02e      	beq.n	8004a96 <HAL_SPI_Receive+0x162>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	07d2      	lsls	r2, r2, #31
 8004a3e:	d5ec      	bpl.n	8004a1a <HAL_SPI_Receive+0xe6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a40:	7b1b      	ldrb	r3, [r3, #12]
 8004a42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a44:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a48:	3301      	adds	r3, #1
 8004a4a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004a4c:	2246      	movs	r2, #70	; 0x46
 8004a4e:	5aa3      	ldrh	r3, [r4, r2]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	52a3      	strh	r3, [r4, r2]
 8004a56:	e7ea      	b.n	8004a2e <HAL_SPI_Receive+0xfa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a58:	f7fe faca 	bl	8002ff0 <HAL_GetTick>
 8004a5c:	9b03      	ldr	r3, [sp, #12]
 8004a5e:	1ac0      	subs	r0, r0, r3
 8004a60:	42b8      	cmp	r0, r7
 8004a62:	d301      	bcc.n	8004a68 <HAL_SPI_Receive+0x134>
 8004a64:	1c7b      	adds	r3, r7, #1
 8004a66:	d12c      	bne.n	8004ac2 <HAL_SPI_Receive+0x18e>
 8004a68:	2f00      	cmp	r7, #0
 8004a6a:	d02c      	beq.n	8004ac6 <HAL_SPI_Receive+0x192>
    while (hspi->RxXferCount > 0U)
 8004a6c:	2346      	movs	r3, #70	; 0x46
 8004a6e:	5ae3      	ldrh	r3, [r4, r3]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00f      	beq.n	8004a96 <HAL_SPI_Receive+0x162>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	07d2      	lsls	r2, r2, #31
 8004a7c:	d5ec      	bpl.n	8004a58 <HAL_SPI_Receive+0x124>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a82:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a86:	3302      	adds	r3, #2
 8004a88:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004a8a:	2246      	movs	r2, #70	; 0x46
 8004a8c:	5aa3      	ldrh	r3, [r4, r2]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	52a3      	strh	r3, [r4, r2]
 8004a94:	e7ea      	b.n	8004a6c <HAL_SPI_Receive+0x138>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a96:	9a03      	ldr	r2, [sp, #12]
 8004a98:	0039      	movs	r1, r7
 8004a9a:	0020      	movs	r0, r4
 8004a9c:	f7ff fc86 	bl	80043ac <SPI_EndRxTransaction>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_SPI_Receive+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <HAL_SPI_Receive+0x196>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004aae:	2000      	movs	r0, #0
 8004ab0:	e75b      	b.n	800496a <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	e759      	b.n	800496a <HAL_SPI_Receive+0x36>
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	e757      	b.n	800496a <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 8004aba:	2003      	movs	r0, #3
 8004abc:	e755      	b.n	800496a <HAL_SPI_Receive+0x36>
 8004abe:	2003      	movs	r0, #3
 8004ac0:	e753      	b.n	800496a <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 8004ac2:	2003      	movs	r0, #3
 8004ac4:	e751      	b.n	800496a <HAL_SPI_Receive+0x36>
 8004ac6:	2003      	movs	r0, #3
 8004ac8:	e74f      	b.n	800496a <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 8004aca:	2001      	movs	r0, #1
 8004acc:	e74d      	b.n	800496a <HAL_SPI_Receive+0x36>
  __HAL_LOCK(hspi);
 8004ace:	2002      	movs	r0, #2
 8004ad0:	e751      	b.n	8004976 <HAL_SPI_Receive+0x42>
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	ffffefff 	.word	0xffffefff
 8004ad8:	ffffbfff 	.word	0xffffbfff

08004adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004adc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ade:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae0:	6a04      	ldr	r4, [r0, #32]
 8004ae2:	2501      	movs	r5, #1
 8004ae4:	43ac      	bics	r4, r5
 8004ae6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aea:	35ef      	adds	r5, #239	; 0xef
 8004aec:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004af2:	240a      	movs	r4, #10
 8004af4:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8004af6:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004af8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004afa:	6201      	str	r1, [r0, #32]
}
 8004afc:	bd30      	pop	{r4, r5, pc}
	...

08004b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b00:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b02:	6a03      	ldr	r3, [r0, #32]
 8004b04:	2410      	movs	r4, #16
 8004b06:	43a3      	bics	r3, r4
 8004b08:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004b0c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b0e:	4d05      	ldr	r5, [pc, #20]	; (8004b24 <TIM_TI2_ConfigInputStage+0x24>)
 8004b10:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b12:	0312      	lsls	r2, r2, #12
 8004b14:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b16:	24a0      	movs	r4, #160	; 0xa0
 8004b18:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b1a:	0109      	lsls	r1, r1, #4
 8004b1c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b1e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b20:	6201      	str	r1, [r0, #32]
}
 8004b22:	bd30      	pop	{r4, r5, pc}
 8004b24:	ffff0fff 	.word	0xffff0fff

08004b28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b28:	000b      	movs	r3, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b2a:	6881      	ldr	r1, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b2c:	2270      	movs	r2, #112	; 0x70
 8004b2e:	4391      	bics	r1, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b30:	4319      	orrs	r1, r3
 8004b32:	2307      	movs	r3, #7
 8004b34:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	6081      	str	r1, [r0, #8]
}
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004b3c:	233d      	movs	r3, #61	; 0x3d
 8004b3e:	5cc3      	ldrb	r3, [r0, r3]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d001      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0xc>
    return HAL_ERROR;
 8004b44:	2001      	movs	r0, #1
}
 8004b46:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	333c      	adds	r3, #60	; 0x3c
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b4e:	6802      	ldr	r2, [r0, #0]
 8004b50:	68d3      	ldr	r3, [r2, #12]
 8004b52:	2101      	movs	r1, #1
 8004b54:	430b      	orrs	r3, r1
 8004b56:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b58:	6803      	ldr	r3, [r0, #0]
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <HAL_TIM_Base_Start_IT+0x58>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x3c>
 8004b60:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <HAL_TIM_Base_Start_IT+0x5c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d008      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x3c>
 8004b66:	4a0d      	ldr	r2, [pc, #52]	; (8004b9c <HAL_TIM_Base_Start_IT+0x60>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d005      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2101      	movs	r1, #1
 8004b70:	430a      	orrs	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004b74:	2000      	movs	r0, #0
 8004b76:	e7e6      	b.n	8004b46 <HAL_TIM_Base_Start_IT+0xa>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	2207      	movs	r2, #7
 8004b7c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7e:	2a06      	cmp	r2, #6
 8004b80:	d005      	beq.n	8004b8e <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	2101      	movs	r1, #1
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e7db      	b.n	8004b46 <HAL_TIM_Base_Start_IT+0xa>
 8004b8e:	2000      	movs	r0, #0
 8004b90:	e7d9      	b.n	8004b46 <HAL_TIM_Base_Start_IT+0xa>
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40014000 	.word	0x40014000

08004ba0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ba0:	6802      	ldr	r2, [r0, #0]
 8004ba2:	68d3      	ldr	r3, [r2, #12]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	438b      	bics	r3, r1
 8004ba8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8004baa:	6803      	ldr	r3, [r0, #0]
 8004bac:	6a19      	ldr	r1, [r3, #32]
 8004bae:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <HAL_TIM_Base_Stop_IT+0x30>)
 8004bb0:	4211      	tst	r1, r2
 8004bb2:	d107      	bne.n	8004bc4 <HAL_TIM_Base_Stop_IT+0x24>
 8004bb4:	6a19      	ldr	r1, [r3, #32]
 8004bb6:	4a07      	ldr	r2, [pc, #28]	; (8004bd4 <HAL_TIM_Base_Stop_IT+0x34>)
 8004bb8:	4211      	tst	r1, r2
 8004bba:	d103      	bne.n	8004bc4 <HAL_TIM_Base_Stop_IT+0x24>
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	233d      	movs	r3, #61	; 0x3d
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	54c2      	strb	r2, [r0, r3]
}
 8004bca:	2000      	movs	r0, #0
 8004bcc:	4770      	bx	lr
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	00001111 	.word	0x00001111
 8004bd4:	00000444 	.word	0x00000444

08004bd8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004bd8:	4770      	bx	lr

08004bda <HAL_TIM_IC_CaptureCallback>:
}
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004bdc:	4770      	bx	lr

08004bde <HAL_TIM_TriggerCallback>:
}
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIM_IRQHandler>:
{
 8004be0:	b510      	push	{r4, lr}
 8004be2:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004be4:	6803      	ldr	r3, [r0, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	0792      	lsls	r2, r2, #30
 8004bea:	d50f      	bpl.n	8004c0c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	0792      	lsls	r2, r2, #30
 8004bf0:	d50c      	bpl.n	8004c0c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	4252      	negs	r2, r2
 8004bf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bfc:	6803      	ldr	r3, [r0, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	079b      	lsls	r3, r3, #30
 8004c02:	d063      	beq.n	8004ccc <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8004c04:	f7ff ffe9 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	0752      	lsls	r2, r2, #29
 8004c12:	d512      	bpl.n	8004c3a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	0752      	lsls	r2, r2, #29
 8004c18:	d50f      	bpl.n	8004c3a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c1a:	2205      	movs	r2, #5
 8004c1c:	4252      	negs	r2, r2
 8004c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c20:	2302      	movs	r3, #2
 8004c22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	699a      	ldr	r2, [r3, #24]
 8004c28:	23c0      	movs	r3, #192	; 0xc0
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	421a      	tst	r2, r3
 8004c2e:	d053      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c30:	0020      	movs	r0, r4
 8004c32:	f7ff ffd2 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	2300      	movs	r3, #0
 8004c38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	0712      	lsls	r2, r2, #28
 8004c40:	d510      	bpl.n	8004c64 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	0712      	lsls	r2, r2, #28
 8004c46:	d50d      	bpl.n	8004c64 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c48:	2209      	movs	r2, #9
 8004c4a:	4252      	negs	r2, r2
 8004c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4e:	2304      	movs	r3, #4
 8004c50:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	079b      	lsls	r3, r3, #30
 8004c58:	d045      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	0020      	movs	r0, r4
 8004c5c:	f7ff ffbd 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c60:	2300      	movs	r3, #0
 8004c62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	06d2      	lsls	r2, r2, #27
 8004c6a:	d512      	bpl.n	8004c92 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	06d2      	lsls	r2, r2, #27
 8004c70:	d50f      	bpl.n	8004c92 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c72:	2211      	movs	r2, #17
 8004c74:	4252      	negs	r2, r2
 8004c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c78:	2308      	movs	r3, #8
 8004c7a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	23c0      	movs	r3, #192	; 0xc0
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	421a      	tst	r2, r3
 8004c86:	d035      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c88:	0020      	movs	r0, r4
 8004c8a:	f7ff ffa6 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	07d2      	lsls	r2, r2, #31
 8004c98:	d502      	bpl.n	8004ca0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	07d2      	lsls	r2, r2, #31
 8004c9e:	d430      	bmi.n	8004d02 <HAL_TIM_IRQHandler+0x122>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	0612      	lsls	r2, r2, #24
 8004ca6:	d502      	bpl.n	8004cae <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	0612      	lsls	r2, r2, #24
 8004cac:	d430      	bmi.n	8004d10 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	0652      	lsls	r2, r2, #25
 8004cb4:	d502      	bpl.n	8004cbc <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	0652      	lsls	r2, r2, #25
 8004cba:	d430      	bmi.n	8004d1e <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	0692      	lsls	r2, r2, #26
 8004cc2:	d502      	bpl.n	8004cca <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	0692      	lsls	r2, r2, #26
 8004cc8:	d430      	bmi.n	8004d2c <HAL_TIM_IRQHandler+0x14c>
}
 8004cca:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ccc:	f7ff ff84 	bl	8004bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	0020      	movs	r0, r4
 8004cd2:	f7ff ff83 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8004cd6:	e797      	b.n	8004c08 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd8:	0020      	movs	r0, r4
 8004cda:	f7ff ff7d 	bl	8004bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cde:	0020      	movs	r0, r4
 8004ce0:	f7ff ff7c 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8004ce4:	e7a7      	b.n	8004c36 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce6:	0020      	movs	r0, r4
 8004ce8:	f7ff ff76 	bl	8004bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cec:	0020      	movs	r0, r4
 8004cee:	f7ff ff75 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8004cf2:	e7b5      	b.n	8004c60 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf4:	0020      	movs	r0, r4
 8004cf6:	f7ff ff6f 	bl	8004bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfa:	0020      	movs	r0, r4
 8004cfc:	f7ff ff6e 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8004d00:	e7c5      	b.n	8004c8e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d02:	2202      	movs	r2, #2
 8004d04:	4252      	negs	r2, r2
 8004d06:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d08:	0020      	movs	r0, r4
 8004d0a:	f7fd f88b 	bl	8001e24 <HAL_TIM_PeriodElapsedCallback>
 8004d0e:	e7c7      	b.n	8004ca0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d10:	2281      	movs	r2, #129	; 0x81
 8004d12:	4252      	negs	r2, r2
 8004d14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004d16:	0020      	movs	r0, r4
 8004d18:	f000 f937 	bl	8004f8a <HAL_TIMEx_BreakCallback>
 8004d1c:	e7c7      	b.n	8004cae <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d1e:	2241      	movs	r2, #65	; 0x41
 8004d20:	4252      	negs	r2, r2
 8004d22:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004d24:	0020      	movs	r0, r4
 8004d26:	f7ff ff5a 	bl	8004bde <HAL_TIM_TriggerCallback>
 8004d2a:	e7c7      	b.n	8004cbc <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d2c:	2221      	movs	r2, #33	; 0x21
 8004d2e:	4252      	negs	r2, r2
 8004d30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004d32:	0020      	movs	r0, r4
 8004d34:	f000 f928 	bl	8004f88 <HAL_TIMEx_CommutCallback>
}
 8004d38:	e7c7      	b.n	8004cca <HAL_TIM_IRQHandler+0xea>
	...

08004d3c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004d3c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3e:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <TIM_Base_SetConfig+0x78>)
 8004d40:	4290      	cmp	r0, r2
 8004d42:	d002      	beq.n	8004d4a <TIM_Base_SetConfig+0xe>
 8004d44:	4a1c      	ldr	r2, [pc, #112]	; (8004db8 <TIM_Base_SetConfig+0x7c>)
 8004d46:	4290      	cmp	r0, r2
 8004d48:	d103      	bne.n	8004d52 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4a:	2270      	movs	r2, #112	; 0x70
 8004d4c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004d4e:	684a      	ldr	r2, [r1, #4]
 8004d50:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d52:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <TIM_Base_SetConfig+0x78>)
 8004d54:	4290      	cmp	r0, r2
 8004d56:	d00e      	beq.n	8004d76 <TIM_Base_SetConfig+0x3a>
 8004d58:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <TIM_Base_SetConfig+0x7c>)
 8004d5a:	4290      	cmp	r0, r2
 8004d5c:	d00b      	beq.n	8004d76 <TIM_Base_SetConfig+0x3a>
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <TIM_Base_SetConfig+0x80>)
 8004d60:	4290      	cmp	r0, r2
 8004d62:	d008      	beq.n	8004d76 <TIM_Base_SetConfig+0x3a>
 8004d64:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <TIM_Base_SetConfig+0x84>)
 8004d66:	4290      	cmp	r0, r2
 8004d68:	d005      	beq.n	8004d76 <TIM_Base_SetConfig+0x3a>
 8004d6a:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <TIM_Base_SetConfig+0x88>)
 8004d6c:	4290      	cmp	r0, r2
 8004d6e:	d002      	beq.n	8004d76 <TIM_Base_SetConfig+0x3a>
 8004d70:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <TIM_Base_SetConfig+0x8c>)
 8004d72:	4290      	cmp	r0, r2
 8004d74:	d103      	bne.n	8004d7e <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d76:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <TIM_Base_SetConfig+0x90>)
 8004d78:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7a:	68ca      	ldr	r2, [r1, #12]
 8004d7c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d7e:	2280      	movs	r2, #128	; 0x80
 8004d80:	4393      	bics	r3, r2
 8004d82:	694a      	ldr	r2, [r1, #20]
 8004d84:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004d86:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d88:	688b      	ldr	r3, [r1, #8]
 8004d8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d8c:	680b      	ldr	r3, [r1, #0]
 8004d8e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d90:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <TIM_Base_SetConfig+0x78>)
 8004d92:	4298      	cmp	r0, r3
 8004d94:	d008      	beq.n	8004da8 <TIM_Base_SetConfig+0x6c>
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <TIM_Base_SetConfig+0x84>)
 8004d98:	4298      	cmp	r0, r3
 8004d9a:	d005      	beq.n	8004da8 <TIM_Base_SetConfig+0x6c>
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <TIM_Base_SetConfig+0x88>)
 8004d9e:	4298      	cmp	r0, r3
 8004da0:	d002      	beq.n	8004da8 <TIM_Base_SetConfig+0x6c>
 8004da2:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <TIM_Base_SetConfig+0x8c>)
 8004da4:	4298      	cmp	r0, r3
 8004da6:	d101      	bne.n	8004dac <TIM_Base_SetConfig+0x70>
    TIMx->RCR = Structure->RepetitionCounter;
 8004da8:	690b      	ldr	r3, [r1, #16]
 8004daa:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004dac:	2301      	movs	r3, #1
 8004dae:	6143      	str	r3, [r0, #20]
}
 8004db0:	4770      	bx	lr
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	40012c00 	.word	0x40012c00
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40002000 	.word	0x40002000
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40014400 	.word	0x40014400
 8004dc8:	40014800 	.word	0x40014800
 8004dcc:	fffffcff 	.word	0xfffffcff

08004dd0 <HAL_TIM_Base_Init>:
{
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004dd4:	d026      	beq.n	8004e24 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd6:	233d      	movs	r3, #61	; 0x3d
 8004dd8:	5cc3      	ldrb	r3, [r0, r3]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d01c      	beq.n	8004e18 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8004dde:	253d      	movs	r5, #61	; 0x3d
 8004de0:	2302      	movs	r3, #2
 8004de2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de4:	1d21      	adds	r1, r4, #4
 8004de6:	6820      	ldr	r0, [r4, #0]
 8004de8:	f7ff ffa8 	bl	8004d3c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dec:	2301      	movs	r3, #1
 8004dee:	2246      	movs	r2, #70	; 0x46
 8004df0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	3a08      	subs	r2, #8
 8004df4:	54a3      	strb	r3, [r4, r2]
 8004df6:	3201      	adds	r2, #1
 8004df8:	54a3      	strb	r3, [r4, r2]
 8004dfa:	3201      	adds	r2, #1
 8004dfc:	54a3      	strb	r3, [r4, r2]
 8004dfe:	3201      	adds	r2, #1
 8004e00:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e02:	3201      	adds	r2, #1
 8004e04:	54a3      	strb	r3, [r4, r2]
 8004e06:	3201      	adds	r2, #1
 8004e08:	54a3      	strb	r3, [r4, r2]
 8004e0a:	3201      	adds	r2, #1
 8004e0c:	54a3      	strb	r3, [r4, r2]
 8004e0e:	3201      	adds	r2, #1
 8004e10:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004e12:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004e14:	2000      	movs	r0, #0
}
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004e18:	333c      	adds	r3, #60	; 0x3c
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004e1e:	f7fd ff97 	bl	8002d50 <HAL_TIM_Base_MspInit>
 8004e22:	e7dc      	b.n	8004dde <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8004e24:	2001      	movs	r0, #1
 8004e26:	e7f6      	b.n	8004e16 <HAL_TIM_Base_Init+0x46>

08004e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e28:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e2a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	4d03      	ldr	r5, [pc, #12]	; (8004e3c <TIM_ETR_SetConfig+0x14>)
 8004e2e:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	431a      	orrs	r2, r3
 8004e34:	4311      	orrs	r1, r2
 8004e36:	4321      	orrs	r1, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e38:	6081      	str	r1, [r0, #8]
}
 8004e3a:	bd30      	pop	{r4, r5, pc}
 8004e3c:	ffff00ff 	.word	0xffff00ff

08004e40 <HAL_TIM_ConfigClockSource>:
{
 8004e40:	b510      	push	{r4, lr}
 8004e42:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004e44:	233c      	movs	r3, #60	; 0x3c
 8004e46:	5cc3      	ldrb	r3, [r0, r3]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d066      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0xda>
 8004e4c:	233c      	movs	r3, #60	; 0x3c
 8004e4e:	2201      	movs	r2, #1
 8004e50:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e52:	3301      	adds	r3, #1
 8004e54:	3201      	adds	r2, #1
 8004e56:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8004e58:	6802      	ldr	r2, [r0, #0]
 8004e5a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e5c:	4830      	ldr	r0, [pc, #192]	; (8004f20 <HAL_TIM_ConfigClockSource+0xe0>)
 8004e5e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004e60:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e62:	680b      	ldr	r3, [r1, #0]
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d04e      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0xc6>
 8004e68:	d915      	bls.n	8004e96 <HAL_TIM_ConfigClockSource+0x56>
 8004e6a:	2b60      	cmp	r3, #96	; 0x60
 8004e6c:	d041      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0xb2>
 8004e6e:	d921      	bls.n	8004eb4 <HAL_TIM_ConfigClockSource+0x74>
 8004e70:	2b70      	cmp	r3, #112	; 0x70
 8004e72:	d02b      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x8c>
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	0192      	lsls	r2, r2, #6
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d132      	bne.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8004e7c:	68cb      	ldr	r3, [r1, #12]
 8004e7e:	684a      	ldr	r2, [r1, #4]
 8004e80:	6889      	ldr	r1, [r1, #8]
 8004e82:	6820      	ldr	r0, [r4, #0]
 8004e84:	f7ff ffd0 	bl	8004e28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	6891      	ldr	r1, [r2, #8]
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	01db      	lsls	r3, r3, #7
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6093      	str	r3, [r2, #8]
      break;
 8004e94:	e025      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d007      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x6a>
 8004e9a:	d904      	bls.n	8004ea6 <HAL_TIM_ConfigClockSource+0x66>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x6a>
 8004ea0:	2b30      	cmp	r3, #48	; 0x30
 8004ea2:	d002      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x6a>
 8004ea4:	e01d      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11b      	bne.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eaa:	0019      	movs	r1, r3
 8004eac:	6820      	ldr	r0, [r4, #0]
 8004eae:	f7ff fe3b 	bl	8004b28 <TIM_ITRx_SetConfig>
        break;
 8004eb2:	e016      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8004eb4:	2b50      	cmp	r3, #80	; 0x50
 8004eb6:	d114      	bne.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb8:	68ca      	ldr	r2, [r1, #12]
 8004eba:	6849      	ldr	r1, [r1, #4]
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	f7ff fe0d 	bl	8004adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec2:	2150      	movs	r1, #80	; 0x50
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	f7ff fe2f 	bl	8004b28 <TIM_ITRx_SetConfig>
      break;
 8004eca:	e00a      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8004ecc:	68cb      	ldr	r3, [r1, #12]
 8004ece:	684a      	ldr	r2, [r1, #4]
 8004ed0:	6889      	ldr	r1, [r1, #8]
 8004ed2:	6820      	ldr	r0, [r4, #0]
 8004ed4:	f7ff ffa8 	bl	8004e28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004edc:	2177      	movs	r1, #119	; 0x77
 8004ede:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004ee0:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004ee2:	233d      	movs	r3, #61	; 0x3d
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	2200      	movs	r2, #0
 8004eec:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8004eee:	2000      	movs	r0, #0
}
 8004ef0:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef2:	68ca      	ldr	r2, [r1, #12]
 8004ef4:	6849      	ldr	r1, [r1, #4]
 8004ef6:	6820      	ldr	r0, [r4, #0]
 8004ef8:	f7ff fe02 	bl	8004b00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004efc:	2160      	movs	r1, #96	; 0x60
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	f7ff fe12 	bl	8004b28 <TIM_ITRx_SetConfig>
      break;
 8004f04:	e7ed      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f06:	68ca      	ldr	r2, [r1, #12]
 8004f08:	6849      	ldr	r1, [r1, #4]
 8004f0a:	6820      	ldr	r0, [r4, #0]
 8004f0c:	f7ff fde6 	bl	8004adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f10:	2140      	movs	r1, #64	; 0x40
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	f7ff fe08 	bl	8004b28 <TIM_ITRx_SetConfig>
      break;
 8004f18:	e7e3      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8004f1a:	2002      	movs	r0, #2
 8004f1c:	e7e8      	b.n	8004ef0 <HAL_TIM_ConfigClockSource+0xb0>
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	ffff0088 	.word	0xffff0088

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f24:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f26:	233c      	movs	r3, #60	; 0x3c
 8004f28:	5cc3      	ldrb	r3, [r0, r3]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d024      	beq.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004f2e:	233c      	movs	r3, #60	; 0x3c
 8004f30:	2201      	movs	r2, #1
 8004f32:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	3301      	adds	r3, #1
 8004f36:	3201      	adds	r2, #1
 8004f38:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3e:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f40:	2570      	movs	r5, #112	; 0x70
 8004f42:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f44:	680d      	ldr	r5, [r1, #0]
 8004f46:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4a:	6803      	ldr	r3, [r0, #0]
 8004f4c:	4a0b      	ldr	r2, [pc, #44]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d005      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004f52:	4a0b      	ldr	r2, [pc, #44]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d002      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004f58:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d104      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5e:	2280      	movs	r2, #128	; 0x80
 8004f60:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f62:	684a      	ldr	r2, [r1, #4]
 8004f64:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f66:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	233d      	movs	r3, #61	; 0x3d
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	2200      	movs	r2, #0
 8004f72:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004f74:	2000      	movs	r0, #0
}
 8004f76:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004f78:	2002      	movs	r0, #2
 8004f7a:	e7fc      	b.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40014000 	.word	0x40014000

08004f88 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f8a:	4770      	bx	lr

08004f8c <__errno>:
 8004f8c:	4b01      	ldr	r3, [pc, #4]	; (8004f94 <__errno+0x8>)
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	4770      	bx	lr
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	20000010 	.word	0x20000010

08004f98 <__libc_init_array>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	2600      	movs	r6, #0
 8004f9c:	4d0c      	ldr	r5, [pc, #48]	; (8004fd0 <__libc_init_array+0x38>)
 8004f9e:	4c0d      	ldr	r4, [pc, #52]	; (8004fd4 <__libc_init_array+0x3c>)
 8004fa0:	1b64      	subs	r4, r4, r5
 8004fa2:	10a4      	asrs	r4, r4, #2
 8004fa4:	42a6      	cmp	r6, r4
 8004fa6:	d109      	bne.n	8004fbc <__libc_init_array+0x24>
 8004fa8:	2600      	movs	r6, #0
 8004faa:	f000 fc3f 	bl	800582c <_init>
 8004fae:	4d0a      	ldr	r5, [pc, #40]	; (8004fd8 <__libc_init_array+0x40>)
 8004fb0:	4c0a      	ldr	r4, [pc, #40]	; (8004fdc <__libc_init_array+0x44>)
 8004fb2:	1b64      	subs	r4, r4, r5
 8004fb4:	10a4      	asrs	r4, r4, #2
 8004fb6:	42a6      	cmp	r6, r4
 8004fb8:	d105      	bne.n	8004fc6 <__libc_init_array+0x2e>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	00b3      	lsls	r3, r6, #2
 8004fbe:	58eb      	ldr	r3, [r5, r3]
 8004fc0:	4798      	blx	r3
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7ee      	b.n	8004fa4 <__libc_init_array+0xc>
 8004fc6:	00b3      	lsls	r3, r6, #2
 8004fc8:	58eb      	ldr	r3, [r5, r3]
 8004fca:	4798      	blx	r3
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7f2      	b.n	8004fb6 <__libc_init_array+0x1e>
 8004fd0:	08006918 	.word	0x08006918
 8004fd4:	08006918 	.word	0x08006918
 8004fd8:	08006918 	.word	0x08006918
 8004fdc:	0800691c 	.word	0x0800691c

08004fe0 <memcpy>:
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	b510      	push	{r4, lr}
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d100      	bne.n	8004fea <memcpy+0xa>
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	5ccc      	ldrb	r4, [r1, r3]
 8004fec:	54c4      	strb	r4, [r0, r3]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	e7f8      	b.n	8004fe4 <memcpy+0x4>

08004ff2 <memset>:
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	1812      	adds	r2, r2, r0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d100      	bne.n	8004ffc <memset+0xa>
 8004ffa:	4770      	bx	lr
 8004ffc:	7019      	strb	r1, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	e7f9      	b.n	8004ff6 <memset+0x4>
	...

08005004 <_free_r>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	0005      	movs	r5, r0
 8005008:	2900      	cmp	r1, #0
 800500a:	d010      	beq.n	800502e <_free_r+0x2a>
 800500c:	1f0c      	subs	r4, r1, #4
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	da00      	bge.n	8005016 <_free_r+0x12>
 8005014:	18e4      	adds	r4, r4, r3
 8005016:	0028      	movs	r0, r5
 8005018:	f000 f8e4 	bl	80051e4 <__malloc_lock>
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <_free_r+0x90>)
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <_free_r+0x2c>
 8005024:	6063      	str	r3, [r4, #4]
 8005026:	6014      	str	r4, [r2, #0]
 8005028:	0028      	movs	r0, r5
 800502a:	f000 f8dc 	bl	80051e6 <__malloc_unlock>
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	42a3      	cmp	r3, r4
 8005032:	d909      	bls.n	8005048 <_free_r+0x44>
 8005034:	6821      	ldr	r1, [r4, #0]
 8005036:	1860      	adds	r0, r4, r1
 8005038:	4283      	cmp	r3, r0
 800503a:	d1f3      	bne.n	8005024 <_free_r+0x20>
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	1841      	adds	r1, r0, r1
 8005042:	6021      	str	r1, [r4, #0]
 8005044:	e7ee      	b.n	8005024 <_free_r+0x20>
 8005046:	0013      	movs	r3, r2
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	2a00      	cmp	r2, #0
 800504c:	d001      	beq.n	8005052 <_free_r+0x4e>
 800504e:	42a2      	cmp	r2, r4
 8005050:	d9f9      	bls.n	8005046 <_free_r+0x42>
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	1858      	adds	r0, r3, r1
 8005056:	42a0      	cmp	r0, r4
 8005058:	d10b      	bne.n	8005072 <_free_r+0x6e>
 800505a:	6820      	ldr	r0, [r4, #0]
 800505c:	1809      	adds	r1, r1, r0
 800505e:	1858      	adds	r0, r3, r1
 8005060:	6019      	str	r1, [r3, #0]
 8005062:	4282      	cmp	r2, r0
 8005064:	d1e0      	bne.n	8005028 <_free_r+0x24>
 8005066:	6810      	ldr	r0, [r2, #0]
 8005068:	6852      	ldr	r2, [r2, #4]
 800506a:	1841      	adds	r1, r0, r1
 800506c:	6019      	str	r1, [r3, #0]
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	e7da      	b.n	8005028 <_free_r+0x24>
 8005072:	42a0      	cmp	r0, r4
 8005074:	d902      	bls.n	800507c <_free_r+0x78>
 8005076:	230c      	movs	r3, #12
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	e7d5      	b.n	8005028 <_free_r+0x24>
 800507c:	6821      	ldr	r1, [r4, #0]
 800507e:	1860      	adds	r0, r4, r1
 8005080:	4282      	cmp	r2, r0
 8005082:	d103      	bne.n	800508c <_free_r+0x88>
 8005084:	6810      	ldr	r0, [r2, #0]
 8005086:	6852      	ldr	r2, [r2, #4]
 8005088:	1841      	adds	r1, r0, r1
 800508a:	6021      	str	r1, [r4, #0]
 800508c:	6062      	str	r2, [r4, #4]
 800508e:	605c      	str	r4, [r3, #4]
 8005090:	e7ca      	b.n	8005028 <_free_r+0x24>
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	200000ac 	.word	0x200000ac

08005098 <_malloc_r>:
 8005098:	2303      	movs	r3, #3
 800509a:	b570      	push	{r4, r5, r6, lr}
 800509c:	1ccd      	adds	r5, r1, #3
 800509e:	439d      	bics	r5, r3
 80050a0:	3508      	adds	r5, #8
 80050a2:	0006      	movs	r6, r0
 80050a4:	2d0c      	cmp	r5, #12
 80050a6:	d21e      	bcs.n	80050e6 <_malloc_r+0x4e>
 80050a8:	250c      	movs	r5, #12
 80050aa:	42a9      	cmp	r1, r5
 80050ac:	d81d      	bhi.n	80050ea <_malloc_r+0x52>
 80050ae:	0030      	movs	r0, r6
 80050b0:	f000 f898 	bl	80051e4 <__malloc_lock>
 80050b4:	4a25      	ldr	r2, [pc, #148]	; (800514c <_malloc_r+0xb4>)
 80050b6:	6814      	ldr	r4, [r2, #0]
 80050b8:	0021      	movs	r1, r4
 80050ba:	2900      	cmp	r1, #0
 80050bc:	d119      	bne.n	80050f2 <_malloc_r+0x5a>
 80050be:	4c24      	ldr	r4, [pc, #144]	; (8005150 <_malloc_r+0xb8>)
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <_malloc_r+0x36>
 80050c6:	0030      	movs	r0, r6
 80050c8:	f000 f844 	bl	8005154 <_sbrk_r>
 80050cc:	6020      	str	r0, [r4, #0]
 80050ce:	0029      	movs	r1, r5
 80050d0:	0030      	movs	r0, r6
 80050d2:	f000 f83f 	bl	8005154 <_sbrk_r>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d12b      	bne.n	8005132 <_malloc_r+0x9a>
 80050da:	230c      	movs	r3, #12
 80050dc:	0030      	movs	r0, r6
 80050de:	6033      	str	r3, [r6, #0]
 80050e0:	f000 f881 	bl	80051e6 <__malloc_unlock>
 80050e4:	e003      	b.n	80050ee <_malloc_r+0x56>
 80050e6:	2d00      	cmp	r5, #0
 80050e8:	dadf      	bge.n	80050aa <_malloc_r+0x12>
 80050ea:	230c      	movs	r3, #12
 80050ec:	6033      	str	r3, [r6, #0]
 80050ee:	2000      	movs	r0, #0
 80050f0:	bd70      	pop	{r4, r5, r6, pc}
 80050f2:	680b      	ldr	r3, [r1, #0]
 80050f4:	1b5b      	subs	r3, r3, r5
 80050f6:	d419      	bmi.n	800512c <_malloc_r+0x94>
 80050f8:	2b0b      	cmp	r3, #11
 80050fa:	d903      	bls.n	8005104 <_malloc_r+0x6c>
 80050fc:	600b      	str	r3, [r1, #0]
 80050fe:	18cc      	adds	r4, r1, r3
 8005100:	6025      	str	r5, [r4, #0]
 8005102:	e003      	b.n	800510c <_malloc_r+0x74>
 8005104:	684b      	ldr	r3, [r1, #4]
 8005106:	428c      	cmp	r4, r1
 8005108:	d10d      	bne.n	8005126 <_malloc_r+0x8e>
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	0030      	movs	r0, r6
 800510e:	f000 f86a 	bl	80051e6 <__malloc_unlock>
 8005112:	0020      	movs	r0, r4
 8005114:	2207      	movs	r2, #7
 8005116:	300b      	adds	r0, #11
 8005118:	1d23      	adds	r3, r4, #4
 800511a:	4390      	bics	r0, r2
 800511c:	1ac3      	subs	r3, r0, r3
 800511e:	d0e7      	beq.n	80050f0 <_malloc_r+0x58>
 8005120:	425a      	negs	r2, r3
 8005122:	50e2      	str	r2, [r4, r3]
 8005124:	e7e4      	b.n	80050f0 <_malloc_r+0x58>
 8005126:	6063      	str	r3, [r4, #4]
 8005128:	000c      	movs	r4, r1
 800512a:	e7ef      	b.n	800510c <_malloc_r+0x74>
 800512c:	000c      	movs	r4, r1
 800512e:	6849      	ldr	r1, [r1, #4]
 8005130:	e7c3      	b.n	80050ba <_malloc_r+0x22>
 8005132:	2303      	movs	r3, #3
 8005134:	1cc4      	adds	r4, r0, #3
 8005136:	439c      	bics	r4, r3
 8005138:	42a0      	cmp	r0, r4
 800513a:	d0e1      	beq.n	8005100 <_malloc_r+0x68>
 800513c:	1a21      	subs	r1, r4, r0
 800513e:	0030      	movs	r0, r6
 8005140:	f000 f808 	bl	8005154 <_sbrk_r>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d1db      	bne.n	8005100 <_malloc_r+0x68>
 8005148:	e7c7      	b.n	80050da <_malloc_r+0x42>
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	200000ac 	.word	0x200000ac
 8005150:	200000b0 	.word	0x200000b0

08005154 <_sbrk_r>:
 8005154:	2300      	movs	r3, #0
 8005156:	b570      	push	{r4, r5, r6, lr}
 8005158:	4c06      	ldr	r4, [pc, #24]	; (8005174 <_sbrk_r+0x20>)
 800515a:	0005      	movs	r5, r0
 800515c:	0008      	movs	r0, r1
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	f7fd feb8 	bl	8002ed4 <_sbrk>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d103      	bne.n	8005170 <_sbrk_r+0x1c>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d000      	beq.n	8005170 <_sbrk_r+0x1c>
 800516e:	602b      	str	r3, [r5, #0]
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	20000714 	.word	0x20000714

08005178 <siprintf>:
 8005178:	b40e      	push	{r1, r2, r3}
 800517a:	b500      	push	{lr}
 800517c:	490b      	ldr	r1, [pc, #44]	; (80051ac <siprintf+0x34>)
 800517e:	b09c      	sub	sp, #112	; 0x70
 8005180:	ab1d      	add	r3, sp, #116	; 0x74
 8005182:	9002      	str	r0, [sp, #8]
 8005184:	9006      	str	r0, [sp, #24]
 8005186:	9107      	str	r1, [sp, #28]
 8005188:	9104      	str	r1, [sp, #16]
 800518a:	4809      	ldr	r0, [pc, #36]	; (80051b0 <siprintf+0x38>)
 800518c:	4909      	ldr	r1, [pc, #36]	; (80051b4 <siprintf+0x3c>)
 800518e:	cb04      	ldmia	r3!, {r2}
 8005190:	9105      	str	r1, [sp, #20]
 8005192:	6800      	ldr	r0, [r0, #0]
 8005194:	a902      	add	r1, sp, #8
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	f000 f888 	bl	80052ac <_svfiprintf_r>
 800519c:	2300      	movs	r3, #0
 800519e:	9a02      	ldr	r2, [sp, #8]
 80051a0:	7013      	strb	r3, [r2, #0]
 80051a2:	b01c      	add	sp, #112	; 0x70
 80051a4:	bc08      	pop	{r3}
 80051a6:	b003      	add	sp, #12
 80051a8:	4718      	bx	r3
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	7fffffff 	.word	0x7fffffff
 80051b0:	20000010 	.word	0x20000010
 80051b4:	ffff0208 	.word	0xffff0208

080051b8 <strcat>:
 80051b8:	0002      	movs	r2, r0
 80051ba:	b510      	push	{r4, lr}
 80051bc:	7813      	ldrb	r3, [r2, #0]
 80051be:	1c54      	adds	r4, r2, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <strcat+0x18>
 80051c4:	5ccc      	ldrb	r4, [r1, r3]
 80051c6:	54d4      	strb	r4, [r2, r3]
 80051c8:	3301      	adds	r3, #1
 80051ca:	2c00      	cmp	r4, #0
 80051cc:	d1fa      	bne.n	80051c4 <strcat+0xc>
 80051ce:	bd10      	pop	{r4, pc}
 80051d0:	0022      	movs	r2, r4
 80051d2:	e7f3      	b.n	80051bc <strcat+0x4>

080051d4 <strcpy>:
 80051d4:	0003      	movs	r3, r0
 80051d6:	780a      	ldrb	r2, [r1, #0]
 80051d8:	3101      	adds	r1, #1
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	2a00      	cmp	r2, #0
 80051e0:	d1f9      	bne.n	80051d6 <strcpy+0x2>
 80051e2:	4770      	bx	lr

080051e4 <__malloc_lock>:
 80051e4:	4770      	bx	lr

080051e6 <__malloc_unlock>:
 80051e6:	4770      	bx	lr

080051e8 <__ssputs_r>:
 80051e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ea:	688e      	ldr	r6, [r1, #8]
 80051ec:	b085      	sub	sp, #20
 80051ee:	0007      	movs	r7, r0
 80051f0:	000c      	movs	r4, r1
 80051f2:	9203      	str	r2, [sp, #12]
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	429e      	cmp	r6, r3
 80051f8:	d83c      	bhi.n	8005274 <__ssputs_r+0x8c>
 80051fa:	2390      	movs	r3, #144	; 0x90
 80051fc:	898a      	ldrh	r2, [r1, #12]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	421a      	tst	r2, r3
 8005202:	d034      	beq.n	800526e <__ssputs_r+0x86>
 8005204:	2503      	movs	r5, #3
 8005206:	6909      	ldr	r1, [r1, #16]
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	1a5b      	subs	r3, r3, r1
 800520c:	9302      	str	r3, [sp, #8]
 800520e:	6963      	ldr	r3, [r4, #20]
 8005210:	9802      	ldr	r0, [sp, #8]
 8005212:	435d      	muls	r5, r3
 8005214:	0feb      	lsrs	r3, r5, #31
 8005216:	195d      	adds	r5, r3, r5
 8005218:	9b01      	ldr	r3, [sp, #4]
 800521a:	106d      	asrs	r5, r5, #1
 800521c:	3301      	adds	r3, #1
 800521e:	181b      	adds	r3, r3, r0
 8005220:	42ab      	cmp	r3, r5
 8005222:	d900      	bls.n	8005226 <__ssputs_r+0x3e>
 8005224:	001d      	movs	r5, r3
 8005226:	0553      	lsls	r3, r2, #21
 8005228:	d532      	bpl.n	8005290 <__ssputs_r+0xa8>
 800522a:	0029      	movs	r1, r5
 800522c:	0038      	movs	r0, r7
 800522e:	f7ff ff33 	bl	8005098 <_malloc_r>
 8005232:	1e06      	subs	r6, r0, #0
 8005234:	d109      	bne.n	800524a <__ssputs_r+0x62>
 8005236:	230c      	movs	r3, #12
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	2340      	movs	r3, #64	; 0x40
 800523c:	2001      	movs	r0, #1
 800523e:	89a2      	ldrh	r2, [r4, #12]
 8005240:	4240      	negs	r0, r0
 8005242:	4313      	orrs	r3, r2
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	b005      	add	sp, #20
 8005248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524a:	9a02      	ldr	r2, [sp, #8]
 800524c:	6921      	ldr	r1, [r4, #16]
 800524e:	f7ff fec7 	bl	8004fe0 <memcpy>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <__ssputs_r+0xc0>)
 8005256:	401a      	ands	r2, r3
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	4313      	orrs	r3, r2
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	9b02      	ldr	r3, [sp, #8]
 8005260:	6126      	str	r6, [r4, #16]
 8005262:	18f6      	adds	r6, r6, r3
 8005264:	6026      	str	r6, [r4, #0]
 8005266:	6165      	str	r5, [r4, #20]
 8005268:	9e01      	ldr	r6, [sp, #4]
 800526a:	1aed      	subs	r5, r5, r3
 800526c:	60a5      	str	r5, [r4, #8]
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	429e      	cmp	r6, r3
 8005272:	d900      	bls.n	8005276 <__ssputs_r+0x8e>
 8005274:	9e01      	ldr	r6, [sp, #4]
 8005276:	0032      	movs	r2, r6
 8005278:	9903      	ldr	r1, [sp, #12]
 800527a:	6820      	ldr	r0, [r4, #0]
 800527c:	f000 fa95 	bl	80057aa <memmove>
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	2000      	movs	r0, #0
 8005284:	1b9b      	subs	r3, r3, r6
 8005286:	60a3      	str	r3, [r4, #8]
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	199e      	adds	r6, r3, r6
 800528c:	6026      	str	r6, [r4, #0]
 800528e:	e7da      	b.n	8005246 <__ssputs_r+0x5e>
 8005290:	002a      	movs	r2, r5
 8005292:	0038      	movs	r0, r7
 8005294:	f000 fa9c 	bl	80057d0 <_realloc_r>
 8005298:	1e06      	subs	r6, r0, #0
 800529a:	d1e0      	bne.n	800525e <__ssputs_r+0x76>
 800529c:	6921      	ldr	r1, [r4, #16]
 800529e:	0038      	movs	r0, r7
 80052a0:	f7ff feb0 	bl	8005004 <_free_r>
 80052a4:	e7c7      	b.n	8005236 <__ssputs_r+0x4e>
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	fffffb7f 	.word	0xfffffb7f

080052ac <_svfiprintf_r>:
 80052ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ae:	b0a1      	sub	sp, #132	; 0x84
 80052b0:	9003      	str	r0, [sp, #12]
 80052b2:	001d      	movs	r5, r3
 80052b4:	898b      	ldrh	r3, [r1, #12]
 80052b6:	000f      	movs	r7, r1
 80052b8:	0016      	movs	r6, r2
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	d511      	bpl.n	80052e2 <_svfiprintf_r+0x36>
 80052be:	690b      	ldr	r3, [r1, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10e      	bne.n	80052e2 <_svfiprintf_r+0x36>
 80052c4:	2140      	movs	r1, #64	; 0x40
 80052c6:	f7ff fee7 	bl	8005098 <_malloc_r>
 80052ca:	6038      	str	r0, [r7, #0]
 80052cc:	6138      	str	r0, [r7, #16]
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d105      	bne.n	80052de <_svfiprintf_r+0x32>
 80052d2:	230c      	movs	r3, #12
 80052d4:	9a03      	ldr	r2, [sp, #12]
 80052d6:	3801      	subs	r0, #1
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	b021      	add	sp, #132	; 0x84
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052de:	2340      	movs	r3, #64	; 0x40
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	2300      	movs	r3, #0
 80052e4:	ac08      	add	r4, sp, #32
 80052e6:	6163      	str	r3, [r4, #20]
 80052e8:	3320      	adds	r3, #32
 80052ea:	7663      	strb	r3, [r4, #25]
 80052ec:	3310      	adds	r3, #16
 80052ee:	76a3      	strb	r3, [r4, #26]
 80052f0:	9507      	str	r5, [sp, #28]
 80052f2:	0035      	movs	r5, r6
 80052f4:	782b      	ldrb	r3, [r5, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <_svfiprintf_r+0x52>
 80052fa:	2b25      	cmp	r3, #37	; 0x25
 80052fc:	d146      	bne.n	800538c <_svfiprintf_r+0xe0>
 80052fe:	1bab      	subs	r3, r5, r6
 8005300:	9305      	str	r3, [sp, #20]
 8005302:	d00c      	beq.n	800531e <_svfiprintf_r+0x72>
 8005304:	0032      	movs	r2, r6
 8005306:	0039      	movs	r1, r7
 8005308:	9803      	ldr	r0, [sp, #12]
 800530a:	f7ff ff6d 	bl	80051e8 <__ssputs_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d100      	bne.n	8005314 <_svfiprintf_r+0x68>
 8005312:	e0ae      	b.n	8005472 <_svfiprintf_r+0x1c6>
 8005314:	6962      	ldr	r2, [r4, #20]
 8005316:	9b05      	ldr	r3, [sp, #20]
 8005318:	4694      	mov	ip, r2
 800531a:	4463      	add	r3, ip
 800531c:	6163      	str	r3, [r4, #20]
 800531e:	782b      	ldrb	r3, [r5, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d100      	bne.n	8005326 <_svfiprintf_r+0x7a>
 8005324:	e0a5      	b.n	8005472 <_svfiprintf_r+0x1c6>
 8005326:	2201      	movs	r2, #1
 8005328:	2300      	movs	r3, #0
 800532a:	4252      	negs	r2, r2
 800532c:	6062      	str	r2, [r4, #4]
 800532e:	a904      	add	r1, sp, #16
 8005330:	3254      	adds	r2, #84	; 0x54
 8005332:	1852      	adds	r2, r2, r1
 8005334:	1c6e      	adds	r6, r5, #1
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	60e3      	str	r3, [r4, #12]
 800533a:	60a3      	str	r3, [r4, #8]
 800533c:	7013      	strb	r3, [r2, #0]
 800533e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005340:	7831      	ldrb	r1, [r6, #0]
 8005342:	2205      	movs	r2, #5
 8005344:	4853      	ldr	r0, [pc, #332]	; (8005494 <_svfiprintf_r+0x1e8>)
 8005346:	f000 fa25 	bl	8005794 <memchr>
 800534a:	1c75      	adds	r5, r6, #1
 800534c:	2800      	cmp	r0, #0
 800534e:	d11f      	bne.n	8005390 <_svfiprintf_r+0xe4>
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	06d3      	lsls	r3, r2, #27
 8005354:	d504      	bpl.n	8005360 <_svfiprintf_r+0xb4>
 8005356:	2353      	movs	r3, #83	; 0x53
 8005358:	a904      	add	r1, sp, #16
 800535a:	185b      	adds	r3, r3, r1
 800535c:	2120      	movs	r1, #32
 800535e:	7019      	strb	r1, [r3, #0]
 8005360:	0713      	lsls	r3, r2, #28
 8005362:	d504      	bpl.n	800536e <_svfiprintf_r+0xc2>
 8005364:	2353      	movs	r3, #83	; 0x53
 8005366:	a904      	add	r1, sp, #16
 8005368:	185b      	adds	r3, r3, r1
 800536a:	212b      	movs	r1, #43	; 0x2b
 800536c:	7019      	strb	r1, [r3, #0]
 800536e:	7833      	ldrb	r3, [r6, #0]
 8005370:	2b2a      	cmp	r3, #42	; 0x2a
 8005372:	d016      	beq.n	80053a2 <_svfiprintf_r+0xf6>
 8005374:	0035      	movs	r5, r6
 8005376:	2100      	movs	r1, #0
 8005378:	200a      	movs	r0, #10
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	782a      	ldrb	r2, [r5, #0]
 800537e:	1c6e      	adds	r6, r5, #1
 8005380:	3a30      	subs	r2, #48	; 0x30
 8005382:	2a09      	cmp	r2, #9
 8005384:	d94e      	bls.n	8005424 <_svfiprintf_r+0x178>
 8005386:	2900      	cmp	r1, #0
 8005388:	d018      	beq.n	80053bc <_svfiprintf_r+0x110>
 800538a:	e010      	b.n	80053ae <_svfiprintf_r+0x102>
 800538c:	3501      	adds	r5, #1
 800538e:	e7b1      	b.n	80052f4 <_svfiprintf_r+0x48>
 8005390:	4b40      	ldr	r3, [pc, #256]	; (8005494 <_svfiprintf_r+0x1e8>)
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	1ac0      	subs	r0, r0, r3
 8005396:	2301      	movs	r3, #1
 8005398:	4083      	lsls	r3, r0
 800539a:	4313      	orrs	r3, r2
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	002e      	movs	r6, r5
 80053a0:	e7ce      	b.n	8005340 <_svfiprintf_r+0x94>
 80053a2:	9b07      	ldr	r3, [sp, #28]
 80053a4:	1d19      	adds	r1, r3, #4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	9107      	str	r1, [sp, #28]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	db01      	blt.n	80053b2 <_svfiprintf_r+0x106>
 80053ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b0:	e004      	b.n	80053bc <_svfiprintf_r+0x110>
 80053b2:	425b      	negs	r3, r3
 80053b4:	60e3      	str	r3, [r4, #12]
 80053b6:	2302      	movs	r3, #2
 80053b8:	4313      	orrs	r3, r2
 80053ba:	6023      	str	r3, [r4, #0]
 80053bc:	782b      	ldrb	r3, [r5, #0]
 80053be:	2b2e      	cmp	r3, #46	; 0x2e
 80053c0:	d10a      	bne.n	80053d8 <_svfiprintf_r+0x12c>
 80053c2:	786b      	ldrb	r3, [r5, #1]
 80053c4:	2b2a      	cmp	r3, #42	; 0x2a
 80053c6:	d135      	bne.n	8005434 <_svfiprintf_r+0x188>
 80053c8:	9b07      	ldr	r3, [sp, #28]
 80053ca:	3502      	adds	r5, #2
 80053cc:	1d1a      	adds	r2, r3, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	9207      	str	r2, [sp, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	db2b      	blt.n	800542e <_svfiprintf_r+0x182>
 80053d6:	9309      	str	r3, [sp, #36]	; 0x24
 80053d8:	4e2f      	ldr	r6, [pc, #188]	; (8005498 <_svfiprintf_r+0x1ec>)
 80053da:	7829      	ldrb	r1, [r5, #0]
 80053dc:	2203      	movs	r2, #3
 80053de:	0030      	movs	r0, r6
 80053e0:	f000 f9d8 	bl	8005794 <memchr>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d006      	beq.n	80053f6 <_svfiprintf_r+0x14a>
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	1b80      	subs	r0, r0, r6
 80053ec:	4083      	lsls	r3, r0
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	3501      	adds	r5, #1
 80053f2:	4313      	orrs	r3, r2
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	7829      	ldrb	r1, [r5, #0]
 80053f8:	2206      	movs	r2, #6
 80053fa:	4828      	ldr	r0, [pc, #160]	; (800549c <_svfiprintf_r+0x1f0>)
 80053fc:	1c6e      	adds	r6, r5, #1
 80053fe:	7621      	strb	r1, [r4, #24]
 8005400:	f000 f9c8 	bl	8005794 <memchr>
 8005404:	2800      	cmp	r0, #0
 8005406:	d03c      	beq.n	8005482 <_svfiprintf_r+0x1d6>
 8005408:	4b25      	ldr	r3, [pc, #148]	; (80054a0 <_svfiprintf_r+0x1f4>)
 800540a:	2b00      	cmp	r3, #0
 800540c:	d125      	bne.n	800545a <_svfiprintf_r+0x1ae>
 800540e:	2207      	movs	r2, #7
 8005410:	9b07      	ldr	r3, [sp, #28]
 8005412:	3307      	adds	r3, #7
 8005414:	4393      	bics	r3, r2
 8005416:	3308      	adds	r3, #8
 8005418:	9307      	str	r3, [sp, #28]
 800541a:	6963      	ldr	r3, [r4, #20]
 800541c:	9a04      	ldr	r2, [sp, #16]
 800541e:	189b      	adds	r3, r3, r2
 8005420:	6163      	str	r3, [r4, #20]
 8005422:	e766      	b.n	80052f2 <_svfiprintf_r+0x46>
 8005424:	4343      	muls	r3, r0
 8005426:	2101      	movs	r1, #1
 8005428:	189b      	adds	r3, r3, r2
 800542a:	0035      	movs	r5, r6
 800542c:	e7a6      	b.n	800537c <_svfiprintf_r+0xd0>
 800542e:	2301      	movs	r3, #1
 8005430:	425b      	negs	r3, r3
 8005432:	e7d0      	b.n	80053d6 <_svfiprintf_r+0x12a>
 8005434:	2300      	movs	r3, #0
 8005436:	200a      	movs	r0, #10
 8005438:	001a      	movs	r2, r3
 800543a:	3501      	adds	r5, #1
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	7829      	ldrb	r1, [r5, #0]
 8005440:	1c6e      	adds	r6, r5, #1
 8005442:	3930      	subs	r1, #48	; 0x30
 8005444:	2909      	cmp	r1, #9
 8005446:	d903      	bls.n	8005450 <_svfiprintf_r+0x1a4>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0c5      	beq.n	80053d8 <_svfiprintf_r+0x12c>
 800544c:	9209      	str	r2, [sp, #36]	; 0x24
 800544e:	e7c3      	b.n	80053d8 <_svfiprintf_r+0x12c>
 8005450:	4342      	muls	r2, r0
 8005452:	2301      	movs	r3, #1
 8005454:	1852      	adds	r2, r2, r1
 8005456:	0035      	movs	r5, r6
 8005458:	e7f1      	b.n	800543e <_svfiprintf_r+0x192>
 800545a:	ab07      	add	r3, sp, #28
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	003a      	movs	r2, r7
 8005460:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <_svfiprintf_r+0x1f8>)
 8005462:	0021      	movs	r1, r4
 8005464:	9803      	ldr	r0, [sp, #12]
 8005466:	e000      	b.n	800546a <_svfiprintf_r+0x1be>
 8005468:	bf00      	nop
 800546a:	9004      	str	r0, [sp, #16]
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	3301      	adds	r3, #1
 8005470:	d1d3      	bne.n	800541a <_svfiprintf_r+0x16e>
 8005472:	89bb      	ldrh	r3, [r7, #12]
 8005474:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005476:	065b      	lsls	r3, r3, #25
 8005478:	d400      	bmi.n	800547c <_svfiprintf_r+0x1d0>
 800547a:	e72e      	b.n	80052da <_svfiprintf_r+0x2e>
 800547c:	2001      	movs	r0, #1
 800547e:	4240      	negs	r0, r0
 8005480:	e72b      	b.n	80052da <_svfiprintf_r+0x2e>
 8005482:	ab07      	add	r3, sp, #28
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	003a      	movs	r2, r7
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <_svfiprintf_r+0x1f8>)
 800548a:	0021      	movs	r1, r4
 800548c:	9803      	ldr	r0, [sp, #12]
 800548e:	f000 f879 	bl	8005584 <_printf_i>
 8005492:	e7ea      	b.n	800546a <_svfiprintf_r+0x1be>
 8005494:	080068e4 	.word	0x080068e4
 8005498:	080068ea 	.word	0x080068ea
 800549c:	080068ee 	.word	0x080068ee
 80054a0:	00000000 	.word	0x00000000
 80054a4:	080051e9 	.word	0x080051e9

080054a8 <_printf_common>:
 80054a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054aa:	0015      	movs	r5, r2
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	688a      	ldr	r2, [r1, #8]
 80054b0:	690b      	ldr	r3, [r1, #16]
 80054b2:	9000      	str	r0, [sp, #0]
 80054b4:	000c      	movs	r4, r1
 80054b6:	4293      	cmp	r3, r2
 80054b8:	da00      	bge.n	80054bc <_printf_common+0x14>
 80054ba:	0013      	movs	r3, r2
 80054bc:	0022      	movs	r2, r4
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	3243      	adds	r2, #67	; 0x43
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	2a00      	cmp	r2, #0
 80054c6:	d001      	beq.n	80054cc <_printf_common+0x24>
 80054c8:	3301      	adds	r3, #1
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	069b      	lsls	r3, r3, #26
 80054d0:	d502      	bpl.n	80054d8 <_printf_common+0x30>
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	3302      	adds	r3, #2
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	2706      	movs	r7, #6
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	401f      	ands	r7, r3
 80054de:	d027      	beq.n	8005530 <_printf_common+0x88>
 80054e0:	0023      	movs	r3, r4
 80054e2:	3343      	adds	r3, #67	; 0x43
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	1e5a      	subs	r2, r3, #1
 80054e8:	4193      	sbcs	r3, r2
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	0692      	lsls	r2, r2, #26
 80054ee:	d430      	bmi.n	8005552 <_printf_common+0xaa>
 80054f0:	0022      	movs	r2, r4
 80054f2:	9901      	ldr	r1, [sp, #4]
 80054f4:	3243      	adds	r2, #67	; 0x43
 80054f6:	9800      	ldr	r0, [sp, #0]
 80054f8:	9e08      	ldr	r6, [sp, #32]
 80054fa:	47b0      	blx	r6
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d025      	beq.n	800554c <_printf_common+0xa4>
 8005500:	2306      	movs	r3, #6
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	682a      	ldr	r2, [r5, #0]
 8005506:	68e1      	ldr	r1, [r4, #12]
 8005508:	4003      	ands	r3, r0
 800550a:	2500      	movs	r5, #0
 800550c:	2b04      	cmp	r3, #4
 800550e:	d103      	bne.n	8005518 <_printf_common+0x70>
 8005510:	1a8d      	subs	r5, r1, r2
 8005512:	43eb      	mvns	r3, r5
 8005514:	17db      	asrs	r3, r3, #31
 8005516:	401d      	ands	r5, r3
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	6922      	ldr	r2, [r4, #16]
 800551c:	4293      	cmp	r3, r2
 800551e:	dd01      	ble.n	8005524 <_printf_common+0x7c>
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	18ed      	adds	r5, r5, r3
 8005524:	2700      	movs	r7, #0
 8005526:	42bd      	cmp	r5, r7
 8005528:	d120      	bne.n	800556c <_printf_common+0xc4>
 800552a:	2000      	movs	r0, #0
 800552c:	e010      	b.n	8005550 <_printf_common+0xa8>
 800552e:	3701      	adds	r7, #1
 8005530:	68e3      	ldr	r3, [r4, #12]
 8005532:	682a      	ldr	r2, [r5, #0]
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	42bb      	cmp	r3, r7
 8005538:	ddd2      	ble.n	80054e0 <_printf_common+0x38>
 800553a:	0022      	movs	r2, r4
 800553c:	2301      	movs	r3, #1
 800553e:	3219      	adds	r2, #25
 8005540:	9901      	ldr	r1, [sp, #4]
 8005542:	9800      	ldr	r0, [sp, #0]
 8005544:	9e08      	ldr	r6, [sp, #32]
 8005546:	47b0      	blx	r6
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d1f0      	bne.n	800552e <_printf_common+0x86>
 800554c:	2001      	movs	r0, #1
 800554e:	4240      	negs	r0, r0
 8005550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005552:	2030      	movs	r0, #48	; 0x30
 8005554:	18e1      	adds	r1, r4, r3
 8005556:	3143      	adds	r1, #67	; 0x43
 8005558:	7008      	strb	r0, [r1, #0]
 800555a:	0021      	movs	r1, r4
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	3145      	adds	r1, #69	; 0x45
 8005560:	7809      	ldrb	r1, [r1, #0]
 8005562:	18a2      	adds	r2, r4, r2
 8005564:	3243      	adds	r2, #67	; 0x43
 8005566:	3302      	adds	r3, #2
 8005568:	7011      	strb	r1, [r2, #0]
 800556a:	e7c1      	b.n	80054f0 <_printf_common+0x48>
 800556c:	0022      	movs	r2, r4
 800556e:	2301      	movs	r3, #1
 8005570:	321a      	adds	r2, #26
 8005572:	9901      	ldr	r1, [sp, #4]
 8005574:	9800      	ldr	r0, [sp, #0]
 8005576:	9e08      	ldr	r6, [sp, #32]
 8005578:	47b0      	blx	r6
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	d0e6      	beq.n	800554c <_printf_common+0xa4>
 800557e:	3701      	adds	r7, #1
 8005580:	e7d1      	b.n	8005526 <_printf_common+0x7e>
	...

08005584 <_printf_i>:
 8005584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005586:	b089      	sub	sp, #36	; 0x24
 8005588:	9204      	str	r2, [sp, #16]
 800558a:	000a      	movs	r2, r1
 800558c:	3243      	adds	r2, #67	; 0x43
 800558e:	9305      	str	r3, [sp, #20]
 8005590:	9003      	str	r0, [sp, #12]
 8005592:	9202      	str	r2, [sp, #8]
 8005594:	7e0a      	ldrb	r2, [r1, #24]
 8005596:	000c      	movs	r4, r1
 8005598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800559a:	2a6e      	cmp	r2, #110	; 0x6e
 800559c:	d100      	bne.n	80055a0 <_printf_i+0x1c>
 800559e:	e086      	b.n	80056ae <_printf_i+0x12a>
 80055a0:	d81f      	bhi.n	80055e2 <_printf_i+0x5e>
 80055a2:	2a63      	cmp	r2, #99	; 0x63
 80055a4:	d033      	beq.n	800560e <_printf_i+0x8a>
 80055a6:	d808      	bhi.n	80055ba <_printf_i+0x36>
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	d100      	bne.n	80055ae <_printf_i+0x2a>
 80055ac:	e08c      	b.n	80056c8 <_printf_i+0x144>
 80055ae:	2a58      	cmp	r2, #88	; 0x58
 80055b0:	d04d      	beq.n	800564e <_printf_i+0xca>
 80055b2:	0025      	movs	r5, r4
 80055b4:	3542      	adds	r5, #66	; 0x42
 80055b6:	702a      	strb	r2, [r5, #0]
 80055b8:	e030      	b.n	800561c <_printf_i+0x98>
 80055ba:	2a64      	cmp	r2, #100	; 0x64
 80055bc:	d001      	beq.n	80055c2 <_printf_i+0x3e>
 80055be:	2a69      	cmp	r2, #105	; 0x69
 80055c0:	d1f7      	bne.n	80055b2 <_printf_i+0x2e>
 80055c2:	6819      	ldr	r1, [r3, #0]
 80055c4:	6825      	ldr	r5, [r4, #0]
 80055c6:	1d0a      	adds	r2, r1, #4
 80055c8:	0628      	lsls	r0, r5, #24
 80055ca:	d529      	bpl.n	8005620 <_printf_i+0x9c>
 80055cc:	6808      	ldr	r0, [r1, #0]
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	2800      	cmp	r0, #0
 80055d2:	da03      	bge.n	80055dc <_printf_i+0x58>
 80055d4:	232d      	movs	r3, #45	; 0x2d
 80055d6:	9a02      	ldr	r2, [sp, #8]
 80055d8:	4240      	negs	r0, r0
 80055da:	7013      	strb	r3, [r2, #0]
 80055dc:	4e6b      	ldr	r6, [pc, #428]	; (800578c <_printf_i+0x208>)
 80055de:	270a      	movs	r7, #10
 80055e0:	e04f      	b.n	8005682 <_printf_i+0xfe>
 80055e2:	2a73      	cmp	r2, #115	; 0x73
 80055e4:	d074      	beq.n	80056d0 <_printf_i+0x14c>
 80055e6:	d808      	bhi.n	80055fa <_printf_i+0x76>
 80055e8:	2a6f      	cmp	r2, #111	; 0x6f
 80055ea:	d01f      	beq.n	800562c <_printf_i+0xa8>
 80055ec:	2a70      	cmp	r2, #112	; 0x70
 80055ee:	d1e0      	bne.n	80055b2 <_printf_i+0x2e>
 80055f0:	2220      	movs	r2, #32
 80055f2:	6809      	ldr	r1, [r1, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	e003      	b.n	8005602 <_printf_i+0x7e>
 80055fa:	2a75      	cmp	r2, #117	; 0x75
 80055fc:	d016      	beq.n	800562c <_printf_i+0xa8>
 80055fe:	2a78      	cmp	r2, #120	; 0x78
 8005600:	d1d7      	bne.n	80055b2 <_printf_i+0x2e>
 8005602:	0022      	movs	r2, r4
 8005604:	2178      	movs	r1, #120	; 0x78
 8005606:	3245      	adds	r2, #69	; 0x45
 8005608:	7011      	strb	r1, [r2, #0]
 800560a:	4e61      	ldr	r6, [pc, #388]	; (8005790 <_printf_i+0x20c>)
 800560c:	e022      	b.n	8005654 <_printf_i+0xd0>
 800560e:	0025      	movs	r5, r4
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	3542      	adds	r5, #66	; 0x42
 8005614:	1d11      	adds	r1, r2, #4
 8005616:	6019      	str	r1, [r3, #0]
 8005618:	6813      	ldr	r3, [r2, #0]
 800561a:	702b      	strb	r3, [r5, #0]
 800561c:	2301      	movs	r3, #1
 800561e:	e065      	b.n	80056ec <_printf_i+0x168>
 8005620:	6808      	ldr	r0, [r1, #0]
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	0669      	lsls	r1, r5, #25
 8005626:	d5d3      	bpl.n	80055d0 <_printf_i+0x4c>
 8005628:	b200      	sxth	r0, r0
 800562a:	e7d1      	b.n	80055d0 <_printf_i+0x4c>
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	6825      	ldr	r5, [r4, #0]
 8005630:	1d08      	adds	r0, r1, #4
 8005632:	6018      	str	r0, [r3, #0]
 8005634:	6808      	ldr	r0, [r1, #0]
 8005636:	062e      	lsls	r6, r5, #24
 8005638:	d505      	bpl.n	8005646 <_printf_i+0xc2>
 800563a:	4e54      	ldr	r6, [pc, #336]	; (800578c <_printf_i+0x208>)
 800563c:	2708      	movs	r7, #8
 800563e:	2a6f      	cmp	r2, #111	; 0x6f
 8005640:	d01b      	beq.n	800567a <_printf_i+0xf6>
 8005642:	270a      	movs	r7, #10
 8005644:	e019      	b.n	800567a <_printf_i+0xf6>
 8005646:	066d      	lsls	r5, r5, #25
 8005648:	d5f7      	bpl.n	800563a <_printf_i+0xb6>
 800564a:	b280      	uxth	r0, r0
 800564c:	e7f5      	b.n	800563a <_printf_i+0xb6>
 800564e:	3145      	adds	r1, #69	; 0x45
 8005650:	4e4e      	ldr	r6, [pc, #312]	; (800578c <_printf_i+0x208>)
 8005652:	700a      	strb	r2, [r1, #0]
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	1d01      	adds	r1, r0, #4
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	6019      	str	r1, [r3, #0]
 800565e:	0615      	lsls	r5, r2, #24
 8005660:	d521      	bpl.n	80056a6 <_printf_i+0x122>
 8005662:	07d3      	lsls	r3, r2, #31
 8005664:	d502      	bpl.n	800566c <_printf_i+0xe8>
 8005666:	2320      	movs	r3, #32
 8005668:	431a      	orrs	r2, r3
 800566a:	6022      	str	r2, [r4, #0]
 800566c:	2710      	movs	r7, #16
 800566e:	2800      	cmp	r0, #0
 8005670:	d103      	bne.n	800567a <_printf_i+0xf6>
 8005672:	2320      	movs	r3, #32
 8005674:	6822      	ldr	r2, [r4, #0]
 8005676:	439a      	bics	r2, r3
 8005678:	6022      	str	r2, [r4, #0]
 800567a:	0023      	movs	r3, r4
 800567c:	2200      	movs	r2, #0
 800567e:	3343      	adds	r3, #67	; 0x43
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6863      	ldr	r3, [r4, #4]
 8005684:	60a3      	str	r3, [r4, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	db58      	blt.n	800573c <_printf_i+0x1b8>
 800568a:	2204      	movs	r2, #4
 800568c:	6821      	ldr	r1, [r4, #0]
 800568e:	4391      	bics	r1, r2
 8005690:	6021      	str	r1, [r4, #0]
 8005692:	2800      	cmp	r0, #0
 8005694:	d154      	bne.n	8005740 <_printf_i+0x1bc>
 8005696:	9d02      	ldr	r5, [sp, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d05a      	beq.n	8005752 <_printf_i+0x1ce>
 800569c:	0025      	movs	r5, r4
 800569e:	7833      	ldrb	r3, [r6, #0]
 80056a0:	3542      	adds	r5, #66	; 0x42
 80056a2:	702b      	strb	r3, [r5, #0]
 80056a4:	e055      	b.n	8005752 <_printf_i+0x1ce>
 80056a6:	0655      	lsls	r5, r2, #25
 80056a8:	d5db      	bpl.n	8005662 <_printf_i+0xde>
 80056aa:	b280      	uxth	r0, r0
 80056ac:	e7d9      	b.n	8005662 <_printf_i+0xde>
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	680d      	ldr	r5, [r1, #0]
 80056b2:	1d10      	adds	r0, r2, #4
 80056b4:	6949      	ldr	r1, [r1, #20]
 80056b6:	6018      	str	r0, [r3, #0]
 80056b8:	6813      	ldr	r3, [r2, #0]
 80056ba:	062e      	lsls	r6, r5, #24
 80056bc:	d501      	bpl.n	80056c2 <_printf_i+0x13e>
 80056be:	6019      	str	r1, [r3, #0]
 80056c0:	e002      	b.n	80056c8 <_printf_i+0x144>
 80056c2:	066d      	lsls	r5, r5, #25
 80056c4:	d5fb      	bpl.n	80056be <_printf_i+0x13a>
 80056c6:	8019      	strh	r1, [r3, #0]
 80056c8:	2300      	movs	r3, #0
 80056ca:	9d02      	ldr	r5, [sp, #8]
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	e04f      	b.n	8005770 <_printf_i+0x1ec>
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	1d11      	adds	r1, r2, #4
 80056d4:	6019      	str	r1, [r3, #0]
 80056d6:	6815      	ldr	r5, [r2, #0]
 80056d8:	2100      	movs	r1, #0
 80056da:	6862      	ldr	r2, [r4, #4]
 80056dc:	0028      	movs	r0, r5
 80056de:	f000 f859 	bl	8005794 <memchr>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d001      	beq.n	80056ea <_printf_i+0x166>
 80056e6:	1b40      	subs	r0, r0, r5
 80056e8:	6060      	str	r0, [r4, #4]
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	6123      	str	r3, [r4, #16]
 80056ee:	2300      	movs	r3, #0
 80056f0:	9a02      	ldr	r2, [sp, #8]
 80056f2:	7013      	strb	r3, [r2, #0]
 80056f4:	e03c      	b.n	8005770 <_printf_i+0x1ec>
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	002a      	movs	r2, r5
 80056fa:	9904      	ldr	r1, [sp, #16]
 80056fc:	9803      	ldr	r0, [sp, #12]
 80056fe:	9d05      	ldr	r5, [sp, #20]
 8005700:	47a8      	blx	r5
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d03e      	beq.n	8005784 <_printf_i+0x200>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	079b      	lsls	r3, r3, #30
 800570a:	d415      	bmi.n	8005738 <_printf_i+0x1b4>
 800570c:	9b07      	ldr	r3, [sp, #28]
 800570e:	68e0      	ldr	r0, [r4, #12]
 8005710:	4298      	cmp	r0, r3
 8005712:	da39      	bge.n	8005788 <_printf_i+0x204>
 8005714:	0018      	movs	r0, r3
 8005716:	e037      	b.n	8005788 <_printf_i+0x204>
 8005718:	0022      	movs	r2, r4
 800571a:	2301      	movs	r3, #1
 800571c:	3219      	adds	r2, #25
 800571e:	9904      	ldr	r1, [sp, #16]
 8005720:	9803      	ldr	r0, [sp, #12]
 8005722:	9e05      	ldr	r6, [sp, #20]
 8005724:	47b0      	blx	r6
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	d02c      	beq.n	8005784 <_printf_i+0x200>
 800572a:	3501      	adds	r5, #1
 800572c:	68e3      	ldr	r3, [r4, #12]
 800572e:	9a07      	ldr	r2, [sp, #28]
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	42ab      	cmp	r3, r5
 8005734:	dcf0      	bgt.n	8005718 <_printf_i+0x194>
 8005736:	e7e9      	b.n	800570c <_printf_i+0x188>
 8005738:	2500      	movs	r5, #0
 800573a:	e7f7      	b.n	800572c <_printf_i+0x1a8>
 800573c:	2800      	cmp	r0, #0
 800573e:	d0ad      	beq.n	800569c <_printf_i+0x118>
 8005740:	9d02      	ldr	r5, [sp, #8]
 8005742:	0039      	movs	r1, r7
 8005744:	f7fa fd66 	bl	8000214 <__aeabi_uidivmod>
 8005748:	5c73      	ldrb	r3, [r6, r1]
 800574a:	3d01      	subs	r5, #1
 800574c:	702b      	strb	r3, [r5, #0]
 800574e:	2800      	cmp	r0, #0
 8005750:	d1f7      	bne.n	8005742 <_printf_i+0x1be>
 8005752:	2f08      	cmp	r7, #8
 8005754:	d109      	bne.n	800576a <_printf_i+0x1e6>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	07db      	lsls	r3, r3, #31
 800575a:	d506      	bpl.n	800576a <_printf_i+0x1e6>
 800575c:	6863      	ldr	r3, [r4, #4]
 800575e:	6922      	ldr	r2, [r4, #16]
 8005760:	4293      	cmp	r3, r2
 8005762:	dc02      	bgt.n	800576a <_printf_i+0x1e6>
 8005764:	2330      	movs	r3, #48	; 0x30
 8005766:	3d01      	subs	r5, #1
 8005768:	702b      	strb	r3, [r5, #0]
 800576a:	9b02      	ldr	r3, [sp, #8]
 800576c:	1b5b      	subs	r3, r3, r5
 800576e:	6123      	str	r3, [r4, #16]
 8005770:	9b05      	ldr	r3, [sp, #20]
 8005772:	aa07      	add	r2, sp, #28
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	0021      	movs	r1, r4
 8005778:	9b04      	ldr	r3, [sp, #16]
 800577a:	9803      	ldr	r0, [sp, #12]
 800577c:	f7ff fe94 	bl	80054a8 <_printf_common>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d1b8      	bne.n	80056f6 <_printf_i+0x172>
 8005784:	2001      	movs	r0, #1
 8005786:	4240      	negs	r0, r0
 8005788:	b009      	add	sp, #36	; 0x24
 800578a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800578c:	080068f5 	.word	0x080068f5
 8005790:	08006906 	.word	0x08006906

08005794 <memchr>:
 8005794:	b2c9      	uxtb	r1, r1
 8005796:	1882      	adds	r2, r0, r2
 8005798:	4290      	cmp	r0, r2
 800579a:	d101      	bne.n	80057a0 <memchr+0xc>
 800579c:	2000      	movs	r0, #0
 800579e:	4770      	bx	lr
 80057a0:	7803      	ldrb	r3, [r0, #0]
 80057a2:	428b      	cmp	r3, r1
 80057a4:	d0fb      	beq.n	800579e <memchr+0xa>
 80057a6:	3001      	adds	r0, #1
 80057a8:	e7f6      	b.n	8005798 <memchr+0x4>

080057aa <memmove>:
 80057aa:	b510      	push	{r4, lr}
 80057ac:	4288      	cmp	r0, r1
 80057ae:	d902      	bls.n	80057b6 <memmove+0xc>
 80057b0:	188b      	adds	r3, r1, r2
 80057b2:	4298      	cmp	r0, r3
 80057b4:	d303      	bcc.n	80057be <memmove+0x14>
 80057b6:	2300      	movs	r3, #0
 80057b8:	e007      	b.n	80057ca <memmove+0x20>
 80057ba:	5c8b      	ldrb	r3, [r1, r2]
 80057bc:	5483      	strb	r3, [r0, r2]
 80057be:	3a01      	subs	r2, #1
 80057c0:	d2fb      	bcs.n	80057ba <memmove+0x10>
 80057c2:	bd10      	pop	{r4, pc}
 80057c4:	5ccc      	ldrb	r4, [r1, r3]
 80057c6:	54c4      	strb	r4, [r0, r3]
 80057c8:	3301      	adds	r3, #1
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d1fa      	bne.n	80057c4 <memmove+0x1a>
 80057ce:	e7f8      	b.n	80057c2 <memmove+0x18>

080057d0 <_realloc_r>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	0007      	movs	r7, r0
 80057d4:	000d      	movs	r5, r1
 80057d6:	0016      	movs	r6, r2
 80057d8:	2900      	cmp	r1, #0
 80057da:	d105      	bne.n	80057e8 <_realloc_r+0x18>
 80057dc:	0011      	movs	r1, r2
 80057de:	f7ff fc5b 	bl	8005098 <_malloc_r>
 80057e2:	0004      	movs	r4, r0
 80057e4:	0020      	movs	r0, r4
 80057e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	d103      	bne.n	80057f4 <_realloc_r+0x24>
 80057ec:	f7ff fc0a 	bl	8005004 <_free_r>
 80057f0:	0034      	movs	r4, r6
 80057f2:	e7f7      	b.n	80057e4 <_realloc_r+0x14>
 80057f4:	f000 f812 	bl	800581c <_malloc_usable_size_r>
 80057f8:	002c      	movs	r4, r5
 80057fa:	42b0      	cmp	r0, r6
 80057fc:	d2f2      	bcs.n	80057e4 <_realloc_r+0x14>
 80057fe:	0031      	movs	r1, r6
 8005800:	0038      	movs	r0, r7
 8005802:	f7ff fc49 	bl	8005098 <_malloc_r>
 8005806:	1e04      	subs	r4, r0, #0
 8005808:	d0ec      	beq.n	80057e4 <_realloc_r+0x14>
 800580a:	0029      	movs	r1, r5
 800580c:	0032      	movs	r2, r6
 800580e:	f7ff fbe7 	bl	8004fe0 <memcpy>
 8005812:	0029      	movs	r1, r5
 8005814:	0038      	movs	r0, r7
 8005816:	f7ff fbf5 	bl	8005004 <_free_r>
 800581a:	e7e3      	b.n	80057e4 <_realloc_r+0x14>

0800581c <_malloc_usable_size_r>:
 800581c:	1f0b      	subs	r3, r1, #4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	1f18      	subs	r0, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	da01      	bge.n	800582a <_malloc_usable_size_r+0xe>
 8005826:	580b      	ldr	r3, [r1, r0]
 8005828:	18c0      	adds	r0, r0, r3
 800582a:	4770      	bx	lr

0800582c <_init>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr

08005838 <_fini>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr
